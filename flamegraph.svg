<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1878" onload="init(evt)" viewBox="0 0 1200 1878" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1878" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1861.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1861.00"> </text><svg id="frames" x="10" width="1180" total_samples="862"><g><title>async_io::reactor::ReactorLock::react (1 samples, 0.12%)</title><rect x="0.0000%" y="1557" width="0.1160%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1567.50"></text></g><g><title>polling::Poller::wait (1 samples, 0.12%)</title><rect x="0.0000%" y="1541" width="0.1160%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1551.50"></text></g><g><title>polling::epoll::Poller::wait (1 samples, 0.12%)</title><rect x="0.0000%" y="1525" width="0.1160%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1535.50"></text></g><g><title>__GI_timerfd_settime (1 samples, 0.12%)</title><rect x="0.0000%" y="1509" width="0.1160%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1519.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.93%)</title><rect x="0.0000%" y="1685" width="0.9281%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1695.50"></text></g><g><title>std::panicking::try (8 samples, 0.93%)</title><rect x="0.0000%" y="1669" width="0.9281%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1679.50"></text></g><g><title>std::panicking::try::do_call (8 samples, 0.93%)</title><rect x="0.0000%" y="1653" width="0.9281%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1663.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8 samples, 0.93%)</title><rect x="0.0000%" y="1637" width="0.9281%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1647.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (8 samples, 0.93%)</title><rect x="0.0000%" y="1621" width="0.9281%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1631.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.93%)</title><rect x="0.0000%" y="1605" width="0.9281%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1615.50"></text></g><g><title>async_io::driver::unparker::{{closure}}::{{closure}} (8 samples, 0.93%)</title><rect x="0.0000%" y="1589" width="0.9281%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1599.50"></text></g><g><title>async_io::driver::main_loop (8 samples, 0.93%)</title><rect x="0.0000%" y="1573" width="0.9281%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="8"/><text x="0.2500%" y="1583.50"></text></g><g><title>parking::Inner::park (7 samples, 0.81%)</title><rect x="0.1160%" y="1557" width="0.8121%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1567.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (7 samples, 0.81%)</title><rect x="0.1160%" y="1541" width="0.8121%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1551.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_timeout (7 samples, 0.81%)</title><rect x="0.1160%" y="1525" width="0.8121%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1535.50"></text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (7 samples, 0.81%)</title><rect x="0.1160%" y="1509" width="0.8121%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1519.50"></text></g><g><title>std::sys::unix::futex::futex_wait (7 samples, 0.81%)</title><rect x="0.1160%" y="1493" width="0.8121%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1503.50"></text></g><g><title>syscall (7 samples, 0.81%)</title><rect x="0.1160%" y="1477" width="0.8121%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1487.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1461" width="0.8121%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1471.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1445" width="0.8121%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1455.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1429" width="0.8121%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1439.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1413" width="0.8121%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1423.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1397" width="0.8121%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1407.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1381" width="0.8121%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1391.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1365" width="0.8121%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1375.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1349" width="0.8121%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1359.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1333" width="0.8121%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1343.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1317" width="0.8121%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1327.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1301" width="0.8121%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1311.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1285" width="0.8121%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1295.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1269" width="0.8121%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1279.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="0.1160%" y="1253" width="0.8121%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="7"/><text x="0.3660%" y="1263.50"></text></g><g><title>__GI___clone (9 samples, 1.04%)</title><rect x="0.0000%" y="1797" width="1.0441%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1807.50"></text></g><g><title>start_thread (9 samples, 1.04%)</title><rect x="0.0000%" y="1781" width="1.0441%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1791.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 1.04%)</title><rect x="0.0000%" y="1765" width="1.0441%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1775.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9 samples, 1.04%)</title><rect x="0.0000%" y="1749" width="1.0441%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1759.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9 samples, 1.04%)</title><rect x="0.0000%" y="1733" width="1.0441%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1743.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9 samples, 1.04%)</title><rect x="0.0000%" y="1717" width="1.0441%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1727.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (9 samples, 1.04%)</title><rect x="0.0000%" y="1701" width="1.0441%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="9"/><text x="0.2500%" y="1711.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.12%)</title><rect x="0.9281%" y="1685" width="0.1160%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1695.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.12%)</title><rect x="0.9281%" y="1669" width="0.1160%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1679.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="0.9281%" y="1653" width="0.1160%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1663.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.12%)</title><rect x="0.9281%" y="1637" width="0.1160%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1647.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.12%)</title><rect x="0.9281%" y="1621" width="0.1160%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1631.50"></text></g><g><title>new_heap (1 samples, 0.12%)</title><rect x="0.9281%" y="1605" width="0.1160%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1589" width="0.1160%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1599.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1573" width="0.1160%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1557" width="0.1160%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1541" width="0.1160%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1525" width="0.1160%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1509" width="0.1160%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1493" width="0.1160%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1477" width="0.1160%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1461" width="0.1160%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1445" width="0.1160%" height="15" fill="rgb(231,145,46)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="0.9281%" y="1429" width="0.1160%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="1"/><text x="1.1781%" y="1439.50"></text></g><g><title>async-io (10 samples, 1.16%)</title><rect x="0.0000%" y="1813" width="1.1601%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="10"/><text x="0.2500%" y="1823.50"></text></g><g><title>tracing_core::dispatcher::SCOPED_COUNT (1 samples, 0.12%)</title><rect x="1.0441%" y="1797" width="0.1160%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="1.2941%" y="1807.50"></text></g><g><title>async_lock::once_cell::OnceCell&lt;T&gt;::get_or_try_init_blocking (1 samples, 0.12%)</title><rect x="1.0441%" y="1781" width="0.1160%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="1.2941%" y="1791.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::destroy (1 samples, 0.12%)</title><rect x="1.1601%" y="1781" width="0.1160%" height="15" fill="rgb(227,1,9)" fg:x="10" fg:w="1"/><text x="1.4101%" y="1791.50"></text></g><g><title>[anon] (2 samples, 0.23%)</title><rect x="1.1601%" y="1797" width="0.2320%" height="15" fill="rgb(248,47,43)" fg:x="10" fg:w="2"/><text x="1.4101%" y="1807.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1 samples, 0.12%)</title><rect x="1.2761%" y="1781" width="0.1160%" height="15" fill="rgb(221,10,30)" fg:x="11" fg:w="1"/><text x="1.5261%" y="1791.50"></text></g><g><title>mongodb::cmap::conn::wire::message::Message::read_from::{{closure}} (1 samples, 0.12%)</title><rect x="1.5081%" y="1653" width="0.1160%" height="15" fill="rgb(210,229,1)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1663.50"></text></g><g><title>mongodb::cmap::conn::wire::header::Header::read_from::{{closure}} (1 samples, 0.12%)</title><rect x="1.5081%" y="1637" width="0.1160%" height="15" fill="rgb(222,148,37)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1647.50"></text></g><g><title>&lt;tokio::io::util::read_int::ReadI32Le&lt;R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="1.5081%" y="1621" width="0.1160%" height="15" fill="rgb(234,67,33)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1631.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1605" width="0.1160%" height="15" fill="rgb(247,98,35)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1615.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1589" width="0.1160%" height="15" fill="rgb(247,138,52)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1599.50"></text></g><g><title>&lt;tokio::io::util::buf_stream::BufStream&lt;RW&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1573" width="0.1160%" height="15" fill="rgb(213,79,30)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1583.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1557" width="0.1160%" height="15" fill="rgb(246,177,23)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1567.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (1 samples, 0.12%)</title><rect x="1.5081%" y="1541" width="0.1160%" height="15" fill="rgb(230,62,27)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1551.50"></text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1525" width="0.1160%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1535.50"></text></g><g><title>&lt;mongodb::runtime::stream::AsyncStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1509" width="0.1160%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1519.50"></text></g><g><title>&lt;mongodb::runtime::stream::AsyncTcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1493" width="0.1160%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1503.50"></text></g><g><title>&lt;tokio_util::compat::Compat&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1477" width="0.1160%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1487.50"></text></g><g><title>&lt;&amp;mut T as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1461" width="0.1160%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1471.50"></text></g><g><title>&lt;async_std::net::tcp::stream::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1445" width="0.1160%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1455.50"></text></g><g><title>&lt;&amp;async_std::net::tcp::stream::TcpStream as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1429" width="0.1160%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1439.50"></text></g><g><title>&lt;&amp;async_io::Async&lt;T&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="1.5081%" y="1413" width="0.1160%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1423.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="1.5081%" y="1397" width="0.1160%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1407.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.12%)</title><rect x="1.5081%" y="1381" width="0.1160%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1391.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.12%)</title><rect x="1.5081%" y="1365" width="0.1160%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1375.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.12%)</title><rect x="1.5081%" y="1349" width="0.1160%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1359.50"></text></g><g><title>__libc_recv (1 samples, 0.12%)</title><rect x="1.5081%" y="1333" width="0.1160%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1343.50"></text></g><g><title>__libc_recv (1 samples, 0.12%)</title><rect x="1.5081%" y="1317" width="0.1160%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1301" width="0.1160%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1285" width="0.1160%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1269" width="0.1160%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1253" width="0.1160%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1237" width="0.1160%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1221" width="0.1160%" height="15" fill="rgb(235,124,12)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1205" width="0.1160%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.5081%" y="1189" width="0.1160%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="1"/><text x="1.7581%" y="1199.50"></text></g><g><title>mongodb::sdam::monitor::Monitor::perform_hello::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="1.5081%" y="1765" width="0.2320%" height="15" fill="rgb(242,216,29)" fg:x="13" fg:w="2"/><text x="1.7581%" y="1775.50"></text></g><g><title>mongodb::sdam::monitor::Monitor::perform_hello::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="1.5081%" y="1749" width="0.2320%" height="15" fill="rgb(230,116,27)" fg:x="13" fg:w="2"/><text x="1.7581%" y="1759.50"></text></g><g><title>mongodb::cmap::establish::ConnectionEstablisher::establish_monitoring_connection::{{closure}} (2 samples, 0.23%)</title><rect x="1.5081%" y="1733" width="0.2320%" height="15" fill="rgb(228,99,48)" fg:x="13" fg:w="2"/><text x="1.7581%" y="1743.50"></text></g><g><title>mongodb::cmap::establish::handshake::Handshaker::handshake::{{closure}} (2 samples, 0.23%)</title><rect x="1.5081%" y="1717" width="0.2320%" height="15" fill="rgb(253,11,6)" fg:x="13" fg:w="2"/><text x="1.7581%" y="1727.50"></text></g><g><title>mongodb::hello::run_hello::{{closure}} (2 samples, 0.23%)</title><rect x="1.5081%" y="1701" width="0.2320%" height="15" fill="rgb(247,143,39)" fg:x="13" fg:w="2"/><text x="1.7581%" y="1711.50"></text></g><g><title>mongodb::cmap::conn::Connection::send_command::{{closure}} (2 samples, 0.23%)</title><rect x="1.5081%" y="1685" width="0.2320%" height="15" fill="rgb(236,97,10)" fg:x="13" fg:w="2"/><text x="1.7581%" y="1695.50"></text></g><g><title>mongodb::cmap::conn::Connection::send_message::{{closure}} (2 samples, 0.23%)</title><rect x="1.5081%" y="1669" width="0.2320%" height="15" fill="rgb(233,208,19)" fg:x="13" fg:w="2"/><text x="1.7581%" y="1679.50"></text></g><g><title>mongodb::cmap::conn::wire::message::Message::write_to::{{closure}} (1 samples, 0.12%)</title><rect x="1.6241%" y="1653" width="0.1160%" height="15" fill="rgb(216,164,2)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1663.50"></text></g><g><title>&lt;tokio::io::util::flush::Flush&lt;A&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="1.6241%" y="1637" width="0.1160%" height="15" fill="rgb(220,129,5)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1647.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.12%)</title><rect x="1.6241%" y="1621" width="0.1160%" height="15" fill="rgb(242,17,10)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1631.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.12%)</title><rect x="1.6241%" y="1605" width="0.1160%" height="15" fill="rgb(242,107,0)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1615.50"></text></g><g><title>&lt;tokio::io::util::buf_stream::BufStream&lt;RW&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.12%)</title><rect x="1.6241%" y="1589" width="0.1160%" height="15" fill="rgb(251,28,31)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1599.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.12%)</title><rect x="1.6241%" y="1573" width="0.1160%" height="15" fill="rgb(233,223,10)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1583.50"></text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.12%)</title><rect x="1.6241%" y="1557" width="0.1160%" height="15" fill="rgb(215,21,27)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1567.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.12%)</title><rect x="1.6241%" y="1541" width="0.1160%" height="15" fill="rgb(232,23,21)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1551.50"></text></g><g><title>&lt;mongodb::runtime::stream::AsyncStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.12%)</title><rect x="1.6241%" y="1525" width="0.1160%" height="15" fill="rgb(244,5,23)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1535.50"></text></g><g><title>&lt;mongodb::runtime::stream::AsyncTcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.12%)</title><rect x="1.6241%" y="1509" width="0.1160%" height="15" fill="rgb(226,81,46)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1519.50"></text></g><g><title>&lt;tokio_util::compat::Compat&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (1 samples, 0.12%)</title><rect x="1.6241%" y="1493" width="0.1160%" height="15" fill="rgb(247,70,30)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1503.50"></text></g><g><title>&lt;&amp;mut T as futures_io::if_std::AsyncWrite&gt;::poll_write (1 samples, 0.12%)</title><rect x="1.6241%" y="1477" width="0.1160%" height="15" fill="rgb(212,68,19)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1487.50"></text></g><g><title>&lt;async_std::net::tcp::stream::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (1 samples, 0.12%)</title><rect x="1.6241%" y="1461" width="0.1160%" height="15" fill="rgb(240,187,13)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1471.50"></text></g><g><title>&lt;&amp;async_std::net::tcp::stream::TcpStream as futures_io::if_std::AsyncWrite&gt;::poll_write (1 samples, 0.12%)</title><rect x="1.6241%" y="1445" width="0.1160%" height="15" fill="rgb(223,113,26)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1455.50"></text></g><g><title>&lt;&amp;async_io::Async&lt;T&gt; as futures_io::if_std::AsyncWrite&gt;::poll_write (1 samples, 0.12%)</title><rect x="1.6241%" y="1429" width="0.1160%" height="15" fill="rgb(206,192,2)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1439.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.12%)</title><rect x="1.6241%" y="1413" width="0.1160%" height="15" fill="rgb(241,108,4)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1423.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.12%)</title><rect x="1.6241%" y="1397" width="0.1160%" height="15" fill="rgb(247,173,49)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1407.50"></text></g><g><title>__libc_send (1 samples, 0.12%)</title><rect x="1.6241%" y="1381" width="0.1160%" height="15" fill="rgb(224,114,35)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1391.50"></text></g><g><title>__libc_send (1 samples, 0.12%)</title><rect x="1.6241%" y="1365" width="0.1160%" height="15" fill="rgb(245,159,27)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1349" width="0.1160%" height="15" fill="rgb(245,172,44)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1333" width="0.1160%" height="15" fill="rgb(236,23,11)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1317" width="0.1160%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1301" width="0.1160%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1285" width="0.1160%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1269" width="0.1160%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1253" width="0.1160%" height="15" fill="rgb(235,36,10)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1237" width="0.1160%" height="15" fill="rgb(251,123,47)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1221" width="0.1160%" height="15" fill="rgb(221,13,13)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1205" width="0.1160%" height="15" fill="rgb(238,131,9)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1189" width="0.1160%" height="15" fill="rgb(211,50,8)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1173" width="0.1160%" height="15" fill="rgb(245,182,24)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1157" width="0.1160%" height="15" fill="rgb(242,14,37)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.6241%" y="1141" width="0.1160%" height="15" fill="rgb(246,228,12)" fg:x="14" fg:w="1"/><text x="1.8741%" y="1151.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.35%)</title><rect x="1.5081%" y="1781" width="0.3480%" height="15" fill="rgb(213,55,15)" fg:x="13" fg:w="3"/><text x="1.7581%" y="1791.50"></text></g><g><title>mongodb::sdam::monitor::RttMonitor::execute::{{closure}}::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1765" width="0.1160%" height="15" fill="rgb(209,9,3)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1775.50"></text></g><g><title>mongodb::sdam::monitor::RttMonitor::execute::{{closure}}::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1749" width="0.1160%" height="15" fill="rgb(230,59,30)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1759.50"></text></g><g><title>mongodb::cmap::establish::ConnectionEstablisher::establish_monitoring_connection::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1733" width="0.1160%" height="15" fill="rgb(209,121,21)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1743.50"></text></g><g><title>mongodb::cmap::establish::ConnectionEstablisher::make_stream::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1717" width="0.1160%" height="15" fill="rgb(220,109,13)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1727.50"></text></g><g><title>mongodb::runtime::timeout::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1701" width="0.1160%" height="15" fill="rgb(232,18,1)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1711.50"></text></g><g><title>async_std::future::timeout::timeout::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1685" width="0.1160%" height="15" fill="rgb(215,41,42)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1695.50"></text></g><g><title>&lt;async_std::future::timeout::TimeoutFuture&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="1.7401%" y="1669" width="0.1160%" height="15" fill="rgb(224,123,36)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1679.50"></text></g><g><title>mongodb::runtime::stream::AsyncStream::connect::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1653" width="0.1160%" height="15" fill="rgb(240,125,3)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1663.50"></text></g><g><title>mongodb::runtime::stream::AsyncTcpStream::connect::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1637" width="0.1160%" height="15" fill="rgb(205,98,50)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1647.50"></text></g><g><title>mongodb::runtime::stream::AsyncTcpStream::try_connect::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1621" width="0.1160%" height="15" fill="rgb(205,185,37)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1631.50"></text></g><g><title>async_std::net::tcp::stream::TcpStream::connect::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1605" width="0.1160%" height="15" fill="rgb(238,207,15)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1615.50"></text></g><g><title>async_io::Async&lt;std::net::tcp::TcpStream&gt;::connect::{{closure}} (1 samples, 0.12%)</title><rect x="1.7401%" y="1589" width="0.1160%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1599.50"></text></g><g><title>async_io::connect (1 samples, 0.12%)</title><rect x="1.7401%" y="1573" width="0.1160%" height="15" fill="rgb(235,201,11)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1583.50"></text></g><g><title>socket2::socket::Socket::new (1 samples, 0.12%)</title><rect x="1.7401%" y="1557" width="0.1160%" height="15" fill="rgb(207,46,11)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1567.50"></text></g><g><title>socket2::socket::Socket::new_raw (1 samples, 0.12%)</title><rect x="1.7401%" y="1541" width="0.1160%" height="15" fill="rgb(241,35,35)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1551.50"></text></g><g><title>socket2::sys::socket (1 samples, 0.12%)</title><rect x="1.7401%" y="1525" width="0.1160%" height="15" fill="rgb(243,32,47)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1535.50"></text></g><g><title>__GI___socket (1 samples, 0.12%)</title><rect x="1.7401%" y="1509" width="0.1160%" height="15" fill="rgb(247,202,23)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1493" width="0.1160%" height="15" fill="rgb(219,102,11)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1477" width="0.1160%" height="15" fill="rgb(243,110,44)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1461" width="0.1160%" height="15" fill="rgb(222,74,54)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1445" width="0.1160%" height="15" fill="rgb(216,99,12)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1429" width="0.1160%" height="15" fill="rgb(226,22,26)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1413" width="0.1160%" height="15" fill="rgb(217,163,10)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1397" width="0.1160%" height="15" fill="rgb(213,25,53)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1381" width="0.1160%" height="15" fill="rgb(252,105,26)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1365" width="0.1160%" height="15" fill="rgb(220,39,43)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="1.7401%" y="1349" width="0.1160%" height="15" fill="rgb(229,68,48)" fg:x="15" fg:w="1"/><text x="1.9901%" y="1359.50"></text></g><g><title>async_executor::Ticker::sleep (1 samples, 0.12%)</title><rect x="1.8561%" y="1781" width="0.1160%" height="15" fill="rgb(252,8,32)" fg:x="16" fg:w="1"/><text x="2.1061%" y="1791.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="1.3921%" y="1797" width="0.6961%" height="15" fill="rgb(223,20,43)" fg:x="12" fg:w="6"/><text x="1.6421%" y="1807.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.12%)</title><rect x="1.9722%" y="1781" width="0.1160%" height="15" fill="rgb(229,81,49)" fg:x="17" fg:w="1"/><text x="2.2222%" y="1791.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1781" width="1.6241%" height="15" fill="rgb(236,28,36)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1791.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1765" width="1.6241%" height="15" fill="rgb(249,185,26)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1775.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1749" width="1.6241%" height="15" fill="rgb(249,174,33)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1759.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1733" width="1.6241%" height="15" fill="rgb(233,201,37)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1743.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1717" width="1.6241%" height="15" fill="rgb(221,78,26)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1727.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1701" width="1.6241%" height="15" fill="rgb(250,127,30)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1711.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1685" width="1.6241%" height="15" fill="rgb(230,49,44)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1695.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="2.0882%" y="1669" width="1.6241%" height="15" fill="rgb(229,67,23)" fg:x="18" fg:w="14"/><text x="2.3382%" y="1679.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (1 samples, 0.12%)</title><rect x="3.7123%" y="1333" width="0.1160%" height="15" fill="rgb(249,83,47)" fg:x="32" fg:w="1"/><text x="3.9623%" y="1343.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (1 samples, 0.12%)</title><rect x="3.7123%" y="1317" width="0.1160%" height="15" fill="rgb(215,43,3)" fg:x="32" fg:w="1"/><text x="3.9623%" y="1327.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="3.7123%" y="1301" width="0.1160%" height="15" fill="rgb(238,154,13)" fg:x="32" fg:w="1"/><text x="3.9623%" y="1311.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (1 samples, 0.12%)</title><rect x="3.7123%" y="1285" width="0.1160%" height="15" fill="rgb(219,56,2)" fg:x="32" fg:w="1"/><text x="3.9623%" y="1295.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (1 samples, 0.12%)</title><rect x="3.7123%" y="1269" width="0.1160%" height="15" fill="rgb(233,0,4)" fg:x="32" fg:w="1"/><text x="3.9623%" y="1279.50"></text></g><g><title>async_executor::steal (1 samples, 0.12%)</title><rect x="3.7123%" y="1253" width="0.1160%" height="15" fill="rgb(235,30,7)" fg:x="32" fg:w="1"/><text x="3.9623%" y="1263.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1 samples, 0.12%)</title><rect x="3.7123%" y="1237" width="0.1160%" height="15" fill="rgb(250,79,13)" fg:x="32" fg:w="1"/><text x="3.9623%" y="1247.50"></text></g><g><title>mongodb::cmap::worker::ConnectionPoolWorker::start::{{closure}} (1 samples, 0.12%)</title><rect x="3.8283%" y="1173" width="0.1160%" height="15" fill="rgb(211,146,34)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1183.50"></text></g><g><title>mongodb::cmap::worker::ConnectionPoolWorker::execute::{{closure}} (1 samples, 0.12%)</title><rect x="3.8283%" y="1157" width="0.1160%" height="15" fill="rgb(228,22,38)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1167.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="3.8283%" y="1141" width="0.1160%" height="15" fill="rgb(235,168,5)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1151.50"></text></g><g><title>mongodb::cmap::worker::ConnectionPoolWorker::execute::{{closure}}::{{closure}} (1 samples, 0.12%)</title><rect x="3.8283%" y="1125" width="0.1160%" height="15" fill="rgb(221,155,16)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1135.50"></text></g><g><title>mongodb::runtime::interval::Interval::tick::{{closure}} (1 samples, 0.12%)</title><rect x="3.8283%" y="1109" width="0.1160%" height="15" fill="rgb(215,215,53)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1119.50"></text></g><g><title>mongodb::runtime::delay_for::{{closure}} (1 samples, 0.12%)</title><rect x="3.8283%" y="1093" width="0.1160%" height="15" fill="rgb(223,4,10)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1103.50"></text></g><g><title>async_std::task::sleep::sleep::{{closure}} (1 samples, 0.12%)</title><rect x="3.8283%" y="1077" width="0.1160%" height="15" fill="rgb(234,103,6)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1087.50"></text></g><g><title>async_std::io::timeout::timeout::{{closure}} (1 samples, 0.12%)</title><rect x="3.8283%" y="1061" width="0.1160%" height="15" fill="rgb(227,97,0)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1071.50"></text></g><g><title>&lt;async_std::io::timeout::Timeout&lt;F,T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="3.8283%" y="1045" width="0.1160%" height="15" fill="rgb(234,150,53)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1055.50"></text></g><g><title>&lt;async_io::Timer as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="3.8283%" y="1029" width="0.1160%" height="15" fill="rgb(228,201,54)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1039.50"></text></g><g><title>&lt;async_io::Timer as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.12%)</title><rect x="3.8283%" y="1013" width="0.1160%" height="15" fill="rgb(222,22,37)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1023.50"></text></g><g><title>async_io::reactor::Reactor::insert_timer (1 samples, 0.12%)</title><rect x="3.8283%" y="997" width="0.1160%" height="15" fill="rgb(237,53,32)" fg:x="33" fg:w="1"/><text x="4.0783%" y="1007.50"></text></g><g><title>async_io::reactor::Reactor::notify (1 samples, 0.12%)</title><rect x="3.8283%" y="981" width="0.1160%" height="15" fill="rgb(233,25,53)" fg:x="33" fg:w="1"/><text x="4.0783%" y="991.50"></text></g><g><title>polling::Poller::notify (1 samples, 0.12%)</title><rect x="3.8283%" y="965" width="0.1160%" height="15" fill="rgb(210,40,34)" fg:x="33" fg:w="1"/><text x="4.0783%" y="975.50"></text></g><g><title>polling::epoll::Poller::notify (1 samples, 0.12%)</title><rect x="3.8283%" y="949" width="0.1160%" height="15" fill="rgb(241,220,44)" fg:x="33" fg:w="1"/><text x="4.0783%" y="959.50"></text></g><g><title>__libc_write (1 samples, 0.12%)</title><rect x="3.8283%" y="933" width="0.1160%" height="15" fill="rgb(235,28,35)" fg:x="33" fg:w="1"/><text x="4.0783%" y="943.50"></text></g><g><title>__libc_write (1 samples, 0.12%)</title><rect x="3.8283%" y="917" width="0.1160%" height="15" fill="rgb(210,56,17)" fg:x="33" fg:w="1"/><text x="4.0783%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="901" width="0.1160%" height="15" fill="rgb(224,130,29)" fg:x="33" fg:w="1"/><text x="4.0783%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="885" width="0.1160%" height="15" fill="rgb(235,212,8)" fg:x="33" fg:w="1"/><text x="4.0783%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="869" width="0.1160%" height="15" fill="rgb(223,33,50)" fg:x="33" fg:w="1"/><text x="4.0783%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="853" width="0.1160%" height="15" fill="rgb(219,149,13)" fg:x="33" fg:w="1"/><text x="4.0783%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="837" width="0.1160%" height="15" fill="rgb(250,156,29)" fg:x="33" fg:w="1"/><text x="4.0783%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="821" width="0.1160%" height="15" fill="rgb(216,193,19)" fg:x="33" fg:w="1"/><text x="4.0783%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="805" width="0.1160%" height="15" fill="rgb(216,135,14)" fg:x="33" fg:w="1"/><text x="4.0783%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="789" width="0.1160%" height="15" fill="rgb(241,47,5)" fg:x="33" fg:w="1"/><text x="4.0783%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="773" width="0.1160%" height="15" fill="rgb(233,42,35)" fg:x="33" fg:w="1"/><text x="4.0783%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="757" width="0.1160%" height="15" fill="rgb(231,13,6)" fg:x="33" fg:w="1"/><text x="4.0783%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="741" width="0.1160%" height="15" fill="rgb(207,181,40)" fg:x="33" fg:w="1"/><text x="4.0783%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="725" width="0.1160%" height="15" fill="rgb(254,173,49)" fg:x="33" fg:w="1"/><text x="4.0783%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="709" width="0.1160%" height="15" fill="rgb(221,1,38)" fg:x="33" fg:w="1"/><text x="4.0783%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="693" width="0.1160%" height="15" fill="rgb(206,124,46)" fg:x="33" fg:w="1"/><text x="4.0783%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="677" width="0.1160%" height="15" fill="rgb(249,21,11)" fg:x="33" fg:w="1"/><text x="4.0783%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="661" width="0.1160%" height="15" fill="rgb(222,201,40)" fg:x="33" fg:w="1"/><text x="4.0783%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="3.8283%" y="645" width="0.1160%" height="15" fill="rgb(235,61,29)" fg:x="33" fg:w="1"/><text x="4.0783%" y="655.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (3 samples, 0.35%)</title><rect x="3.7123%" y="1365" width="0.3480%" height="15" fill="rgb(219,207,3)" fg:x="32" fg:w="3"/><text x="3.9623%" y="1375.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (3 samples, 0.35%)</title><rect x="3.7123%" y="1349" width="0.3480%" height="15" fill="rgb(222,56,46)" fg:x="32" fg:w="3"/><text x="3.9623%" y="1359.50"></text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::run (2 samples, 0.23%)</title><rect x="3.8283%" y="1333" width="0.2320%" height="15" fill="rgb(239,76,54)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1343.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::run (2 samples, 0.23%)</title><rect x="3.8283%" y="1317" width="0.2320%" height="15" fill="rgb(231,124,27)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1327.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 0.23%)</title><rect x="3.8283%" y="1301" width="0.2320%" height="15" fill="rgb(249,195,6)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1311.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (2 samples, 0.23%)</title><rect x="3.8283%" y="1285" width="0.2320%" height="15" fill="rgb(237,174,47)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1295.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.23%)</title><rect x="3.8283%" y="1269" width="0.2320%" height="15" fill="rgb(206,201,31)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1279.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2 samples, 0.23%)</title><rect x="3.8283%" y="1253" width="0.2320%" height="15" fill="rgb(231,57,52)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1263.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.23%)</title><rect x="3.8283%" y="1237" width="0.2320%" height="15" fill="rgb(248,177,22)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1247.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.23%)</title><rect x="3.8283%" y="1221" width="0.2320%" height="15" fill="rgb(215,211,37)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1231.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2 samples, 0.23%)</title><rect x="3.8283%" y="1205" width="0.2320%" height="15" fill="rgb(241,128,51)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1215.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2 samples, 0.23%)</title><rect x="3.8283%" y="1189" width="0.2320%" height="15" fill="rgb(227,165,31)" fg:x="33" fg:w="2"/><text x="4.0783%" y="1199.50"></text></g><g><title>mongodb::sdam::topology::TopologyWorker::start::{{closure}} (1 samples, 0.12%)</title><rect x="3.9443%" y="1173" width="0.1160%" height="15" fill="rgb(228,167,24)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1183.50"></text></g><g><title>mongodb::sdam::topology::TopologyWorker::initialize::{{closure}} (1 samples, 0.12%)</title><rect x="3.9443%" y="1157" width="0.1160%" height="15" fill="rgb(228,143,12)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1167.50"></text></g><g><title>mongodb::sdam::topology::TopologyWorker::update_topology::{{closure}} (1 samples, 0.12%)</title><rect x="3.9443%" y="1141" width="0.1160%" height="15" fill="rgb(249,149,8)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1151.50"></text></g><g><title>&lt;mongodb::sdam::topology::TopologyUpdater as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="3.9443%" y="1125" width="0.1160%" height="15" fill="rgb(243,35,44)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1135.50"></text></g><g><title>&lt;tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="3.9443%" y="1109" width="0.1160%" height="15" fill="rgb(246,89,9)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1119.50"></text></g><g><title>&lt;tokio::sync::mpsc::chan::Tx&lt;T,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="3.9443%" y="1093" width="0.1160%" height="15" fill="rgb(233,213,13)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.12%)</title><rect x="3.9443%" y="1077" width="0.1160%" height="15" fill="rgb(233,141,41)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.12%)</title><rect x="3.9443%" y="1061" width="0.1160%" height="15" fill="rgb(239,167,4)" fg:x="34" fg:w="1"/><text x="4.1943%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="4.0603%" y="1317" width="0.1160%" height="15" fill="rgb(209,217,16)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1327.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="4.0603%" y="1301" width="0.1160%" height="15" fill="rgb(219,88,35)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1285" width="0.1160%" height="15" fill="rgb(220,193,23)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1269" width="0.1160%" height="15" fill="rgb(230,90,52)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1253" width="0.1160%" height="15" fill="rgb(252,106,19)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1237" width="0.1160%" height="15" fill="rgb(206,74,20)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1221" width="0.1160%" height="15" fill="rgb(230,138,44)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1205" width="0.1160%" height="15" fill="rgb(235,182,43)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1189" width="0.1160%" height="15" fill="rgb(242,16,51)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.0603%" y="1173" width="0.1160%" height="15" fill="rgb(248,9,4)" fg:x="35" fg:w="1"/><text x="4.3103%" y="1183.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (7 samples, 0.81%)</title><rect x="3.7123%" y="1381" width="0.8121%" height="15" fill="rgb(210,31,22)" fg:x="32" fg:w="7"/><text x="3.9623%" y="1391.50"></text></g><g><title>async_executor::Runner::new (4 samples, 0.46%)</title><rect x="4.0603%" y="1365" width="0.4640%" height="15" fill="rgb(239,54,39)" fg:x="35" fg:w="4"/><text x="4.3103%" y="1375.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::bounded (4 samples, 0.46%)</title><rect x="4.0603%" y="1349" width="0.4640%" height="15" fill="rgb(230,99,41)" fg:x="35" fg:w="4"/><text x="4.3103%" y="1359.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::new (4 samples, 0.46%)</title><rect x="4.0603%" y="1333" width="0.4640%" height="15" fill="rgb(253,106,12)" fg:x="35" fg:w="4"/><text x="4.3103%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.35%)</title><rect x="4.1763%" y="1317" width="0.3480%" height="15" fill="rgb(213,46,41)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.35%)</title><rect x="4.1763%" y="1301" width="0.3480%" height="15" fill="rgb(215,133,35)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.35%)</title><rect x="4.1763%" y="1285" width="0.3480%" height="15" fill="rgb(213,28,5)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.35%)</title><rect x="4.1763%" y="1269" width="0.3480%" height="15" fill="rgb(215,77,49)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1279.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.35%)</title><rect x="4.1763%" y="1253" width="0.3480%" height="15" fill="rgb(248,100,22)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1263.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.35%)</title><rect x="4.1763%" y="1237" width="0.3480%" height="15" fill="rgb(208,67,9)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1247.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.35%)</title><rect x="4.1763%" y="1221" width="0.3480%" height="15" fill="rgb(219,133,21)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1231.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.35%)</title><rect x="4.1763%" y="1205" width="0.3480%" height="15" fill="rgb(246,46,29)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1215.50"></text></g><g><title>_int_malloc (3 samples, 0.35%)</title><rect x="4.1763%" y="1189" width="0.3480%" height="15" fill="rgb(246,185,52)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1199.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1173" width="0.3480%" height="15" fill="rgb(252,136,11)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1157" width="0.3480%" height="15" fill="rgb(219,138,53)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1141" width="0.3480%" height="15" fill="rgb(211,51,23)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1125" width="0.3480%" height="15" fill="rgb(247,221,28)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1109" width="0.3480%" height="15" fill="rgb(251,222,45)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1093" width="0.3480%" height="15" fill="rgb(217,162,53)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1077" width="0.3480%" height="15" fill="rgb(229,93,14)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1061" width="0.3480%" height="15" fill="rgb(209,67,49)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="4.1763%" y="1045" width="0.3480%" height="15" fill="rgb(213,87,29)" fg:x="36" fg:w="3"/><text x="4.4263%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.2923%" y="1029" width="0.2320%" height="15" fill="rgb(205,151,52)" fg:x="37" fg:w="2"/><text x="4.5423%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.2923%" y="1013" width="0.2320%" height="15" fill="rgb(253,215,39)" fg:x="37" fg:w="2"/><text x="4.5423%" y="1023.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="4.5244%" y="1333" width="0.2320%" height="15" fill="rgb(221,220,41)" fg:x="39" fg:w="2"/><text x="4.7744%" y="1343.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (2 samples, 0.23%)</title><rect x="4.5244%" y="1317" width="0.2320%" height="15" fill="rgb(218,133,21)" fg:x="39" fg:w="2"/><text x="4.7744%" y="1327.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (2 samples, 0.23%)</title><rect x="4.5244%" y="1301" width="0.2320%" height="15" fill="rgb(221,193,43)" fg:x="39" fg:w="2"/><text x="4.7744%" y="1311.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.23%)</title><rect x="4.5244%" y="1285" width="0.2320%" height="15" fill="rgb(240,128,52)" fg:x="39" fg:w="2"/><text x="4.7744%" y="1295.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="4.5244%" y="1269" width="0.2320%" height="15" fill="rgb(253,114,12)" fg:x="39" fg:w="2"/><text x="4.7744%" y="1279.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="4.5244%" y="1253" width="0.2320%" height="15" fill="rgb(215,223,47)" fg:x="39" fg:w="2"/><text x="4.7744%" y="1263.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.12%)</title><rect x="4.6404%" y="1237" width="0.1160%" height="15" fill="rgb(248,225,23)" fg:x="40" fg:w="1"/><text x="4.8904%" y="1247.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.12%)</title><rect x="4.6404%" y="1221" width="0.1160%" height="15" fill="rgb(250,108,0)" fg:x="40" fg:w="1"/><text x="4.8904%" y="1231.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.12%)</title><rect x="4.6404%" y="1205" width="0.1160%" height="15" fill="rgb(228,208,7)" fg:x="40" fg:w="1"/><text x="4.8904%" y="1215.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (3 samples, 0.35%)</title><rect x="4.5244%" y="1349" width="0.3480%" height="15" fill="rgb(244,45,10)" fg:x="39" fg:w="3"/><text x="4.7744%" y="1359.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.12%)</title><rect x="4.7564%" y="1333" width="0.1160%" height="15" fill="rgb(207,125,25)" fg:x="41" fg:w="1"/><text x="5.0064%" y="1343.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="4.7564%" y="1317" width="0.1160%" height="15" fill="rgb(210,195,18)" fg:x="41" fg:w="1"/><text x="5.0064%" y="1327.50"></text></g><g><title>async_channel::Recv&lt;T&gt;::run_with_strategy (1 samples, 0.12%)</title><rect x="4.7564%" y="1301" width="0.1160%" height="15" fill="rgb(249,80,12)" fg:x="41" fg:w="1"/><text x="5.0064%" y="1311.50"></text></g><g><title>&lt;async_channel::NonBlocking as async_channel::Strategy&gt;::poll (1 samples, 0.12%)</title><rect x="4.7564%" y="1285" width="0.1160%" height="15" fill="rgb(221,65,9)" fg:x="41" fg:w="1"/><text x="5.0064%" y="1295.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="4.7564%" y="1269" width="0.1160%" height="15" fill="rgb(235,49,36)" fg:x="41" fg:w="1"/><text x="5.0064%" y="1279.50"></text></g><g><title>core::task::wake::Context::waker (1 samples, 0.12%)</title><rect x="4.7564%" y="1253" width="0.1160%" height="15" fill="rgb(225,32,20)" fg:x="41" fg:w="1"/><text x="5.0064%" y="1263.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.23%)</title><rect x="4.8724%" y="1317" width="0.2320%" height="15" fill="rgb(215,141,46)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1327.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.23%)</title><rect x="4.8724%" y="1301" width="0.2320%" height="15" fill="rgb(250,160,47)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.23%)</title><rect x="4.8724%" y="1285" width="0.2320%" height="15" fill="rgb(216,222,40)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1295.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.23%)</title><rect x="4.8724%" y="1269" width="0.2320%" height="15" fill="rgb(234,217,39)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1279.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.23%)</title><rect x="4.8724%" y="1253" width="0.2320%" height="15" fill="rgb(207,178,40)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1263.50"></text></g><g><title>__rdl_alloc (2 samples, 0.23%)</title><rect x="4.8724%" y="1237" width="0.2320%" height="15" fill="rgb(221,136,13)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1247.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.23%)</title><rect x="4.8724%" y="1221" width="0.2320%" height="15" fill="rgb(249,199,10)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1231.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (2 samples, 0.23%)</title><rect x="4.8724%" y="1205" width="0.2320%" height="15" fill="rgb(249,222,13)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1215.50"></text></g><g><title>__posix_memalign (2 samples, 0.23%)</title><rect x="4.8724%" y="1189" width="0.2320%" height="15" fill="rgb(244,185,38)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1199.50"></text></g><g><title>_int_memalign (2 samples, 0.23%)</title><rect x="4.8724%" y="1173" width="0.2320%" height="15" fill="rgb(236,202,9)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1183.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="4.8724%" y="1157" width="0.2320%" height="15" fill="rgb(250,229,37)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.8724%" y="1141" width="0.2320%" height="15" fill="rgb(206,174,23)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.8724%" y="1125" width="0.2320%" height="15" fill="rgb(211,33,43)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.8724%" y="1109" width="0.2320%" height="15" fill="rgb(245,58,50)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.8724%" y="1093" width="0.2320%" height="15" fill="rgb(244,68,36)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.8724%" y="1077" width="0.2320%" height="15" fill="rgb(232,229,15)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="4.8724%" y="1061" width="0.2320%" height="15" fill="rgb(254,30,23)" fg:x="42" fg:w="2"/><text x="5.1224%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.9884%" y="1045" width="0.1160%" height="15" fill="rgb(235,160,14)" fg:x="43" fg:w="1"/><text x="5.2384%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="4.9884%" y="1029" width="0.1160%" height="15" fill="rgb(212,155,44)" fg:x="43" fg:w="1"/><text x="5.2384%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.35%)</title><rect x="5.1044%" y="1301" width="0.3480%" height="15" fill="rgb(226,2,50)" fg:x="44" fg:w="3"/><text x="5.3544%" y="1311.50"></text></g><g><title>core::ptr::write (3 samples, 0.35%)</title><rect x="5.1044%" y="1285" width="0.3480%" height="15" fill="rgb(234,177,6)" fg:x="44" fg:w="3"/><text x="5.3544%" y="1295.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (19 samples, 2.20%)</title><rect x="3.7123%" y="1397" width="2.2042%" height="15" fill="rgb(217,24,9)" fg:x="32" fg:w="19"/><text x="3.9623%" y="1407.50">&lt;..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (12 samples, 1.39%)</title><rect x="4.5244%" y="1381" width="1.3921%" height="15" fill="rgb(220,13,46)" fg:x="39" fg:w="12"/><text x="4.7744%" y="1391.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (12 samples, 1.39%)</title><rect x="4.5244%" y="1365" width="1.3921%" height="15" fill="rgb(239,221,27)" fg:x="39" fg:w="12"/><text x="4.7744%" y="1375.50"></text></g><g><title>async_executor::Runner::new (9 samples, 1.04%)</title><rect x="4.8724%" y="1349" width="1.0441%" height="15" fill="rgb(222,198,25)" fg:x="42" fg:w="9"/><text x="5.1224%" y="1359.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::bounded (9 samples, 1.04%)</title><rect x="4.8724%" y="1333" width="1.0441%" height="15" fill="rgb(211,99,13)" fg:x="42" fg:w="9"/><text x="5.1224%" y="1343.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::new (7 samples, 0.81%)</title><rect x="5.1044%" y="1317" width="0.8121%" height="15" fill="rgb(232,111,31)" fg:x="44" fg:w="7"/><text x="5.3544%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.46%)</title><rect x="5.4524%" y="1301" width="0.4640%" height="15" fill="rgb(245,82,37)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.46%)</title><rect x="5.4524%" y="1285" width="0.4640%" height="15" fill="rgb(227,149,46)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.46%)</title><rect x="5.4524%" y="1269" width="0.4640%" height="15" fill="rgb(218,36,50)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.46%)</title><rect x="5.4524%" y="1253" width="0.4640%" height="15" fill="rgb(226,80,48)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1263.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.46%)</title><rect x="5.4524%" y="1237" width="0.4640%" height="15" fill="rgb(238,224,15)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1247.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.46%)</title><rect x="5.4524%" y="1221" width="0.4640%" height="15" fill="rgb(241,136,10)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1231.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.46%)</title><rect x="5.4524%" y="1205" width="0.4640%" height="15" fill="rgb(208,32,45)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1215.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.46%)</title><rect x="5.4524%" y="1189" width="0.4640%" height="15" fill="rgb(207,135,9)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1199.50"></text></g><g><title>_int_malloc (4 samples, 0.46%)</title><rect x="5.4524%" y="1173" width="0.4640%" height="15" fill="rgb(206,86,44)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="5.4524%" y="1157" width="0.4640%" height="15" fill="rgb(245,177,15)" fg:x="47" fg:w="4"/><text x="5.7024%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="5.5684%" y="1141" width="0.3480%" height="15" fill="rgb(206,64,50)" fg:x="48" fg:w="3"/><text x="5.8184%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="5.6845%" y="1125" width="0.2320%" height="15" fill="rgb(234,36,40)" fg:x="49" fg:w="2"/><text x="5.9345%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="5.6845%" y="1109" width="0.2320%" height="15" fill="rgb(213,64,8)" fg:x="49" fg:w="2"/><text x="5.9345%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="5.6845%" y="1093" width="0.2320%" height="15" fill="rgb(210,75,36)" fg:x="49" fg:w="2"/><text x="5.9345%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="5.6845%" y="1077" width="0.2320%" height="15" fill="rgb(229,88,21)" fg:x="49" fg:w="2"/><text x="5.9345%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="5.6845%" y="1061" width="0.2320%" height="15" fill="rgb(252,204,47)" fg:x="49" fg:w="2"/><text x="5.9345%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="5.8005%" y="1045" width="0.1160%" height="15" fill="rgb(208,77,27)" fg:x="50" fg:w="1"/><text x="6.0505%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="5.8005%" y="1029" width="0.1160%" height="15" fill="rgb(221,76,26)" fg:x="50" fg:w="1"/><text x="6.0505%" y="1039.50"></text></g><g><title>&lt;core::time::Duration as core::cmp::PartialEq&gt;::eq (1 samples, 0.12%)</title><rect x="5.9165%" y="1349" width="0.1160%" height="15" fill="rgb(225,139,18)" fg:x="51" fg:w="1"/><text x="6.1665%" y="1359.50"></text></g><g><title>async_io::reactor::ReactorLock::react (9 samples, 1.04%)</title><rect x="5.9165%" y="1397" width="1.0441%" height="15" fill="rgb(230,137,11)" fg:x="51" fg:w="9"/><text x="6.1665%" y="1407.50"></text></g><g><title>polling::Poller::wait (9 samples, 1.04%)</title><rect x="5.9165%" y="1381" width="1.0441%" height="15" fill="rgb(212,28,1)" fg:x="51" fg:w="9"/><text x="6.1665%" y="1391.50"></text></g><g><title>polling::epoll::Poller::wait (9 samples, 1.04%)</title><rect x="5.9165%" y="1365" width="1.0441%" height="15" fill="rgb(248,164,17)" fg:x="51" fg:w="9"/><text x="6.1665%" y="1375.50"></text></g><g><title>epoll_wait (8 samples, 0.93%)</title><rect x="6.0325%" y="1349" width="0.9281%" height="15" fill="rgb(222,171,42)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1333" width="0.9281%" height="15" fill="rgb(243,84,45)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1317" width="0.9281%" height="15" fill="rgb(252,49,23)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1327.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1301" width="0.9281%" height="15" fill="rgb(215,19,7)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1311.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1285" width="0.9281%" height="15" fill="rgb(238,81,41)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1295.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1269" width="0.9281%" height="15" fill="rgb(210,199,37)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1279.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1253" width="0.9281%" height="15" fill="rgb(244,192,49)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1263.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1237" width="0.9281%" height="15" fill="rgb(226,211,11)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1221" width="0.9281%" height="15" fill="rgb(236,162,54)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1231.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1205" width="0.9281%" height="15" fill="rgb(220,229,9)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1215.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1189" width="0.9281%" height="15" fill="rgb(250,87,22)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1173" width="0.9281%" height="15" fill="rgb(239,43,17)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1157" width="0.9281%" height="15" fill="rgb(231,177,25)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1141" width="0.9281%" height="15" fill="rgb(219,179,1)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1125" width="0.9281%" height="15" fill="rgb(238,219,53)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="6.0325%" y="1109" width="0.9281%" height="15" fill="rgb(232,167,36)" fg:x="52" fg:w="8"/><text x="6.2825%" y="1119.50"></text></g><g><title>std::panic::catch_unwind (59 samples, 6.84%)</title><rect x="3.7123%" y="1685" width="6.8445%" height="15" fill="rgb(244,19,51)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1695.50">std::pani..</text></g><g><title>std::panicking::try (59 samples, 6.84%)</title><rect x="3.7123%" y="1669" width="6.8445%" height="15" fill="rgb(224,6,22)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1679.50">std::pani..</text></g><g><title>std::panicking::try::do_call (59 samples, 6.84%)</title><rect x="3.7123%" y="1653" width="6.8445%" height="15" fill="rgb(224,145,5)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1663.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (59 samples, 6.84%)</title><rect x="3.7123%" y="1637" width="6.8445%" height="15" fill="rgb(234,130,49)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1647.50">&lt;core::pa..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (59 samples, 6.84%)</title><rect x="3.7123%" y="1621" width="6.8445%" height="15" fill="rgb(254,6,2)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1631.50">std::thre..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (59 samples, 6.84%)</title><rect x="3.7123%" y="1605" width="6.8445%" height="15" fill="rgb(208,96,46)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1615.50">std::sys_..</text></g><g><title>core::ops::function::FnOnce::call_once (59 samples, 6.84%)</title><rect x="3.7123%" y="1589" width="6.8445%" height="15" fill="rgb(239,3,39)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1599.50">core::ops..</text></g><g><title>async_global_executor::threading::thread_main_loop (59 samples, 6.84%)</title><rect x="3.7123%" y="1573" width="6.8445%" height="15" fill="rgb(233,210,1)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1583.50">async_glo..</text></g><g><title>std::panic::catch_unwind (59 samples, 6.84%)</title><rect x="3.7123%" y="1557" width="6.8445%" height="15" fill="rgb(244,137,37)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1567.50">std::pani..</text></g><g><title>std::panicking::try (59 samples, 6.84%)</title><rect x="3.7123%" y="1541" width="6.8445%" height="15" fill="rgb(240,136,2)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1551.50">std::pani..</text></g><g><title>std::panicking::try::do_call (59 samples, 6.84%)</title><rect x="3.7123%" y="1525" width="6.8445%" height="15" fill="rgb(239,18,37)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1535.50">std::pani..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (59 samples, 6.84%)</title><rect x="3.7123%" y="1509" width="6.8445%" height="15" fill="rgb(218,185,22)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1519.50">async_glo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (59 samples, 6.84%)</title><rect x="3.7123%" y="1493" width="6.8445%" height="15" fill="rgb(225,218,4)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1503.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (59 samples, 6.84%)</title><rect x="3.7123%" y="1477" width="6.8445%" height="15" fill="rgb(230,182,32)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1487.50">std::thre..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (59 samples, 6.84%)</title><rect x="3.7123%" y="1461" width="6.8445%" height="15" fill="rgb(242,56,43)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1471.50">async_glo..</text></g><g><title>async_global_executor::reactor::block_on (59 samples, 6.84%)</title><rect x="3.7123%" y="1445" width="6.8445%" height="15" fill="rgb(233,99,24)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1455.50">async_glo..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (59 samples, 6.84%)</title><rect x="3.7123%" y="1429" width="6.8445%" height="15" fill="rgb(234,209,42)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1439.50">async_glo..</text></g><g><title>async_io::driver::block_on (59 samples, 6.84%)</title><rect x="3.7123%" y="1413" width="6.8445%" height="15" fill="rgb(227,7,12)" fg:x="32" fg:w="59"/><text x="3.9623%" y="1423.50">async_io:..</text></g><g><title>parking::Inner::park (31 samples, 3.60%)</title><rect x="6.9606%" y="1397" width="3.5963%" height="15" fill="rgb(245,203,43)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1407.50">park..</text></g><g><title>std::sync::condvar::Condvar::wait (31 samples, 3.60%)</title><rect x="6.9606%" y="1381" width="3.5963%" height="15" fill="rgb(238,205,33)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1391.50">std:..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (31 samples, 3.60%)</title><rect x="6.9606%" y="1365" width="3.5963%" height="15" fill="rgb(231,56,7)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1375.50">std:..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (31 samples, 3.60%)</title><rect x="6.9606%" y="1349" width="3.5963%" height="15" fill="rgb(244,186,29)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1359.50">std:..</text></g><g><title>std::sys::unix::futex::futex_wait (31 samples, 3.60%)</title><rect x="6.9606%" y="1333" width="3.5963%" height="15" fill="rgb(234,111,31)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1343.50">std:..</text></g><g><title>syscall (31 samples, 3.60%)</title><rect x="6.9606%" y="1317" width="3.5963%" height="15" fill="rgb(241,149,10)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1327.50">sysc..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1301" width="3.5963%" height="15" fill="rgb(249,206,44)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1311.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1285" width="3.5963%" height="15" fill="rgb(251,153,30)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1295.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1269" width="3.5963%" height="15" fill="rgb(239,152,38)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1279.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1253" width="3.5963%" height="15" fill="rgb(249,139,47)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1263.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1237" width="3.5963%" height="15" fill="rgb(244,64,35)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1247.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1221" width="3.5963%" height="15" fill="rgb(216,46,15)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1231.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1205" width="3.5963%" height="15" fill="rgb(250,74,19)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1215.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1189" width="3.5963%" height="15" fill="rgb(249,42,33)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1199.50">[unk..</text></g><g><title>[unknown] (31 samples, 3.60%)</title><rect x="6.9606%" y="1173" width="3.5963%" height="15" fill="rgb(242,149,17)" fg:x="60" fg:w="31"/><text x="7.2106%" y="1183.50">[unk..</text></g><g><title>[unknown] (30 samples, 3.48%)</title><rect x="7.0766%" y="1157" width="3.4803%" height="15" fill="rgb(244,29,21)" fg:x="61" fg:w="30"/><text x="7.3266%" y="1167.50">[un..</text></g><g><title>[unknown] (30 samples, 3.48%)</title><rect x="7.0766%" y="1141" width="3.4803%" height="15" fill="rgb(220,130,37)" fg:x="61" fg:w="30"/><text x="7.3266%" y="1151.50">[un..</text></g><g><title>[unknown] (29 samples, 3.36%)</title><rect x="7.1926%" y="1125" width="3.3643%" height="15" fill="rgb(211,67,2)" fg:x="62" fg:w="29"/><text x="7.4426%" y="1135.50">[un..</text></g><g><title>[unknown] (29 samples, 3.36%)</title><rect x="7.1926%" y="1109" width="3.3643%" height="15" fill="rgb(235,68,52)" fg:x="62" fg:w="29"/><text x="7.4426%" y="1119.50">[un..</text></g><g><title>[unknown] (28 samples, 3.25%)</title><rect x="7.3086%" y="1093" width="3.2483%" height="15" fill="rgb(246,142,3)" fg:x="63" fg:w="28"/><text x="7.5586%" y="1103.50">[un..</text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="10.4408%" y="1077" width="0.1160%" height="15" fill="rgb(241,25,7)" fg:x="90" fg:w="1"/><text x="10.6908%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="10.4408%" y="1061" width="0.1160%" height="15" fill="rgb(242,119,39)" fg:x="90" fg:w="1"/><text x="10.6908%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="10.4408%" y="1045" width="0.1160%" height="15" fill="rgb(241,98,45)" fg:x="90" fg:w="1"/><text x="10.6908%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="10.4408%" y="1029" width="0.1160%" height="15" fill="rgb(254,28,30)" fg:x="90" fg:w="1"/><text x="10.6908%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="10.4408%" y="1013" width="0.1160%" height="15" fill="rgb(241,142,54)" fg:x="90" fg:w="1"/><text x="10.6908%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="10.4408%" y="997" width="0.1160%" height="15" fill="rgb(222,85,15)" fg:x="90" fg:w="1"/><text x="10.6908%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="10.4408%" y="981" width="0.1160%" height="15" fill="rgb(210,85,47)" fg:x="90" fg:w="1"/><text x="10.6908%" y="991.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="10.7889%" y="1589" width="0.4640%" height="15" fill="rgb(224,206,25)" fg:x="93" fg:w="4"/><text x="11.0389%" y="1599.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="10.9049%" y="1573" width="0.3480%" height="15" fill="rgb(243,201,19)" fg:x="94" fg:w="3"/><text x="11.1549%" y="1583.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.0209%" y="1557" width="0.2320%" height="15" fill="rgb(236,59,4)" fg:x="95" fg:w="2"/><text x="11.2709%" y="1567.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.0209%" y="1541" width="0.2320%" height="15" fill="rgb(254,179,45)" fg:x="95" fg:w="2"/><text x="11.2709%" y="1551.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.0209%" y="1525" width="0.2320%" height="15" fill="rgb(226,14,10)" fg:x="95" fg:w="2"/><text x="11.2709%" y="1535.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.0209%" y="1509" width="0.2320%" height="15" fill="rgb(244,27,41)" fg:x="95" fg:w="2"/><text x="11.2709%" y="1519.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.0209%" y="1493" width="0.2320%" height="15" fill="rgb(235,35,32)" fg:x="95" fg:w="2"/><text x="11.2709%" y="1503.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.0209%" y="1477" width="0.2320%" height="15" fill="rgb(218,68,31)" fg:x="95" fg:w="2"/><text x="11.2709%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.1369%" y="1461" width="0.1160%" height="15" fill="rgb(207,120,37)" fg:x="96" fg:w="1"/><text x="11.3869%" y="1471.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.81%)</title><rect x="10.6729%" y="1653" width="0.8121%" height="15" fill="rgb(227,98,0)" fg:x="92" fg:w="7"/><text x="10.9229%" y="1663.50"></text></g><g><title>tcache_init.part.0 (7 samples, 0.81%)</title><rect x="10.6729%" y="1637" width="0.8121%" height="15" fill="rgb(207,7,3)" fg:x="92" fg:w="7"/><text x="10.9229%" y="1647.50"></text></g><g><title>arena_get2.part.0 (7 samples, 0.81%)</title><rect x="10.6729%" y="1621" width="0.8121%" height="15" fill="rgb(206,98,19)" fg:x="92" fg:w="7"/><text x="10.9229%" y="1631.50"></text></g><g><title>new_heap (6 samples, 0.70%)</title><rect x="10.7889%" y="1605" width="0.6961%" height="15" fill="rgb(217,5,26)" fg:x="93" fg:w="6"/><text x="11.0389%" y="1615.50"></text></g><g><title>__GI_munmap (2 samples, 0.23%)</title><rect x="11.2529%" y="1589" width="0.2320%" height="15" fill="rgb(235,190,38)" fg:x="97" fg:w="2"/><text x="11.5029%" y="1599.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.2529%" y="1573" width="0.2320%" height="15" fill="rgb(247,86,24)" fg:x="97" fg:w="2"/><text x="11.5029%" y="1583.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.2529%" y="1557" width="0.2320%" height="15" fill="rgb(205,101,16)" fg:x="97" fg:w="2"/><text x="11.5029%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.3689%" y="1541" width="0.1160%" height="15" fill="rgb(246,168,33)" fg:x="98" fg:w="1"/><text x="11.6189%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.3689%" y="1525" width="0.1160%" height="15" fill="rgb(231,114,1)" fg:x="98" fg:w="1"/><text x="11.6189%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.3689%" y="1509" width="0.1160%" height="15" fill="rgb(207,184,53)" fg:x="98" fg:w="1"/><text x="11.6189%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.3689%" y="1493" width="0.1160%" height="15" fill="rgb(224,95,51)" fg:x="98" fg:w="1"/><text x="11.6189%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.3689%" y="1477" width="0.1160%" height="15" fill="rgb(212,188,45)" fg:x="98" fg:w="1"/><text x="11.6189%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.3689%" y="1461" width="0.1160%" height="15" fill="rgb(223,154,38)" fg:x="98" fg:w="1"/><text x="11.6189%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.3689%" y="1445" width="0.1160%" height="15" fill="rgb(251,22,52)" fg:x="98" fg:w="1"/><text x="11.6189%" y="1455.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (69 samples, 8.00%)</title><rect x="3.7123%" y="1749" width="8.0046%" height="15" fill="rgb(229,209,22)" fg:x="32" fg:w="69"/><text x="3.9623%" y="1759.50">&lt;alloc::box..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (69 samples, 8.00%)</title><rect x="3.7123%" y="1733" width="8.0046%" height="15" fill="rgb(234,138,34)" fg:x="32" fg:w="69"/><text x="3.9623%" y="1743.50">&lt;alloc::box..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (69 samples, 8.00%)</title><rect x="3.7123%" y="1717" width="8.0046%" height="15" fill="rgb(212,95,11)" fg:x="32" fg:w="69"/><text x="3.9623%" y="1727.50">core::ops::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (69 samples, 8.00%)</title><rect x="3.7123%" y="1701" width="8.0046%" height="15" fill="rgb(240,179,47)" fg:x="32" fg:w="69"/><text x="3.9623%" y="1711.50">std::thread..</text></g><g><title>std::sys::unix::thread::guard::current (10 samples, 1.16%)</title><rect x="10.5568%" y="1685" width="1.1601%" height="15" fill="rgb(240,163,11)" fg:x="91" fg:w="10"/><text x="10.8068%" y="1695.50"></text></g><g><title>pthread_getattr_np (9 samples, 1.04%)</title><rect x="10.6729%" y="1669" width="1.0441%" height="15" fill="rgb(236,37,12)" fg:x="92" fg:w="9"/><text x="10.9229%" y="1679.50"></text></g><g><title>__pthread_getaffinity_new (2 samples, 0.23%)</title><rect x="11.4849%" y="1653" width="0.2320%" height="15" fill="rgb(232,164,16)" fg:x="99" fg:w="2"/><text x="11.7349%" y="1663.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.4849%" y="1637" width="0.2320%" height="15" fill="rgb(244,205,15)" fg:x="99" fg:w="2"/><text x="11.7349%" y="1647.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.4849%" y="1621" width="0.2320%" height="15" fill="rgb(223,117,47)" fg:x="99" fg:w="2"/><text x="11.7349%" y="1631.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.4849%" y="1605" width="0.2320%" height="15" fill="rgb(244,107,35)" fg:x="99" fg:w="2"/><text x="11.7349%" y="1615.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.4849%" y="1589" width="0.2320%" height="15" fill="rgb(205,140,8)" fg:x="99" fg:w="2"/><text x="11.7349%" y="1599.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.4849%" y="1573" width="0.2320%" height="15" fill="rgb(228,84,46)" fg:x="99" fg:w="2"/><text x="11.7349%" y="1583.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="11.4849%" y="1557" width="0.2320%" height="15" fill="rgb(254,188,9)" fg:x="99" fg:w="2"/><text x="11.7349%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.6009%" y="1541" width="0.1160%" height="15" fill="rgb(206,112,54)" fg:x="100" fg:w="1"/><text x="11.8509%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.6009%" y="1525" width="0.1160%" height="15" fill="rgb(216,84,49)" fg:x="100" fg:w="1"/><text x="11.8509%" y="1535.50"></text></g><g><title>__sigaltstack (1 samples, 0.12%)</title><rect x="11.7169%" y="1717" width="0.1160%" height="15" fill="rgb(214,194,35)" fg:x="101" fg:w="1"/><text x="11.9669%" y="1727.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.7169%" y="1701" width="0.1160%" height="15" fill="rgb(249,28,3)" fg:x="101" fg:w="1"/><text x="11.9669%" y="1711.50"></text></g><g><title>async-std/runti (93 samples, 10.79%)</title><rect x="1.1601%" y="1813" width="10.7889%" height="15" fill="rgb(222,56,52)" fg:x="10" fg:w="93"/><text x="1.4101%" y="1823.50">async-std/runti</text></g><g><title>__GI___clone (85 samples, 9.86%)</title><rect x="2.0882%" y="1797" width="9.8608%" height="15" fill="rgb(245,217,50)" fg:x="18" fg:w="85"/><text x="2.3382%" y="1807.50">__GI___clone</text></g><g><title>start_thread (71 samples, 8.24%)</title><rect x="3.7123%" y="1781" width="8.2367%" height="15" fill="rgb(213,201,24)" fg:x="32" fg:w="71"/><text x="3.9623%" y="1791.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (71 samples, 8.24%)</title><rect x="3.7123%" y="1765" width="8.2367%" height="15" fill="rgb(248,116,28)" fg:x="32" fg:w="71"/><text x="3.9623%" y="1775.50">std::sys::u..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 0.23%)</title><rect x="11.7169%" y="1749" width="0.2320%" height="15" fill="rgb(219,72,43)" fg:x="101" fg:w="2"/><text x="11.9669%" y="1759.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 0.23%)</title><rect x="11.7169%" y="1733" width="0.2320%" height="15" fill="rgb(209,138,14)" fg:x="101" fg:w="2"/><text x="11.9669%" y="1743.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.12%)</title><rect x="11.8329%" y="1717" width="0.1160%" height="15" fill="rgb(222,18,33)" fg:x="102" fg:w="1"/><text x="12.0829%" y="1727.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.12%)</title><rect x="11.8329%" y="1701" width="0.1160%" height="15" fill="rgb(213,199,7)" fg:x="102" fg:w="1"/><text x="12.0829%" y="1711.50"></text></g><g><title>__sigaltstack (1 samples, 0.12%)</title><rect x="11.8329%" y="1685" width="0.1160%" height="15" fill="rgb(250,110,10)" fg:x="102" fg:w="1"/><text x="12.0829%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="11.8329%" y="1669" width="0.1160%" height="15" fill="rgb(248,123,6)" fg:x="102" fg:w="1"/><text x="12.0829%" y="1679.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1781" width="0.8121%" height="15" fill="rgb(206,91,31)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1791.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1765" width="0.8121%" height="15" fill="rgb(211,154,13)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1775.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1749" width="0.8121%" height="15" fill="rgb(225,148,7)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1759.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1733" width="0.8121%" height="15" fill="rgb(220,160,43)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1743.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1717" width="0.8121%" height="15" fill="rgb(213,52,39)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1727.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1701" width="0.8121%" height="15" fill="rgb(243,137,7)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1711.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1685" width="0.8121%" height="15" fill="rgb(230,79,13)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1695.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="11.9490%" y="1669" width="0.8121%" height="15" fill="rgb(247,105,23)" fg:x="103" fg:w="7"/><text x="12.1990%" y="1679.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.12%)</title><rect x="12.7610%" y="1765" width="0.1160%" height="15" fill="rgb(223,179,41)" fg:x="110" fg:w="1"/><text x="13.0110%" y="1775.50"></text></g><g><title>__GI___nss_database_lookup2 (1 samples, 0.12%)</title><rect x="12.8770%" y="1285" width="0.1160%" height="15" fill="rgb(218,9,34)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1295.50"></text></g><g><title>_IO_getdelim (1 samples, 0.12%)</title><rect x="12.8770%" y="1269" width="0.1160%" height="15" fill="rgb(222,106,8)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1279.50"></text></g><g><title>__GI__IO_file_underflow (1 samples, 0.12%)</title><rect x="12.8770%" y="1253" width="0.1160%" height="15" fill="rgb(211,220,0)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1263.50"></text></g><g><title>__GI__IO_doallocbuf (1 samples, 0.12%)</title><rect x="12.8770%" y="1237" width="0.1160%" height="15" fill="rgb(229,52,16)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1247.50"></text></g><g><title>__GI__IO_file_doallocate (1 samples, 0.12%)</title><rect x="12.8770%" y="1221" width="0.1160%" height="15" fill="rgb(212,155,18)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1231.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="12.8770%" y="1205" width="0.1160%" height="15" fill="rgb(242,21,14)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1215.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="12.8770%" y="1189" width="0.1160%" height="15" fill="rgb(222,19,48)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1173" width="0.1160%" height="15" fill="rgb(232,45,27)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1157" width="0.1160%" height="15" fill="rgb(249,103,42)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1141" width="0.1160%" height="15" fill="rgb(246,81,33)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1125" width="0.1160%" height="15" fill="rgb(252,33,42)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1109" width="0.1160%" height="15" fill="rgb(209,212,41)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1093" width="0.1160%" height="15" fill="rgb(207,154,6)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1077" width="0.1160%" height="15" fill="rgb(223,64,47)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="12.8770%" y="1061" width="0.1160%" height="15" fill="rgb(211,161,38)" fg:x="111" fg:w="1"/><text x="13.1270%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.23%)</title><rect x="12.8770%" y="1685" width="0.2320%" height="15" fill="rgb(219,138,40)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1695.50"></text></g><g><title>std::panicking::try (2 samples, 0.23%)</title><rect x="12.8770%" y="1669" width="0.2320%" height="15" fill="rgb(241,228,46)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1679.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.23%)</title><rect x="12.8770%" y="1653" width="0.2320%" height="15" fill="rgb(223,209,38)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1663.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.23%)</title><rect x="12.8770%" y="1637" width="0.2320%" height="15" fill="rgb(236,164,45)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1647.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="12.8770%" y="1621" width="0.2320%" height="15" fill="rgb(231,15,5)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1631.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.23%)</title><rect x="12.8770%" y="1605" width="0.2320%" height="15" fill="rgb(252,35,15)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1615.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (2 samples, 0.23%)</title><rect x="12.8770%" y="1589" width="0.2320%" height="15" fill="rgb(248,181,18)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1599.50"></text></g><g><title>blocking::Executor::main_loop (2 samples, 0.23%)</title><rect x="12.8770%" y="1573" width="0.2320%" height="15" fill="rgb(233,39,42)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1583.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.23%)</title><rect x="12.8770%" y="1557" width="0.2320%" height="15" fill="rgb(238,110,33)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1567.50"></text></g><g><title>std::panicking::try (2 samples, 0.23%)</title><rect x="12.8770%" y="1541" width="0.2320%" height="15" fill="rgb(233,195,10)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1551.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.23%)</title><rect x="12.8770%" y="1525" width="0.2320%" height="15" fill="rgb(254,105,3)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1535.50"></text></g><g><title>blocking::Executor::main_loop::{{closure}} (2 samples, 0.23%)</title><rect x="12.8770%" y="1509" width="0.2320%" height="15" fill="rgb(221,225,9)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1519.50"></text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::run (2 samples, 0.23%)</title><rect x="12.8770%" y="1493" width="0.2320%" height="15" fill="rgb(224,227,45)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1503.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::run (2 samples, 0.23%)</title><rect x="12.8770%" y="1477" width="0.2320%" height="15" fill="rgb(229,198,43)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1487.50"></text></g><g><title>blocking::unblock::{{closure}} (2 samples, 0.23%)</title><rect x="12.8770%" y="1461" width="0.2320%" height="15" fill="rgb(206,209,35)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1471.50"></text></g><g><title>&lt;str as async_std::net::addr::ToSocketAddrs&gt;::to_socket_addrs::{{closure}} (2 samples, 0.23%)</title><rect x="12.8770%" y="1445" width="0.2320%" height="15" fill="rgb(245,195,53)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1455.50"></text></g><g><title>&lt;str as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (2 samples, 0.23%)</title><rect x="12.8770%" y="1429" width="0.2320%" height="15" fill="rgb(240,92,26)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1439.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.23%)</title><rect x="12.8770%" y="1413" width="0.2320%" height="15" fill="rgb(207,40,23)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1423.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (2 samples, 0.23%)</title><rect x="12.8770%" y="1397" width="0.2320%" height="15" fill="rgb(223,111,35)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1407.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.23%)</title><rect x="12.8770%" y="1381" width="0.2320%" height="15" fill="rgb(229,147,28)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1391.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (2 samples, 0.23%)</title><rect x="12.8770%" y="1365" width="0.2320%" height="15" fill="rgb(211,29,28)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1375.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.23%)</title><rect x="12.8770%" y="1349" width="0.2320%" height="15" fill="rgb(228,72,33)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1359.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (2 samples, 0.23%)</title><rect x="12.8770%" y="1333" width="0.2320%" height="15" fill="rgb(205,214,31)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1343.50"></text></g><g><title>__GI_getaddrinfo (2 samples, 0.23%)</title><rect x="12.8770%" y="1317" width="0.2320%" height="15" fill="rgb(224,111,15)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1327.50"></text></g><g><title>gaih_inet.constprop.0 (2 samples, 0.23%)</title><rect x="12.8770%" y="1301" width="0.2320%" height="15" fill="rgb(253,21,26)" fg:x="111" fg:w="2"/><text x="13.1270%" y="1311.50"></text></g><g><title>__GI___nss_lookup_function (1 samples, 0.12%)</title><rect x="12.9930%" y="1285" width="0.1160%" height="15" fill="rgb(245,139,43)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1295.50"></text></g><g><title>nss_load_library (1 samples, 0.12%)</title><rect x="12.9930%" y="1269" width="0.1160%" height="15" fill="rgb(252,170,7)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1279.50"></text></g><g><title>__GI___libc_dlopen_mode (1 samples, 0.12%)</title><rect x="12.9930%" y="1253" width="0.1160%" height="15" fill="rgb(231,118,14)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1263.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.12%)</title><rect x="12.9930%" y="1237" width="0.1160%" height="15" fill="rgb(238,83,0)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1247.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.12%)</title><rect x="12.9930%" y="1221" width="0.1160%" height="15" fill="rgb(221,39,39)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1231.50"></text></g><g><title>do_dlopen (1 samples, 0.12%)</title><rect x="12.9930%" y="1205" width="0.1160%" height="15" fill="rgb(222,119,46)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1215.50"></text></g><g><title>_dl_open (1 samples, 0.12%)</title><rect x="12.9930%" y="1189" width="0.1160%" height="15" fill="rgb(222,165,49)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1199.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.12%)</title><rect x="12.9930%" y="1173" width="0.1160%" height="15" fill="rgb(219,113,52)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1183.50"></text></g><g><title>dl_open_worker (1 samples, 0.12%)</title><rect x="12.9930%" y="1157" width="0.1160%" height="15" fill="rgb(214,7,15)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1167.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.12%)</title><rect x="12.9930%" y="1141" width="0.1160%" height="15" fill="rgb(235,32,4)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1151.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.12%)</title><rect x="12.9930%" y="1125" width="0.1160%" height="15" fill="rgb(238,90,54)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1135.50"></text></g><g><title>openaux (1 samples, 0.12%)</title><rect x="12.9930%" y="1109" width="0.1160%" height="15" fill="rgb(213,208,19)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1119.50"></text></g><g><title>_dl_map_object (1 samples, 0.12%)</title><rect x="12.9930%" y="1093" width="0.1160%" height="15" fill="rgb(233,156,4)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1103.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.12%)</title><rect x="12.9930%" y="1077" width="0.1160%" height="15" fill="rgb(207,194,5)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1087.50"></text></g><g><title>strcmp (1 samples, 0.12%)</title><rect x="12.9930%" y="1061" width="0.1160%" height="15" fill="rgb(206,111,30)" fg:x="112" fg:w="1"/><text x="13.2430%" y="1071.50"></text></g><g><title>blocking-1 (11 samples, 1.28%)</title><rect x="11.9490%" y="1813" width="1.2761%" height="15" fill="rgb(243,70,54)" fg:x="103" fg:w="11"/><text x="12.1990%" y="1823.50"></text></g><g><title>__GI___clone (11 samples, 1.28%)</title><rect x="11.9490%" y="1797" width="1.2761%" height="15" fill="rgb(242,28,8)" fg:x="103" fg:w="11"/><text x="12.1990%" y="1807.50"></text></g><g><title>start_thread (4 samples, 0.46%)</title><rect x="12.7610%" y="1781" width="0.4640%" height="15" fill="rgb(219,106,18)" fg:x="110" fg:w="4"/><text x="13.0110%" y="1791.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 0.35%)</title><rect x="12.8770%" y="1765" width="0.3480%" height="15" fill="rgb(244,222,10)" fg:x="111" fg:w="3"/><text x="13.1270%" y="1775.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.35%)</title><rect x="12.8770%" y="1749" width="0.3480%" height="15" fill="rgb(236,179,52)" fg:x="111" fg:w="3"/><text x="13.1270%" y="1759.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3 samples, 0.35%)</title><rect x="12.8770%" y="1733" width="0.3480%" height="15" fill="rgb(213,23,39)" fg:x="111" fg:w="3"/><text x="13.1270%" y="1743.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (3 samples, 0.35%)</title><rect x="12.8770%" y="1717" width="0.3480%" height="15" fill="rgb(238,48,10)" fg:x="111" fg:w="3"/><text x="13.1270%" y="1727.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (3 samples, 0.35%)</title><rect x="12.8770%" y="1701" width="0.3480%" height="15" fill="rgb(251,196,23)" fg:x="111" fg:w="3"/><text x="13.1270%" y="1711.50"></text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.12%)</title><rect x="13.1090%" y="1685" width="0.1160%" height="15" fill="rgb(250,152,24)" fg:x="113" fg:w="1"/><text x="13.3590%" y="1695.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.12%)</title><rect x="13.1090%" y="1669" width="0.1160%" height="15" fill="rgb(209,150,17)" fg:x="113" fg:w="1"/><text x="13.3590%" y="1679.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="13.1090%" y="1653" width="0.1160%" height="15" fill="rgb(234,202,34)" fg:x="113" fg:w="1"/><text x="13.3590%" y="1663.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.12%)</title><rect x="13.1090%" y="1637" width="0.1160%" height="15" fill="rgb(253,148,53)" fg:x="113" fg:w="1"/><text x="13.3590%" y="1647.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.12%)</title><rect x="13.1090%" y="1621" width="0.1160%" height="15" fill="rgb(218,129,16)" fg:x="113" fg:w="1"/><text x="13.3590%" y="1631.50"></text></g><g><title>new_heap (1 samples, 0.12%)</title><rect x="13.1090%" y="1605" width="0.1160%" height="15" fill="rgb(216,85,19)" fg:x="113" fg:w="1"/><text x="13.3590%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="13.1090%" y="1589" width="0.1160%" height="15" fill="rgb(235,228,7)" fg:x="113" fg:w="1"/><text x="13.3590%" y="1599.50"></text></g><g><title>__GI___poll (15 samples, 1.74%)</title><rect x="13.2251%" y="1189" width="1.7401%" height="15" fill="rgb(245,175,0)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1199.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1173" width="1.7401%" height="15" fill="rgb(208,168,36)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1183.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1157" width="1.7401%" height="15" fill="rgb(246,171,24)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1167.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1141" width="1.7401%" height="15" fill="rgb(215,142,24)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1151.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1125" width="1.7401%" height="15" fill="rgb(250,187,7)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1135.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1109" width="1.7401%" height="15" fill="rgb(228,66,33)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1119.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1093" width="1.7401%" height="15" fill="rgb(234,215,21)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1103.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1077" width="1.7401%" height="15" fill="rgb(222,191,20)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1087.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1061" width="1.7401%" height="15" fill="rgb(245,79,54)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1071.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1045" width="1.7401%" height="15" fill="rgb(240,10,37)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1055.50"></text></g><g><title>[unknown] (15 samples, 1.74%)</title><rect x="13.2251%" y="1029" width="1.7401%" height="15" fill="rgb(214,192,32)" fg:x="114" fg:w="15"/><text x="13.4751%" y="1039.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="13.3411%" y="1013" width="1.6241%" height="15" fill="rgb(209,36,54)" fg:x="115" fg:w="14"/><text x="13.5911%" y="1023.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="13.3411%" y="997" width="1.6241%" height="15" fill="rgb(220,10,11)" fg:x="115" fg:w="14"/><text x="13.5911%" y="1007.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="13.3411%" y="981" width="1.6241%" height="15" fill="rgb(221,106,17)" fg:x="115" fg:w="14"/><text x="13.5911%" y="991.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="13.3411%" y="965" width="1.6241%" height="15" fill="rgb(251,142,44)" fg:x="115" fg:w="14"/><text x="13.5911%" y="975.50"></text></g><g><title>[unknown] (14 samples, 1.62%)</title><rect x="13.3411%" y="949" width="1.6241%" height="15" fill="rgb(238,13,15)" fg:x="115" fg:w="14"/><text x="13.5911%" y="959.50"></text></g><g><title>std::panic::catch_unwind (16 samples, 1.86%)</title><rect x="13.2251%" y="1685" width="1.8561%" height="15" fill="rgb(208,107,27)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1695.50">s..</text></g><g><title>std::panicking::try (16 samples, 1.86%)</title><rect x="13.2251%" y="1669" width="1.8561%" height="15" fill="rgb(205,136,37)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1679.50">s..</text></g><g><title>std::panicking::try::do_call (16 samples, 1.86%)</title><rect x="13.2251%" y="1653" width="1.8561%" height="15" fill="rgb(250,205,27)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1663.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (16 samples, 1.86%)</title><rect x="13.2251%" y="1637" width="1.8561%" height="15" fill="rgb(210,80,43)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1647.50">&lt;..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (16 samples, 1.86%)</title><rect x="13.2251%" y="1621" width="1.8561%" height="15" fill="rgb(247,160,36)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1631.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16 samples, 1.86%)</title><rect x="13.2251%" y="1605" width="1.8561%" height="15" fill="rgb(234,13,49)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1615.50">s..</text></g><g><title>blocking::Executor::grow_pool::{{closure}} (16 samples, 1.86%)</title><rect x="13.2251%" y="1589" width="1.8561%" height="15" fill="rgb(234,122,0)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1599.50">b..</text></g><g><title>blocking::Executor::main_loop (16 samples, 1.86%)</title><rect x="13.2251%" y="1573" width="1.8561%" height="15" fill="rgb(207,146,38)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1583.50">b..</text></g><g><title>std::panic::catch_unwind (16 samples, 1.86%)</title><rect x="13.2251%" y="1557" width="1.8561%" height="15" fill="rgb(207,177,25)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1567.50">s..</text></g><g><title>std::panicking::try (16 samples, 1.86%)</title><rect x="13.2251%" y="1541" width="1.8561%" height="15" fill="rgb(211,178,42)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1551.50">s..</text></g><g><title>std::panicking::try::do_call (16 samples, 1.86%)</title><rect x="13.2251%" y="1525" width="1.8561%" height="15" fill="rgb(230,69,54)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1535.50">s..</text></g><g><title>blocking::Executor::main_loop::{{closure}} (16 samples, 1.86%)</title><rect x="13.2251%" y="1509" width="1.8561%" height="15" fill="rgb(214,135,41)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1519.50">b..</text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::run (16 samples, 1.86%)</title><rect x="13.2251%" y="1493" width="1.8561%" height="15" fill="rgb(237,67,25)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1503.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::run (16 samples, 1.86%)</title><rect x="13.2251%" y="1477" width="1.8561%" height="15" fill="rgb(222,189,50)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1487.50">a..</text></g><g><title>blocking::unblock::{{closure}} (16 samples, 1.86%)</title><rect x="13.2251%" y="1461" width="1.8561%" height="15" fill="rgb(245,148,34)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1471.50">b..</text></g><g><title>&lt;str as async_std::net::addr::ToSocketAddrs&gt;::to_socket_addrs::{{closure}} (16 samples, 1.86%)</title><rect x="13.2251%" y="1445" width="1.8561%" height="15" fill="rgb(222,29,6)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1455.50">&lt;..</text></g><g><title>&lt;str as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (16 samples, 1.86%)</title><rect x="13.2251%" y="1429" width="1.8561%" height="15" fill="rgb(221,189,43)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1439.50">&lt;..</text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (16 samples, 1.86%)</title><rect x="13.2251%" y="1413" width="1.8561%" height="15" fill="rgb(207,36,27)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1423.50">&lt;..</text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (16 samples, 1.86%)</title><rect x="13.2251%" y="1397" width="1.8561%" height="15" fill="rgb(217,90,24)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1407.50">&lt;..</text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (16 samples, 1.86%)</title><rect x="13.2251%" y="1381" width="1.8561%" height="15" fill="rgb(224,66,35)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1391.50">&lt;..</text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (16 samples, 1.86%)</title><rect x="13.2251%" y="1365" width="1.8561%" height="15" fill="rgb(221,13,50)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1375.50">&lt;..</text></g><g><title>std::sys::common::small_c_string::run_with_cstr (16 samples, 1.86%)</title><rect x="13.2251%" y="1349" width="1.8561%" height="15" fill="rgb(236,68,49)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1359.50">s..</text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::{{closure}} (16 samples, 1.86%)</title><rect x="13.2251%" y="1333" width="1.8561%" height="15" fill="rgb(229,146,28)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1343.50">&lt;..</text></g><g><title>__GI_getaddrinfo (16 samples, 1.86%)</title><rect x="13.2251%" y="1317" width="1.8561%" height="15" fill="rgb(225,31,38)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1327.50">_..</text></g><g><title>gaih_inet.constprop.0 (16 samples, 1.86%)</title><rect x="13.2251%" y="1301" width="1.8561%" height="15" fill="rgb(250,208,3)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1311.50">g..</text></g><g><title>_nss_dns_gethostbyname4_r (16 samples, 1.86%)</title><rect x="13.2251%" y="1285" width="1.8561%" height="15" fill="rgb(246,54,23)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1295.50">_..</text></g><g><title>__GI___res_context_search (16 samples, 1.86%)</title><rect x="13.2251%" y="1269" width="1.8561%" height="15" fill="rgb(243,76,11)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1279.50">_..</text></g><g><title>__res_context_querydomain (16 samples, 1.86%)</title><rect x="13.2251%" y="1253" width="1.8561%" height="15" fill="rgb(245,21,50)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1263.50">_..</text></g><g><title>__GI___res_context_query (16 samples, 1.86%)</title><rect x="13.2251%" y="1237" width="1.8561%" height="15" fill="rgb(228,9,43)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1247.50">_..</text></g><g><title>__res_context_send (16 samples, 1.86%)</title><rect x="13.2251%" y="1221" width="1.8561%" height="15" fill="rgb(208,100,47)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1231.50">_..</text></g><g><title>send_dg (16 samples, 1.86%)</title><rect x="13.2251%" y="1205" width="1.8561%" height="15" fill="rgb(232,26,8)" fg:x="114" fg:w="16"/><text x="13.4751%" y="1215.50">s..</text></g><g><title>__GI___res_queriesmatch (1 samples, 0.12%)</title><rect x="14.9652%" y="1189" width="0.1160%" height="15" fill="rgb(216,166,38)" fg:x="129" fg:w="1"/><text x="15.2152%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="14.9652%" y="1173" width="0.1160%" height="15" fill="rgb(251,202,51)" fg:x="129" fg:w="1"/><text x="15.2152%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="14.9652%" y="1157" width="0.1160%" height="15" fill="rgb(254,216,34)" fg:x="129" fg:w="1"/><text x="15.2152%" y="1167.50"></text></g><g><title>blocking-2 (17 samples, 1.97%)</title><rect x="13.2251%" y="1813" width="1.9722%" height="15" fill="rgb(251,32,27)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1823.50">b..</text></g><g><title>__GI___clone (17 samples, 1.97%)</title><rect x="13.2251%" y="1797" width="1.9722%" height="15" fill="rgb(208,127,28)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1807.50">_..</text></g><g><title>start_thread (17 samples, 1.97%)</title><rect x="13.2251%" y="1781" width="1.9722%" height="15" fill="rgb(224,137,22)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1791.50">s..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (17 samples, 1.97%)</title><rect x="13.2251%" y="1765" width="1.9722%" height="15" fill="rgb(254,70,32)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1775.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (17 samples, 1.97%)</title><rect x="13.2251%" y="1749" width="1.9722%" height="15" fill="rgb(229,75,37)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1759.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (17 samples, 1.97%)</title><rect x="13.2251%" y="1733" width="1.9722%" height="15" fill="rgb(252,64,23)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1743.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (17 samples, 1.97%)</title><rect x="13.2251%" y="1717" width="1.9722%" height="15" fill="rgb(232,162,48)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1727.50">c..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (17 samples, 1.97%)</title><rect x="13.2251%" y="1701" width="1.9722%" height="15" fill="rgb(246,160,12)" fg:x="114" fg:w="17"/><text x="13.4751%" y="1711.50">s..</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.12%)</title><rect x="15.0812%" y="1685" width="0.1160%" height="15" fill="rgb(247,166,0)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1695.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.12%)</title><rect x="15.0812%" y="1669" width="0.1160%" height="15" fill="rgb(249,219,21)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1679.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="15.0812%" y="1653" width="0.1160%" height="15" fill="rgb(205,209,3)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1663.50"></text></g><g><title>tcache_init.part.0 (1 samples, 0.12%)</title><rect x="15.0812%" y="1637" width="0.1160%" height="15" fill="rgb(243,44,1)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1647.50"></text></g><g><title>arena_get2.part.0 (1 samples, 0.12%)</title><rect x="15.0812%" y="1621" width="0.1160%" height="15" fill="rgb(206,159,16)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1631.50"></text></g><g><title>new_heap (1 samples, 0.12%)</title><rect x="15.0812%" y="1605" width="0.1160%" height="15" fill="rgb(244,77,30)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="15.0812%" y="1589" width="0.1160%" height="15" fill="rgb(218,69,12)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1599.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="15.0812%" y="1573" width="0.1160%" height="15" fill="rgb(212,87,7)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="15.0812%" y="1557" width="0.1160%" height="15" fill="rgb(245,114,25)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="15.0812%" y="1541" width="0.1160%" height="15" fill="rgb(210,61,42)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="15.0812%" y="1525" width="0.1160%" height="15" fill="rgb(211,52,33)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="15.0812%" y="1509" width="0.1160%" height="15" fill="rgb(234,58,33)" fg:x="130" fg:w="1"/><text x="15.3312%" y="1519.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="15.1972%" y="1797" width="0.1160%" height="15" fill="rgb(220,115,36)" fg:x="131" fg:w="1"/><text x="15.4472%" y="1807.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1 samples, 0.12%)</title><rect x="15.3132%" y="1781" width="0.1160%" height="15" fill="rgb(243,153,54)" fg:x="132" fg:w="1"/><text x="15.5632%" y="1791.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.46%)</title><rect x="15.4292%" y="1781" width="0.4640%" height="15" fill="rgb(251,47,18)" fg:x="133" fg:w="4"/><text x="15.6792%" y="1791.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="15.7773%" y="1765" width="0.1160%" height="15" fill="rgb(242,102,42)" fg:x="136" fg:w="1"/><text x="16.0273%" y="1775.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="15.7773%" y="1749" width="0.1160%" height="15" fill="rgb(234,31,38)" fg:x="136" fg:w="1"/><text x="16.0273%" y="1759.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="15.8933%" y="1781" width="0.1160%" height="15" fill="rgb(221,117,51)" fg:x="137" fg:w="1"/><text x="16.1433%" y="1791.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="16.0093%" y="1781" width="0.1160%" height="15" fill="rgb(212,20,18)" fg:x="138" fg:w="1"/><text x="16.2593%" y="1791.50"></text></g><g><title>[[heap]] (9 samples, 1.04%)</title><rect x="15.3132%" y="1797" width="1.0441%" height="15" fill="rgb(245,133,36)" fg:x="132" fg:w="9"/><text x="15.5632%" y="1807.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (2 samples, 0.23%)</title><rect x="16.1253%" y="1781" width="0.2320%" height="15" fill="rgb(212,6,19)" fg:x="139" fg:w="2"/><text x="16.3753%" y="1791.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (1 samples, 0.12%)</title><rect x="16.2413%" y="1765" width="0.1160%" height="15" fill="rgb(218,1,36)" fg:x="140" fg:w="1"/><text x="16.4913%" y="1775.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.12%)</title><rect x="16.2413%" y="1749" width="0.1160%" height="15" fill="rgb(246,84,54)" fg:x="140" fg:w="1"/><text x="16.4913%" y="1759.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="16.2413%" y="1733" width="0.1160%" height="15" fill="rgb(242,110,6)" fg:x="140" fg:w="1"/><text x="16.4913%" y="1743.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4 samples, 0.46%)</title><rect x="16.3573%" y="1781" width="0.4640%" height="15" fill="rgb(214,47,5)" fg:x="141" fg:w="4"/><text x="16.6073%" y="1791.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="16.8213%" y="1781" width="0.1160%" height="15" fill="rgb(218,159,25)" fg:x="145" fg:w="1"/><text x="17.0713%" y="1791.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="16.8213%" y="1765" width="0.1160%" height="15" fill="rgb(215,211,28)" fg:x="145" fg:w="1"/><text x="17.0713%" y="1775.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_in (5 samples, 0.58%)</title><rect x="16.9374%" y="1781" width="0.5800%" height="15" fill="rgb(238,59,32)" fg:x="146" fg:w="5"/><text x="17.1874%" y="1791.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_out (1 samples, 0.12%)</title><rect x="17.5174%" y="1781" width="0.1160%" height="15" fill="rgb(226,82,3)" fg:x="151" fg:w="1"/><text x="17.7674%" y="1791.50"></text></g><g><title>&lt;flate2::mem::FlushCompress as flate2::zio::Flush&gt;::none (1 samples, 0.12%)</title><rect x="17.6334%" y="1781" width="0.1160%" height="15" fill="rgb(240,164,32)" fg:x="152" fg:w="1"/><text x="17.8834%" y="1791.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.58%)</title><rect x="17.7494%" y="1781" width="0.5800%" height="15" fill="rgb(232,46,7)" fg:x="153" fg:w="5"/><text x="17.9994%" y="1791.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="18.3295%" y="1781" width="0.1160%" height="15" fill="rgb(229,129,53)" fg:x="158" fg:w="1"/><text x="18.5795%" y="1791.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.12%)</title><rect x="18.4455%" y="1781" width="0.1160%" height="15" fill="rgb(234,188,29)" fg:x="159" fg:w="1"/><text x="18.6955%" y="1791.50"></text></g><g><title>crc32fast::Hasher::update (2 samples, 0.23%)</title><rect x="18.5615%" y="1781" width="0.2320%" height="15" fill="rgb(246,141,4)" fg:x="160" fg:w="2"/><text x="18.8115%" y="1791.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (4 samples, 0.46%)</title><rect x="18.7935%" y="1781" width="0.4640%" height="15" fill="rgb(229,23,39)" fg:x="162" fg:w="4"/><text x="19.0435%" y="1791.50"></text></g><g><title>flate2::zio::read (19 samples, 2.20%)</title><rect x="19.2575%" y="1781" width="2.2042%" height="15" fill="rgb(206,12,3)" fg:x="166" fg:w="19"/><text x="19.5075%" y="1791.50">f..</text></g><g><title>[[stack]] (45 samples, 5.22%)</title><rect x="16.3573%" y="1797" width="5.2204%" height="15" fill="rgb(252,226,20)" fg:x="141" fg:w="45"/><text x="16.6073%" y="1807.50">[[stac..</text></g><g><title>miniz_oxide::inflate::stream::inflate (1 samples, 0.12%)</title><rect x="21.4617%" y="1781" width="0.1160%" height="15" fill="rgb(216,123,35)" fg:x="185" fg:w="1"/><text x="21.7117%" y="1791.50"></text></g><g><title>[anon] (2 samples, 0.23%)</title><rect x="21.5777%" y="1797" width="0.2320%" height="15" fill="rgb(212,68,40)" fg:x="186" fg:w="2"/><text x="21.8277%" y="1807.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.23%)</title><rect x="21.5777%" y="1781" width="0.2320%" height="15" fill="rgb(254,125,32)" fg:x="186" fg:w="2"/><text x="21.8277%" y="1791.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (4 samples, 0.46%)</title><rect x="22.5058%" y="1781" width="0.4640%" height="15" fill="rgb(253,97,22)" fg:x="194" fg:w="4"/><text x="22.7558%" y="1791.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.70%)</title><rect x="22.9698%" y="1781" width="0.6961%" height="15" fill="rgb(241,101,14)" fg:x="198" fg:w="6"/><text x="23.2198%" y="1791.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.23%)</title><rect x="23.4339%" y="1765" width="0.2320%" height="15" fill="rgb(238,103,29)" fg:x="202" fg:w="2"/><text x="23.6839%" y="1775.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="23.6659%" y="1781" width="0.1160%" height="15" fill="rgb(233,195,47)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1791.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="23.6659%" y="1765" width="0.1160%" height="15" fill="rgb(246,218,30)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1775.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1 samples, 0.12%)</title><rect x="23.6659%" y="1749" width="0.1160%" height="15" fill="rgb(219,145,47)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1759.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.12%)</title><rect x="23.6659%" y="1733" width="0.1160%" height="15" fill="rgb(243,12,26)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1743.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.12%)</title><rect x="23.6659%" y="1717" width="0.1160%" height="15" fill="rgb(214,87,16)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1727.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1 samples, 0.12%)</title><rect x="23.6659%" y="1701" width="0.1160%" height="15" fill="rgb(208,99,42)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1711.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1 samples, 0.12%)</title><rect x="23.6659%" y="1685" width="0.1160%" height="15" fill="rgb(253,99,2)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1695.50"></text></g><g><title>cve_ingest_rust::main::{{closure}} (1 samples, 0.12%)</title><rect x="23.6659%" y="1669" width="0.1160%" height="15" fill="rgb(220,168,23)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1679.50"></text></g><g><title>cve_ingest_rust::main::main::{{closure}} (1 samples, 0.12%)</title><rect x="23.6659%" y="1653" width="0.1160%" height="15" fill="rgb(242,38,24)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1663.50"></text></g><g><title>cve_ingest_rust::update_cpes::{{closure}} (1 samples, 0.12%)</title><rect x="23.6659%" y="1637" width="0.1160%" height="15" fill="rgb(225,182,9)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1647.50"></text></g><g><title>cve_ingest_rust::prepare_bulk_operation (1 samples, 0.12%)</title><rect x="23.6659%" y="1621" width="0.1160%" height="15" fill="rgb(243,178,37)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1631.50"></text></g><g><title>bson::ser::to_document (1 samples, 0.12%)</title><rect x="23.6659%" y="1605" width="0.1160%" height="15" fill="rgb(232,139,19)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1615.50"></text></g><g><title>bson::ser::to_document_with_options (1 samples, 0.12%)</title><rect x="23.6659%" y="1589" width="0.1160%" height="15" fill="rgb(225,201,24)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1599.50"></text></g><g><title>bson::ser::to_bson_with_options (1 samples, 0.12%)</title><rect x="23.6659%" y="1573" width="0.1160%" height="15" fill="rgb(221,47,46)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1583.50"></text></g><g><title>cve_ingest_rust::_::&lt;impl serde::ser::Serialize for cve_ingest_rust::CPE&gt;::serialize (1 samples, 0.12%)</title><rect x="23.6659%" y="1557" width="0.1160%" height="15" fill="rgb(249,23,13)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1567.50"></text></g><g><title>&lt;bson::ser::serde::StructSerializer as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.12%)</title><rect x="23.6659%" y="1541" width="0.1160%" height="15" fill="rgb(219,9,5)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1551.50"></text></g><g><title>bson::ser::to_bson_with_options (1 samples, 0.12%)</title><rect x="23.6659%" y="1525" width="0.1160%" height="15" fill="rgb(254,171,16)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1535.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.12%)</title><rect x="23.6659%" y="1509" width="0.1160%" height="15" fill="rgb(230,171,20)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1519.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.12%)</title><rect x="23.6659%" y="1493" width="0.1160%" height="15" fill="rgb(210,71,41)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1503.50"></text></g><g><title>&lt;bson::ser::serde::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.12%)</title><rect x="23.6659%" y="1477" width="0.1160%" height="15" fill="rgb(206,173,20)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1487.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.12%)</title><rect x="23.6659%" y="1461" width="0.1160%" height="15" fill="rgb(233,88,34)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="23.6659%" y="1445" width="0.1160%" height="15" fill="rgb(223,209,46)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="23.6659%" y="1429" width="0.1160%" height="15" fill="rgb(250,43,18)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="23.6659%" y="1413" width="0.1160%" height="15" fill="rgb(208,13,10)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="23.6659%" y="1397" width="0.1160%" height="15" fill="rgb(212,200,36)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1407.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="23.6659%" y="1381" width="0.1160%" height="15" fill="rgb(225,90,30)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1391.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="23.6659%" y="1365" width="0.1160%" height="15" fill="rgb(236,182,39)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1375.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="23.6659%" y="1349" width="0.1160%" height="15" fill="rgb(212,144,35)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1359.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="23.6659%" y="1333" width="0.1160%" height="15" fill="rgb(228,63,44)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1317" width="0.1160%" height="15" fill="rgb(228,109,6)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1301" width="0.1160%" height="15" fill="rgb(238,117,24)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1285" width="0.1160%" height="15" fill="rgb(242,26,26)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1269" width="0.1160%" height="15" fill="rgb(221,92,48)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1253" width="0.1160%" height="15" fill="rgb(209,209,32)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1237" width="0.1160%" height="15" fill="rgb(221,70,22)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1221" width="0.1160%" height="15" fill="rgb(248,145,5)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="23.6659%" y="1205" width="0.1160%" height="15" fill="rgb(226,116,26)" fg:x="204" fg:w="1"/><text x="23.9159%" y="1215.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.58%)</title><rect x="23.7819%" y="1781" width="0.5800%" height="15" fill="rgb(244,5,17)" fg:x="205" fg:w="5"/><text x="24.0319%" y="1791.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="24.3619%" y="1781" width="0.2320%" height="15" fill="rgb(252,159,33)" fg:x="210" fg:w="2"/><text x="24.6119%" y="1791.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="24.3619%" y="1765" width="0.2320%" height="15" fill="rgb(206,71,0)" fg:x="210" fg:w="2"/><text x="24.6119%" y="1775.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="24.3619%" y="1749" width="0.2320%" height="15" fill="rgb(233,118,54)" fg:x="210" fg:w="2"/><text x="24.6119%" y="1759.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="24.3619%" y="1733" width="0.2320%" height="15" fill="rgb(234,83,48)" fg:x="210" fg:w="2"/><text x="24.6119%" y="1743.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="24.3619%" y="1717" width="0.2320%" height="15" fill="rgb(228,3,54)" fg:x="210" fg:w="2"/><text x="24.6119%" y="1727.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="24.3619%" y="1701" width="0.2320%" height="15" fill="rgb(226,155,13)" fg:x="210" fg:w="2"/><text x="24.6119%" y="1711.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="24.3619%" y="1685" width="0.2320%" height="15" fill="rgb(241,28,37)" fg:x="210" fg:w="2"/><text x="24.6119%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="24.4780%" y="1669" width="0.1160%" height="15" fill="rgb(233,93,10)" fg:x="211" fg:w="1"/><text x="24.7280%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="24.4780%" y="1653" width="0.1160%" height="15" fill="rgb(225,113,19)" fg:x="211" fg:w="1"/><text x="24.7280%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="24.4780%" y="1637" width="0.1160%" height="15" fill="rgb(241,2,18)" fg:x="211" fg:w="1"/><text x="24.7280%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="24.4780%" y="1621" width="0.1160%" height="15" fill="rgb(228,207,21)" fg:x="211" fg:w="1"/><text x="24.7280%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="24.4780%" y="1605" width="0.1160%" height="15" fill="rgb(213,211,35)" fg:x="211" fg:w="1"/><text x="24.7280%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="24.4780%" y="1589" width="0.1160%" height="15" fill="rgb(209,83,10)" fg:x="211" fg:w="1"/><text x="24.7280%" y="1599.50"></text></g><g><title>__GI___clone (7 samples, 0.81%)</title><rect x="24.5940%" y="1781" width="0.8121%" height="15" fill="rgb(209,164,1)" fg:x="212" fg:w="7"/><text x="24.8440%" y="1791.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="24.5940%" y="1765" width="0.8121%" height="15" fill="rgb(213,184,43)" fg:x="212" fg:w="7"/><text x="24.8440%" y="1775.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="24.5940%" y="1749" width="0.8121%" height="15" fill="rgb(231,61,34)" fg:x="212" fg:w="7"/><text x="24.8440%" y="1759.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="24.5940%" y="1733" width="0.8121%" height="15" fill="rgb(235,75,3)" fg:x="212" fg:w="7"/><text x="24.8440%" y="1743.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="24.5940%" y="1717" width="0.8121%" height="15" fill="rgb(220,106,47)" fg:x="212" fg:w="7"/><text x="24.8440%" y="1727.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="24.5940%" y="1701" width="0.8121%" height="15" fill="rgb(210,196,33)" fg:x="212" fg:w="7"/><text x="24.8440%" y="1711.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="24.5940%" y="1685" width="0.8121%" height="15" fill="rgb(229,154,42)" fg:x="212" fg:w="7"/><text x="24.8440%" y="1695.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="24.7100%" y="1669" width="0.6961%" height="15" fill="rgb(228,114,26)" fg:x="213" fg:w="6"/><text x="24.9600%" y="1679.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="24.7100%" y="1653" width="0.6961%" height="15" fill="rgb(208,144,1)" fg:x="213" fg:w="6"/><text x="24.9600%" y="1663.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="24.7100%" y="1637" width="0.6961%" height="15" fill="rgb(239,112,37)" fg:x="213" fg:w="6"/><text x="24.9600%" y="1647.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="25.0580%" y="1621" width="0.3480%" height="15" fill="rgb(210,96,50)" fg:x="216" fg:w="3"/><text x="25.3080%" y="1631.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="25.0580%" y="1605" width="0.3480%" height="15" fill="rgb(222,178,2)" fg:x="216" fg:w="3"/><text x="25.3080%" y="1615.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="25.0580%" y="1589" width="0.3480%" height="15" fill="rgb(226,74,18)" fg:x="216" fg:w="3"/><text x="25.3080%" y="1599.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="25.0580%" y="1573" width="0.3480%" height="15" fill="rgb(225,67,54)" fg:x="216" fg:w="3"/><text x="25.3080%" y="1583.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="25.1740%" y="1557" width="0.2320%" height="15" fill="rgb(251,92,32)" fg:x="217" fg:w="2"/><text x="25.4240%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.2900%" y="1541" width="0.1160%" height="15" fill="rgb(228,149,22)" fg:x="218" fg:w="1"/><text x="25.5400%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.2900%" y="1525" width="0.1160%" height="15" fill="rgb(243,54,13)" fg:x="218" fg:w="1"/><text x="25.5400%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.2900%" y="1509" width="0.1160%" height="15" fill="rgb(243,180,28)" fg:x="218" fg:w="1"/><text x="25.5400%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.2900%" y="1493" width="0.1160%" height="15" fill="rgb(208,167,24)" fg:x="218" fg:w="1"/><text x="25.5400%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.2900%" y="1477" width="0.1160%" height="15" fill="rgb(245,73,45)" fg:x="218" fg:w="1"/><text x="25.5400%" y="1487.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.23%)</title><rect x="25.4060%" y="1781" width="0.2320%" height="15" fill="rgb(237,203,48)" fg:x="219" fg:w="2"/><text x="25.6560%" y="1791.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="25.4060%" y="1765" width="0.2320%" height="15" fill="rgb(211,197,16)" fg:x="219" fg:w="2"/><text x="25.6560%" y="1775.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="25.4060%" y="1749" width="0.2320%" height="15" fill="rgb(243,99,51)" fg:x="219" fg:w="2"/><text x="25.6560%" y="1759.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="25.6381%" y="1781" width="0.2320%" height="15" fill="rgb(215,123,29)" fg:x="221" fg:w="2"/><text x="25.8881%" y="1791.50"></text></g><g><title>async_executor::Executor::spawn (1 samples, 0.12%)</title><rect x="25.8701%" y="1781" width="0.1160%" height="15" fill="rgb(239,186,37)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1791.50"></text></g><g><title>async_task::runnable::spawn_unchecked (1 samples, 0.12%)</title><rect x="25.8701%" y="1765" width="0.1160%" height="15" fill="rgb(252,136,39)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1775.50"></text></g><g><title>async_task::runnable::Builder&lt;M&gt;::spawn_unchecked (1 samples, 0.12%)</title><rect x="25.8701%" y="1749" width="0.1160%" height="15" fill="rgb(223,213,32)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1759.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::allocate (1 samples, 0.12%)</title><rect x="25.8701%" y="1733" width="0.1160%" height="15" fill="rgb(233,115,5)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1743.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.8701%" y="1717" width="0.1160%" height="15" fill="rgb(207,226,44)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1727.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.8701%" y="1701" width="0.1160%" height="15" fill="rgb(208,126,0)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1711.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.8701%" y="1685" width="0.1160%" height="15" fill="rgb(244,66,21)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.8701%" y="1669" width="0.1160%" height="15" fill="rgb(222,97,12)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.8701%" y="1653" width="0.1160%" height="15" fill="rgb(219,213,19)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="25.8701%" y="1637" width="0.1160%" height="15" fill="rgb(252,169,30)" fg:x="223" fg:w="1"/><text x="26.1201%" y="1647.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="25.9861%" y="1333" width="0.1160%" height="15" fill="rgb(206,32,51)" fg:x="224" fg:w="1"/><text x="26.2361%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="25.9861%" y="1317" width="0.1160%" height="15" fill="rgb(250,172,42)" fg:x="224" fg:w="1"/><text x="26.2361%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="25.9861%" y="1301" width="0.1160%" height="15" fill="rgb(209,34,43)" fg:x="224" fg:w="1"/><text x="26.2361%" y="1311.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="25.9861%" y="1285" width="0.1160%" height="15" fill="rgb(223,11,35)" fg:x="224" fg:w="1"/><text x="26.2361%" y="1295.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="25.9861%" y="1269" width="0.1160%" height="15" fill="rgb(251,219,26)" fg:x="224" fg:w="1"/><text x="26.2361%" y="1279.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.12%)</title><rect x="26.2181%" y="1205" width="0.1160%" height="15" fill="rgb(231,119,3)" fg:x="226" fg:w="1"/><text x="26.4681%" y="1215.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (8 samples, 0.93%)</title><rect x="25.9861%" y="1429" width="0.9281%" height="15" fill="rgb(216,97,11)" fg:x="224" fg:w="8"/><text x="26.2361%" y="1439.50"></text></g><g><title>&lt;cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CPE&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (8 samples, 0.93%)</title><rect x="25.9861%" y="1413" width="0.9281%" height="15" fill="rgb(223,59,9)" fg:x="224" fg:w="8"/><text x="26.2361%" y="1423.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (8 samples, 0.93%)</title><rect x="25.9861%" y="1397" width="0.9281%" height="15" fill="rgb(233,93,31)" fg:x="224" fg:w="8"/><text x="26.2361%" y="1407.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.93%)</title><rect x="25.9861%" y="1381" width="0.9281%" height="15" fill="rgb(239,81,33)" fg:x="224" fg:w="8"/><text x="26.2361%" y="1391.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (8 samples, 0.93%)</title><rect x="25.9861%" y="1365" width="0.9281%" height="15" fill="rgb(213,120,34)" fg:x="224" fg:w="8"/><text x="26.2361%" y="1375.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (8 samples, 0.93%)</title><rect x="25.9861%" y="1349" width="0.9281%" height="15" fill="rgb(243,49,53)" fg:x="224" fg:w="8"/><text x="26.2361%" y="1359.50"></text></g><g><title>serde_json::read::next_or_eof (7 samples, 0.81%)</title><rect x="26.1021%" y="1333" width="0.8121%" height="15" fill="rgb(247,216,33)" fg:x="225" fg:w="7"/><text x="26.3521%" y="1343.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (7 samples, 0.81%)</title><rect x="26.1021%" y="1317" width="0.8121%" height="15" fill="rgb(226,26,14)" fg:x="225" fg:w="7"/><text x="26.3521%" y="1327.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.81%)</title><rect x="26.1021%" y="1301" width="0.8121%" height="15" fill="rgb(215,49,53)" fg:x="225" fg:w="7"/><text x="26.3521%" y="1311.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.81%)</title><rect x="26.1021%" y="1285" width="0.8121%" height="15" fill="rgb(245,162,40)" fg:x="225" fg:w="7"/><text x="26.3521%" y="1295.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (7 samples, 0.81%)</title><rect x="26.1021%" y="1269" width="0.8121%" height="15" fill="rgb(229,68,17)" fg:x="225" fg:w="7"/><text x="26.3521%" y="1279.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.81%)</title><rect x="26.1021%" y="1253" width="0.8121%" height="15" fill="rgb(213,182,10)" fg:x="225" fg:w="7"/><text x="26.3521%" y="1263.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.81%)</title><rect x="26.1021%" y="1237" width="0.8121%" height="15" fill="rgb(245,125,30)" fg:x="225" fg:w="7"/><text x="26.3521%" y="1247.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.70%)</title><rect x="26.2181%" y="1221" width="0.6961%" height="15" fill="rgb(232,202,2)" fg:x="226" fg:w="6"/><text x="26.4681%" y="1231.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.58%)</title><rect x="26.3341%" y="1205" width="0.5800%" height="15" fill="rgb(237,140,51)" fg:x="227" fg:w="5"/><text x="26.5841%" y="1215.50"></text></g><g><title>flate2::zio::read (5 samples, 0.58%)</title><rect x="26.3341%" y="1189" width="0.5800%" height="15" fill="rgb(236,157,25)" fg:x="227" fg:w="5"/><text x="26.5841%" y="1199.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (5 samples, 0.58%)</title><rect x="26.3341%" y="1173" width="0.5800%" height="15" fill="rgb(219,209,0)" fg:x="227" fg:w="5"/><text x="26.5841%" y="1183.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (2 samples, 0.23%)</title><rect x="26.6821%" y="1157" width="0.2320%" height="15" fill="rgb(240,116,54)" fg:x="230" fg:w="2"/><text x="26.9321%" y="1167.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (1 samples, 0.12%)</title><rect x="26.7981%" y="1141" width="0.1160%" height="15" fill="rgb(216,10,36)" fg:x="231" fg:w="1"/><text x="27.0481%" y="1151.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.12%)</title><rect x="26.7981%" y="1125" width="0.1160%" height="15" fill="rgb(222,72,44)" fg:x="231" fg:w="1"/><text x="27.0481%" y="1135.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="26.7981%" y="1109" width="0.1160%" height="15" fill="rgb(232,159,9)" fg:x="231" fg:w="1"/><text x="27.0481%" y="1119.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="26.7981%" y="1093" width="0.1160%" height="15" fill="rgb(210,39,32)" fg:x="231" fg:w="1"/><text x="27.0481%" y="1103.50"></text></g><g><title>serde::de::MapAccess::next_key (12 samples, 1.39%)</title><rect x="25.9861%" y="1461" width="1.3921%" height="15" fill="rgb(216,194,45)" fg:x="224" fg:w="12"/><text x="26.2361%" y="1471.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (12 samples, 1.39%)</title><rect x="25.9861%" y="1445" width="1.3921%" height="15" fill="rgb(218,18,35)" fg:x="224" fg:w="12"/><text x="26.2361%" y="1455.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (4 samples, 0.46%)</title><rect x="26.9142%" y="1429" width="0.4640%" height="15" fill="rgb(207,83,51)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1439.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (4 samples, 0.46%)</title><rect x="26.9142%" y="1413" width="0.4640%" height="15" fill="rgb(225,63,43)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1423.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (4 samples, 0.46%)</title><rect x="26.9142%" y="1397" width="0.4640%" height="15" fill="rgb(207,57,36)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1407.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.46%)</title><rect x="26.9142%" y="1381" width="0.4640%" height="15" fill="rgb(216,99,33)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1391.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.46%)</title><rect x="26.9142%" y="1365" width="0.4640%" height="15" fill="rgb(225,42,16)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1375.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (4 samples, 0.46%)</title><rect x="26.9142%" y="1349" width="0.4640%" height="15" fill="rgb(220,201,45)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1359.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.46%)</title><rect x="26.9142%" y="1333" width="0.4640%" height="15" fill="rgb(225,33,4)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1343.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.46%)</title><rect x="26.9142%" y="1317" width="0.4640%" height="15" fill="rgb(224,33,50)" fg:x="232" fg:w="4"/><text x="27.1642%" y="1327.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.35%)</title><rect x="27.0302%" y="1301" width="0.3480%" height="15" fill="rgb(246,198,51)" fg:x="233" fg:w="3"/><text x="27.2802%" y="1311.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.35%)</title><rect x="27.0302%" y="1285" width="0.3480%" height="15" fill="rgb(205,22,4)" fg:x="233" fg:w="3"/><text x="27.2802%" y="1295.50"></text></g><g><title>flate2::zio::read (3 samples, 0.35%)</title><rect x="27.0302%" y="1269" width="0.3480%" height="15" fill="rgb(206,3,8)" fg:x="233" fg:w="3"/><text x="27.2802%" y="1279.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (3 samples, 0.35%)</title><rect x="27.0302%" y="1253" width="0.3480%" height="15" fill="rgb(251,23,15)" fg:x="233" fg:w="3"/><text x="27.2802%" y="1263.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (3 samples, 0.35%)</title><rect x="27.0302%" y="1237" width="0.3480%" height="15" fill="rgb(252,88,28)" fg:x="233" fg:w="3"/><text x="27.2802%" y="1247.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (2 samples, 0.23%)</title><rect x="27.1462%" y="1221" width="0.2320%" height="15" fill="rgb(212,127,14)" fg:x="234" fg:w="2"/><text x="27.3962%" y="1231.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.12%)</title><rect x="27.2622%" y="1205" width="0.1160%" height="15" fill="rgb(247,145,37)" fg:x="235" fg:w="1"/><text x="27.5122%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="27.2622%" y="1189" width="0.1160%" height="15" fill="rgb(209,117,53)" fg:x="235" fg:w="1"/><text x="27.5122%" y="1199.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="27.2622%" y="1173" width="0.1160%" height="15" fill="rgb(212,90,42)" fg:x="235" fg:w="1"/><text x="27.5122%" y="1183.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::ignore_str (1 samples, 0.12%)</title><rect x="27.3782%" y="1365" width="0.1160%" height="15" fill="rgb(218,164,37)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1375.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.12%)</title><rect x="27.3782%" y="1349" width="0.1160%" height="15" fill="rgb(246,65,34)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1359.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (1 samples, 0.12%)</title><rect x="27.3782%" y="1333" width="0.1160%" height="15" fill="rgb(231,100,33)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1343.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="27.3782%" y="1317" width="0.1160%" height="15" fill="rgb(228,126,14)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1327.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="27.3782%" y="1301" width="0.1160%" height="15" fill="rgb(215,173,21)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1311.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.12%)</title><rect x="27.3782%" y="1285" width="0.1160%" height="15" fill="rgb(210,6,40)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1295.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="27.3782%" y="1269" width="0.1160%" height="15" fill="rgb(212,48,18)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1279.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="27.3782%" y="1253" width="0.1160%" height="15" fill="rgb(230,214,11)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1263.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="27.3782%" y="1237" width="0.1160%" height="15" fill="rgb(254,105,39)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1247.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="27.3782%" y="1221" width="0.1160%" height="15" fill="rgb(245,158,5)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1231.50"></text></g><g><title>flate2::zio::read (1 samples, 0.12%)</title><rect x="27.3782%" y="1205" width="0.1160%" height="15" fill="rgb(249,208,11)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1215.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1 samples, 0.12%)</title><rect x="27.3782%" y="1189" width="0.1160%" height="15" fill="rgb(210,39,28)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1199.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (1 samples, 0.12%)</title><rect x="27.3782%" y="1173" width="0.1160%" height="15" fill="rgb(211,56,53)" fg:x="236" fg:w="1"/><text x="27.6282%" y="1183.50"></text></g><g><title>&lt;serde::de::ignored_any::IgnoredAny as serde::de::Deserialize&gt;::deserialize (2 samples, 0.23%)</title><rect x="27.3782%" y="1413" width="0.2320%" height="15" fill="rgb(226,201,30)" fg:x="236" fg:w="2"/><text x="27.6282%" y="1423.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_ignored_any (2 samples, 0.23%)</title><rect x="27.3782%" y="1397" width="0.2320%" height="15" fill="rgb(239,101,34)" fg:x="236" fg:w="2"/><text x="27.6282%" y="1407.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::ignore_value (2 samples, 0.23%)</title><rect x="27.3782%" y="1381" width="0.2320%" height="15" fill="rgb(226,209,5)" fg:x="236" fg:w="2"/><text x="27.6282%" y="1391.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.12%)</title><rect x="27.4942%" y="1365" width="0.1160%" height="15" fill="rgb(250,105,47)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1375.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.12%)</title><rect x="27.4942%" y="1349" width="0.1160%" height="15" fill="rgb(230,72,3)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1359.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.12%)</title><rect x="27.4942%" y="1333" width="0.1160%" height="15" fill="rgb(232,218,39)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1343.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="27.4942%" y="1317" width="0.1160%" height="15" fill="rgb(248,166,6)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1327.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="27.4942%" y="1301" width="0.1160%" height="15" fill="rgb(247,89,20)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1311.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.12%)</title><rect x="27.4942%" y="1285" width="0.1160%" height="15" fill="rgb(248,130,54)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1295.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="27.4942%" y="1269" width="0.1160%" height="15" fill="rgb(234,196,4)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1279.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="27.4942%" y="1253" width="0.1160%" height="15" fill="rgb(250,143,31)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1263.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="27.4942%" y="1237" width="0.1160%" height="15" fill="rgb(211,110,34)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1247.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.12%)</title><rect x="27.4942%" y="1221" width="0.1160%" height="15" fill="rgb(215,124,48)" fg:x="237" fg:w="1"/><text x="27.7442%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="27.6102%" y="1349" width="0.1160%" height="15" fill="rgb(216,46,13)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="27.6102%" y="1333" width="0.1160%" height="15" fill="rgb(205,184,25)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="27.6102%" y="1317" width="0.1160%" height="15" fill="rgb(228,1,10)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1327.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="27.6102%" y="1301" width="0.1160%" height="15" fill="rgb(213,116,27)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="27.6102%" y="1285" width="0.1160%" height="15" fill="rgb(241,95,50)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1295.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="27.6102%" y="1269" width="0.1160%" height="15" fill="rgb(238,48,32)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1279.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="27.6102%" y="1253" width="0.1160%" height="15" fill="rgb(235,113,49)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1263.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="27.6102%" y="1237" width="0.1160%" height="15" fill="rgb(205,127,43)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1247.50"></text></g><g><title>_int_realloc (1 samples, 0.12%)</title><rect x="27.6102%" y="1221" width="0.1160%" height="15" fill="rgb(250,162,2)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1231.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="27.6102%" y="1205" width="0.1160%" height="15" fill="rgb(220,13,41)" fg:x="238" fg:w="1"/><text x="27.8602%" y="1215.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.12%)</title><rect x="27.7262%" y="1349" width="0.1160%" height="15" fill="rgb(249,221,25)" fg:x="239" fg:w="1"/><text x="27.9762%" y="1359.50"></text></g><g><title>serde_json::read::as_str (1 samples, 0.12%)</title><rect x="27.7262%" y="1333" width="0.1160%" height="15" fill="rgb(215,208,19)" fg:x="239" fg:w="1"/><text x="27.9762%" y="1343.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.12%)</title><rect x="27.7262%" y="1317" width="0.1160%" height="15" fill="rgb(236,175,2)" fg:x="239" fg:w="1"/><text x="27.9762%" y="1327.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.12%)</title><rect x="27.7262%" y="1301" width="0.1160%" height="15" fill="rgb(241,52,2)" fg:x="239" fg:w="1"/><text x="27.9762%" y="1311.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (9 samples, 1.04%)</title><rect x="27.6102%" y="1381" width="1.0441%" height="15" fill="rgb(248,140,14)" fg:x="238" fg:w="9"/><text x="27.8602%" y="1391.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (9 samples, 1.04%)</title><rect x="27.6102%" y="1365" width="1.0441%" height="15" fill="rgb(253,22,42)" fg:x="238" fg:w="9"/><text x="27.8602%" y="1375.50"></text></g><g><title>serde_json::read::next_or_eof (7 samples, 0.81%)</title><rect x="27.8422%" y="1349" width="0.8121%" height="15" fill="rgb(234,61,47)" fg:x="240" fg:w="7"/><text x="28.0922%" y="1359.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (7 samples, 0.81%)</title><rect x="27.8422%" y="1333" width="0.8121%" height="15" fill="rgb(208,226,15)" fg:x="240" fg:w="7"/><text x="28.0922%" y="1343.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.81%)</title><rect x="27.8422%" y="1317" width="0.8121%" height="15" fill="rgb(217,221,4)" fg:x="240" fg:w="7"/><text x="28.0922%" y="1327.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.81%)</title><rect x="27.8422%" y="1301" width="0.8121%" height="15" fill="rgb(212,174,34)" fg:x="240" fg:w="7"/><text x="28.0922%" y="1311.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (6 samples, 0.70%)</title><rect x="27.9582%" y="1285" width="0.6961%" height="15" fill="rgb(253,83,4)" fg:x="241" fg:w="6"/><text x="28.2082%" y="1295.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.70%)</title><rect x="27.9582%" y="1269" width="0.6961%" height="15" fill="rgb(250,195,49)" fg:x="241" fg:w="6"/><text x="28.2082%" y="1279.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.70%)</title><rect x="27.9582%" y="1253" width="0.6961%" height="15" fill="rgb(241,192,25)" fg:x="241" fg:w="6"/><text x="28.2082%" y="1263.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.58%)</title><rect x="28.0742%" y="1237" width="0.5800%" height="15" fill="rgb(208,124,10)" fg:x="242" fg:w="5"/><text x="28.3242%" y="1247.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.58%)</title><rect x="28.0742%" y="1221" width="0.5800%" height="15" fill="rgb(222,33,0)" fg:x="242" fg:w="5"/><text x="28.3242%" y="1231.50"></text></g><g><title>flate2::zio::read (5 samples, 0.58%)</title><rect x="28.0742%" y="1205" width="0.5800%" height="15" fill="rgb(234,209,28)" fg:x="242" fg:w="5"/><text x="28.3242%" y="1215.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (2 samples, 0.23%)</title><rect x="28.4223%" y="1189" width="0.2320%" height="15" fill="rgb(224,11,23)" fg:x="245" fg:w="2"/><text x="28.6723%" y="1199.50"></text></g><g><title>&lt;ijson::string::STRING_CACHE as core::ops::deref::Deref&gt;::deref (1 samples, 0.12%)</title><rect x="28.6543%" y="1365" width="0.1160%" height="15" fill="rgb(232,99,1)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1375.50"></text></g><g><title>&lt;ijson::string::STRING_CACHE as core::ops::deref::Deref&gt;::deref::__stability (1 samples, 0.12%)</title><rect x="28.6543%" y="1349" width="0.1160%" height="15" fill="rgb(237,95,45)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1359.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (1 samples, 0.12%)</title><rect x="28.6543%" y="1333" width="0.1160%" height="15" fill="rgb(208,109,11)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1343.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.12%)</title><rect x="28.6543%" y="1317" width="0.1160%" height="15" fill="rgb(216,190,48)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1327.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.12%)</title><rect x="28.6543%" y="1301" width="0.1160%" height="15" fill="rgb(251,171,36)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1311.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.12%)</title><rect x="28.6543%" y="1285" width="0.1160%" height="15" fill="rgb(230,62,22)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1295.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (1 samples, 0.12%)</title><rect x="28.6543%" y="1269" width="0.1160%" height="15" fill="rgb(225,114,35)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1279.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.12%)</title><rect x="28.6543%" y="1253" width="0.1160%" height="15" fill="rgb(215,118,42)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1263.50"></text></g><g><title>&lt;ijson::string::STRING_CACHE as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (1 samples, 0.12%)</title><rect x="28.6543%" y="1237" width="0.1160%" height="15" fill="rgb(243,119,21)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1247.50"></text></g><g><title>dashmap::set::DashSet&lt;K&gt;::new (1 samples, 0.12%)</title><rect x="28.6543%" y="1221" width="0.1160%" height="15" fill="rgb(252,177,53)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1231.50"></text></g><g><title>dashmap::set::DashSet&lt;K,S&gt;::with_hasher (1 samples, 0.12%)</title><rect x="28.6543%" y="1205" width="0.1160%" height="15" fill="rgb(237,209,29)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1215.50"></text></g><g><title>dashmap::set::DashSet&lt;K,S&gt;::with_capacity_and_hasher (1 samples, 0.12%)</title><rect x="28.6543%" y="1189" width="0.1160%" height="15" fill="rgb(212,65,23)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1199.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.12%)</title><rect x="28.6543%" y="1173" width="0.1160%" height="15" fill="rgb(230,222,46)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1183.50"></text></g><g><title>dashmap::shard_amount (1 samples, 0.12%)</title><rect x="28.6543%" y="1157" width="0.1160%" height="15" fill="rgb(215,135,32)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1167.50"></text></g><g><title>num_cpus::get (1 samples, 0.12%)</title><rect x="28.6543%" y="1141" width="0.1160%" height="15" fill="rgb(246,101,22)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1151.50"></text></g><g><title>num_cpus::linux::get_num_cpus (1 samples, 0.12%)</title><rect x="28.6543%" y="1125" width="0.1160%" height="15" fill="rgb(206,107,13)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1135.50"></text></g><g><title>num_cpus::linux::cgroups_num_cpus (1 samples, 0.12%)</title><rect x="28.6543%" y="1109" width="0.1160%" height="15" fill="rgb(250,100,44)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1119.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.12%)</title><rect x="28.6543%" y="1093" width="0.1160%" height="15" fill="rgb(231,147,38)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1103.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.12%)</title><rect x="28.6543%" y="1077" width="0.1160%" height="15" fill="rgb(229,8,40)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1087.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.12%)</title><rect x="28.6543%" y="1061" width="0.1160%" height="15" fill="rgb(221,135,30)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1071.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.12%)</title><rect x="28.6543%" y="1045" width="0.1160%" height="15" fill="rgb(249,193,18)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1055.50"></text></g><g><title>num_cpus::linux::init_cgroups (1 samples, 0.12%)</title><rect x="28.6543%" y="1029" width="0.1160%" height="15" fill="rgb(209,133,39)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1039.50"></text></g><g><title>num_cpus::linux::load_cgroups (1 samples, 0.12%)</title><rect x="28.6543%" y="1013" width="0.1160%" height="15" fill="rgb(232,100,14)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1023.50"></text></g><g><title>num_cpus::linux::MountInfo::load_cpu (1 samples, 0.12%)</title><rect x="28.6543%" y="997" width="0.1160%" height="15" fill="rgb(224,185,1)" fg:x="247" fg:w="1"/><text x="28.9043%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.12%)</title><rect x="28.6543%" y="981" width="0.1160%" height="15" fill="rgb(223,139,8)" fg:x="247" fg:w="1"/><text x="28.9043%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.12%)</title><rect x="28.6543%" y="965" width="0.1160%" height="15" fill="rgb(232,213,38)" fg:x="247" fg:w="1"/><text x="28.9043%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.12%)</title><rect x="28.6543%" y="949" width="0.1160%" height="15" fill="rgb(207,94,22)" fg:x="247" fg:w="1"/><text x="28.9043%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.12%)</title><rect x="28.6543%" y="933" width="0.1160%" height="15" fill="rgb(219,183,54)" fg:x="247" fg:w="1"/><text x="28.9043%" y="943.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="28.6543%" y="917" width="0.1160%" height="15" fill="rgb(216,185,54)" fg:x="247" fg:w="1"/><text x="28.9043%" y="927.50"></text></g><g><title>std::io::BufRead::read_line (1 samples, 0.12%)</title><rect x="28.6543%" y="901" width="0.1160%" height="15" fill="rgb(254,217,39)" fg:x="247" fg:w="1"/><text x="28.9043%" y="911.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.12%)</title><rect x="28.6543%" y="885" width="0.1160%" height="15" fill="rgb(240,178,23)" fg:x="247" fg:w="1"/><text x="28.9043%" y="895.50"></text></g><g><title>std::io::BufRead::read_line::{{closure}} (1 samples, 0.12%)</title><rect x="28.6543%" y="869" width="0.1160%" height="15" fill="rgb(218,11,47)" fg:x="247" fg:w="1"/><text x="28.9043%" y="879.50"></text></g><g><title>std::io::read_until (1 samples, 0.12%)</title><rect x="28.6543%" y="853" width="0.1160%" height="15" fill="rgb(218,51,51)" fg:x="247" fg:w="1"/><text x="28.9043%" y="863.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.12%)</title><rect x="28.6543%" y="837" width="0.1160%" height="15" fill="rgb(238,126,27)" fg:x="247" fg:w="1"/><text x="28.9043%" y="847.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.12%)</title><rect x="28.6543%" y="821" width="0.1160%" height="15" fill="rgb(249,202,22)" fg:x="247" fg:w="1"/><text x="28.9043%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1 samples, 0.12%)</title><rect x="28.6543%" y="805" width="0.1160%" height="15" fill="rgb(254,195,49)" fg:x="247" fg:w="1"/><text x="28.9043%" y="815.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.12%)</title><rect x="28.6543%" y="789" width="0.1160%" height="15" fill="rgb(208,123,14)" fg:x="247" fg:w="1"/><text x="28.9043%" y="799.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (1 samples, 0.12%)</title><rect x="28.6543%" y="773" width="0.1160%" height="15" fill="rgb(224,200,8)" fg:x="247" fg:w="1"/><text x="28.9043%" y="783.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (1 samples, 0.12%)</title><rect x="28.6543%" y="757" width="0.1160%" height="15" fill="rgb(217,61,36)" fg:x="247" fg:w="1"/><text x="28.9043%" y="767.50"></text></g><g><title>__libc_read (1 samples, 0.12%)</title><rect x="28.6543%" y="741" width="0.1160%" height="15" fill="rgb(206,35,45)" fg:x="247" fg:w="1"/><text x="28.9043%" y="751.50"></text></g><g><title>__libc_read (1 samples, 0.12%)</title><rect x="28.6543%" y="725" width="0.1160%" height="15" fill="rgb(217,65,33)" fg:x="247" fg:w="1"/><text x="28.9043%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="709" width="0.1160%" height="15" fill="rgb(222,158,48)" fg:x="247" fg:w="1"/><text x="28.9043%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="693" width="0.1160%" height="15" fill="rgb(254,2,54)" fg:x="247" fg:w="1"/><text x="28.9043%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="677" width="0.1160%" height="15" fill="rgb(250,143,38)" fg:x="247" fg:w="1"/><text x="28.9043%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="661" width="0.1160%" height="15" fill="rgb(248,25,0)" fg:x="247" fg:w="1"/><text x="28.9043%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="645" width="0.1160%" height="15" fill="rgb(206,152,27)" fg:x="247" fg:w="1"/><text x="28.9043%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="629" width="0.1160%" height="15" fill="rgb(240,77,30)" fg:x="247" fg:w="1"/><text x="28.9043%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="613" width="0.1160%" height="15" fill="rgb(231,5,3)" fg:x="247" fg:w="1"/><text x="28.9043%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="597" width="0.1160%" height="15" fill="rgb(207,226,32)" fg:x="247" fg:w="1"/><text x="28.9043%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="28.6543%" y="581" width="0.1160%" height="15" fill="rgb(222,207,47)" fg:x="247" fg:w="1"/><text x="28.9043%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;dashmap::lock::RwLockWriteGuard&lt;std::collections::hash::map::HashMap&lt;ijson::string::WeakIString,dashmap::util::SharedValue&lt;()&gt;&gt;&gt;&gt; (1 samples, 0.12%)</title><rect x="28.7703%" y="1365" width="0.1160%" height="15" fill="rgb(229,115,45)" fg:x="248" fg:w="1"/><text x="29.0203%" y="1375.50"></text></g><g><title>&lt;dashmap::lock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="28.7703%" y="1349" width="0.1160%" height="15" fill="rgb(224,191,6)" fg:x="248" fg:w="1"/><text x="29.0203%" y="1359.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (1 samples, 0.12%)</title><rect x="28.7703%" y="1333" width="0.1160%" height="15" fill="rgb(230,227,24)" fg:x="248" fg:w="1"/><text x="29.0203%" y="1343.50"></text></g><g><title>core::sync::atomic::atomic_and (1 samples, 0.12%)</title><rect x="28.7703%" y="1317" width="0.1160%" height="15" fill="rgb(228,80,19)" fg:x="248" fg:w="1"/><text x="29.0203%" y="1327.50"></text></g><g><title>ijson::de::&lt;impl serde::de::Deserialize for ijson::string::IString&gt;::deserialize (12 samples, 1.39%)</title><rect x="27.6102%" y="1413" width="1.3921%" height="15" fill="rgb(247,229,0)" fg:x="238" fg:w="12"/><text x="27.8602%" y="1423.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (12 samples, 1.39%)</title><rect x="27.6102%" y="1397" width="1.3921%" height="15" fill="rgb(237,194,15)" fg:x="238" fg:w="12"/><text x="27.8602%" y="1407.50"></text></g><g><title>ijson::string::IString::intern (3 samples, 0.35%)</title><rect x="28.6543%" y="1381" width="0.3480%" height="15" fill="rgb(219,203,20)" fg:x="247" fg:w="3"/><text x="28.9043%" y="1391.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::write (1 samples, 0.12%)</title><rect x="28.8863%" y="1365" width="0.1160%" height="15" fill="rgb(234,128,8)" fg:x="249" fg:w="1"/><text x="29.1363%" y="1375.50"></text></g><g><title>dashmap::lock::RwLock&lt;T&gt;::try_write_internal (1 samples, 0.12%)</title><rect x="28.8863%" y="1349" width="0.1160%" height="15" fill="rgb(248,202,8)" fg:x="249" fg:w="1"/><text x="29.1363%" y="1359.50"></text></g><g><title>dashmap::lock::compare_exchange (1 samples, 0.12%)</title><rect x="28.8863%" y="1333" width="0.1160%" height="15" fill="rgb(206,104,37)" fg:x="249" fg:w="1"/><text x="29.1363%" y="1343.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="29.0023%" y="1221" width="0.1160%" height="15" fill="rgb(223,8,27)" fg:x="250" fg:w="1"/><text x="29.2523%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.23%)</title><rect x="29.0023%" y="1365" width="0.2320%" height="15" fill="rgb(216,217,28)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.23%)</title><rect x="29.0023%" y="1349" width="0.2320%" height="15" fill="rgb(249,199,1)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.23%)</title><rect x="29.0023%" y="1333" width="0.2320%" height="15" fill="rgb(240,85,17)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1343.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.23%)</title><rect x="29.0023%" y="1317" width="0.2320%" height="15" fill="rgb(206,108,45)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.23%)</title><rect x="29.0023%" y="1301" width="0.2320%" height="15" fill="rgb(245,210,41)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1311.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.23%)</title><rect x="29.0023%" y="1285" width="0.2320%" height="15" fill="rgb(206,13,37)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1295.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.23%)</title><rect x="29.0023%" y="1269" width="0.2320%" height="15" fill="rgb(250,61,18)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1279.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.23%)</title><rect x="29.0023%" y="1253" width="0.2320%" height="15" fill="rgb(235,172,48)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1263.50"></text></g><g><title>_int_realloc (2 samples, 0.23%)</title><rect x="29.0023%" y="1237" width="0.2320%" height="15" fill="rgb(249,201,17)" fg:x="250" fg:w="2"/><text x="29.2523%" y="1247.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="29.1183%" y="1221" width="0.1160%" height="15" fill="rgb(219,208,6)" fg:x="251" fg:w="1"/><text x="29.3683%" y="1231.50"></text></g><g><title>malloc_consolidate (1 samples, 0.12%)</title><rect x="29.1183%" y="1205" width="0.1160%" height="15" fill="rgb(248,31,23)" fg:x="251" fg:w="1"/><text x="29.3683%" y="1215.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.12%)</title><rect x="30.1624%" y="965" width="0.1160%" height="15" fill="rgb(245,15,42)" fg:x="260" fg:w="1"/><text x="30.4124%" y="975.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (6 samples, 0.70%)</title><rect x="29.6984%" y="981" width="0.6961%" height="15" fill="rgb(222,217,39)" fg:x="256" fg:w="6"/><text x="29.9484%" y="991.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (1 samples, 0.12%)</title><rect x="30.2784%" y="965" width="0.1160%" height="15" fill="rgb(210,219,27)" fg:x="261" fg:w="1"/><text x="30.5284%" y="975.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (1 samples, 0.12%)</title><rect x="30.2784%" y="949" width="0.1160%" height="15" fill="rgb(252,166,36)" fg:x="261" fg:w="1"/><text x="30.5284%" y="959.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (1 samples, 0.12%)</title><rect x="30.2784%" y="933" width="0.1160%" height="15" fill="rgb(245,132,34)" fg:x="261" fg:w="1"/><text x="30.5284%" y="943.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.12%)</title><rect x="30.2784%" y="917" width="0.1160%" height="15" fill="rgb(236,54,3)" fg:x="261" fg:w="1"/><text x="30.5284%" y="927.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.12%)</title><rect x="30.2784%" y="901" width="0.1160%" height="15" fill="rgb(241,173,43)" fg:x="261" fg:w="1"/><text x="30.5284%" y="911.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (9 samples, 1.04%)</title><rect x="29.4664%" y="1013" width="1.0441%" height="15" fill="rgb(215,190,9)" fg:x="254" fg:w="9"/><text x="29.7164%" y="1023.50"></text></g><g><title>flate2::zio::read (9 samples, 1.04%)</title><rect x="29.4664%" y="997" width="1.0441%" height="15" fill="rgb(242,101,16)" fg:x="254" fg:w="9"/><text x="29.7164%" y="1007.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.12%)</title><rect x="30.3944%" y="981" width="0.1160%" height="15" fill="rgb(223,190,21)" fg:x="262" fg:w="1"/><text x="30.6444%" y="991.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 1.16%)</title><rect x="29.4664%" y="1237" width="1.1601%" height="15" fill="rgb(215,228,25)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1247.50"></text></g><g><title>&lt;cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CpeName&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (10 samples, 1.16%)</title><rect x="29.4664%" y="1221" width="1.1601%" height="15" fill="rgb(225,36,22)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1231.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (10 samples, 1.16%)</title><rect x="29.4664%" y="1205" width="1.1601%" height="15" fill="rgb(251,106,46)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1215.50"></text></g><g><title>&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 1.16%)</title><rect x="29.4664%" y="1189" width="1.1601%" height="15" fill="rgb(208,90,1)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1199.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (10 samples, 1.16%)</title><rect x="29.4664%" y="1173" width="1.1601%" height="15" fill="rgb(243,10,4)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1183.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (10 samples, 1.16%)</title><rect x="29.4664%" y="1157" width="1.1601%" height="15" fill="rgb(212,137,27)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1167.50"></text></g><g><title>serde_json::read::next_or_eof (10 samples, 1.16%)</title><rect x="29.4664%" y="1141" width="1.1601%" height="15" fill="rgb(231,220,49)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1151.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (10 samples, 1.16%)</title><rect x="29.4664%" y="1125" width="1.1601%" height="15" fill="rgb(237,96,20)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1135.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 1.16%)</title><rect x="29.4664%" y="1109" width="1.1601%" height="15" fill="rgb(239,229,30)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1119.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 1.16%)</title><rect x="29.4664%" y="1093" width="1.1601%" height="15" fill="rgb(219,65,33)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1103.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (10 samples, 1.16%)</title><rect x="29.4664%" y="1077" width="1.1601%" height="15" fill="rgb(243,134,7)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1087.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (10 samples, 1.16%)</title><rect x="29.4664%" y="1061" width="1.1601%" height="15" fill="rgb(216,177,54)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1071.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (10 samples, 1.16%)</title><rect x="29.4664%" y="1045" width="1.1601%" height="15" fill="rgb(211,160,20)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1055.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 1.16%)</title><rect x="29.4664%" y="1029" width="1.1601%" height="15" fill="rgb(239,85,39)" fg:x="254" fg:w="10"/><text x="29.7164%" y="1039.50"></text></g><g><title>crc32fast::Hasher::update (1 samples, 0.12%)</title><rect x="30.5104%" y="1013" width="0.1160%" height="15" fill="rgb(232,125,22)" fg:x="263" fg:w="1"/><text x="30.7604%" y="1023.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.12%)</title><rect x="30.5104%" y="997" width="0.1160%" height="15" fill="rgb(244,57,34)" fg:x="263" fg:w="1"/><text x="30.7604%" y="1007.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.12%)</title><rect x="30.5104%" y="981" width="0.1160%" height="15" fill="rgb(214,203,32)" fg:x="263" fg:w="1"/><text x="30.7604%" y="991.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.12%)</title><rect x="32.4826%" y="1045" width="0.1160%" height="15" fill="rgb(207,58,43)" fg:x="280" fg:w="1"/><text x="32.7326%" y="1055.50"></text></g><g><title>&lt;miniz_oxide::DataFormat as core::cmp::PartialEq&gt;::eq (1 samples, 0.12%)</title><rect x="32.8306%" y="1029" width="0.1160%" height="15" fill="rgb(215,193,15)" fg:x="283" fg:w="1"/><text x="33.0806%" y="1039.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (1 samples, 0.12%)</title><rect x="32.9466%" y="1029" width="0.1160%" height="15" fill="rgb(232,15,44)" fg:x="284" fg:w="1"/><text x="33.1966%" y="1039.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1 samples, 0.12%)</title><rect x="32.9466%" y="1013" width="0.1160%" height="15" fill="rgb(212,3,48)" fg:x="284" fg:w="1"/><text x="33.1966%" y="1023.50"></text></g><g><title>miniz_oxide::inflate::core::memset (1 samples, 0.12%)</title><rect x="32.9466%" y="997" width="0.1160%" height="15" fill="rgb(218,128,7)" fg:x="284" fg:w="1"/><text x="33.1966%" y="1007.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.12%)</title><rect x="32.9466%" y="981" width="0.1160%" height="15" fill="rgb(226,216,39)" fg:x="284" fg:w="1"/><text x="33.1966%" y="991.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (2 samples, 0.23%)</title><rect x="33.0626%" y="1013" width="0.2320%" height="15" fill="rgb(243,47,51)" fg:x="285" fg:w="2"/><text x="33.3126%" y="1023.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.23%)</title><rect x="33.0626%" y="997" width="0.2320%" height="15" fill="rgb(241,183,40)" fg:x="285" fg:w="2"/><text x="33.3126%" y="1007.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.23%)</title><rect x="33.0626%" y="981" width="0.2320%" height="15" fill="rgb(231,217,32)" fg:x="285" fg:w="2"/><text x="33.3126%" y="991.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (15 samples, 1.74%)</title><rect x="31.6705%" y="1061" width="1.7401%" height="15" fill="rgb(229,61,38)" fg:x="273" fg:w="15"/><text x="31.9205%" y="1071.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (7 samples, 0.81%)</title><rect x="32.5986%" y="1045" width="0.8121%" height="15" fill="rgb(225,210,5)" fg:x="281" fg:w="7"/><text x="32.8486%" y="1055.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (3 samples, 0.35%)</title><rect x="33.0626%" y="1029" width="0.3480%" height="15" fill="rgb(231,79,45)" fg:x="285" fg:w="3"/><text x="33.3126%" y="1039.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.12%)</title><rect x="33.2947%" y="1013" width="0.1160%" height="15" fill="rgb(224,100,7)" fg:x="287" fg:w="1"/><text x="33.5447%" y="1023.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="33.2947%" y="997" width="0.1160%" height="15" fill="rgb(241,198,18)" fg:x="287" fg:w="1"/><text x="33.5447%" y="1007.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="33.2947%" y="981" width="0.1160%" height="15" fill="rgb(252,97,53)" fg:x="287" fg:w="1"/><text x="33.5447%" y="991.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (17 samples, 1.97%)</title><rect x="31.5545%" y="1093" width="1.9722%" height="15" fill="rgb(220,88,7)" fg:x="272" fg:w="17"/><text x="31.8045%" y="1103.50">&lt;..</text></g><g><title>flate2::zio::read (17 samples, 1.97%)</title><rect x="31.5545%" y="1077" width="1.9722%" height="15" fill="rgb(213,176,14)" fg:x="272" fg:w="17"/><text x="31.8045%" y="1087.50">f..</text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_out (1 samples, 0.12%)</title><rect x="33.4107%" y="1061" width="0.1160%" height="15" fill="rgb(246,73,7)" fg:x="288" fg:w="1"/><text x="33.6607%" y="1071.50"></text></g><g><title>flate2::mem::Compress::total_out (1 samples, 0.12%)</title><rect x="33.4107%" y="1045" width="0.1160%" height="15" fill="rgb(245,64,36)" fg:x="288" fg:w="1"/><text x="33.6607%" y="1055.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::Backend&gt;::total_out (1 samples, 0.12%)</title><rect x="33.4107%" y="1029" width="0.1160%" height="15" fill="rgb(245,80,10)" fg:x="288" fg:w="1"/><text x="33.6607%" y="1039.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (2 samples, 0.23%)</title><rect x="33.5267%" y="1061" width="0.2320%" height="15" fill="rgb(232,107,50)" fg:x="289" fg:w="2"/><text x="33.7767%" y="1071.50"></text></g><g><title>crc32fast::baseline::update_slow (1 samples, 0.12%)</title><rect x="33.6427%" y="1045" width="0.1160%" height="15" fill="rgb(253,3,0)" fg:x="290" fg:w="1"/><text x="33.8927%" y="1055.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="33.6427%" y="1029" width="0.1160%" height="15" fill="rgb(212,99,53)" fg:x="290" fg:w="1"/><text x="33.8927%" y="1039.50"></text></g><g><title>crc32fast::Hasher::update (3 samples, 0.35%)</title><rect x="33.5267%" y="1093" width="0.3480%" height="15" fill="rgb(249,111,54)" fg:x="289" fg:w="3"/><text x="33.7767%" y="1103.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (3 samples, 0.35%)</title><rect x="33.5267%" y="1077" width="0.3480%" height="15" fill="rgb(249,55,30)" fg:x="289" fg:w="3"/><text x="33.7767%" y="1087.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.12%)</title><rect x="33.7587%" y="1061" width="0.1160%" height="15" fill="rgb(237,47,42)" fg:x="291" fg:w="1"/><text x="34.0087%" y="1071.50"></text></g><g><title>serde::de::MapAccess::next_key (40 samples, 4.64%)</title><rect x="29.4664%" y="1269" width="4.6404%" height="15" fill="rgb(211,20,18)" fg:x="254" fg:w="40"/><text x="29.7164%" y="1279.50">serde..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (40 samples, 4.64%)</title><rect x="29.4664%" y="1253" width="4.6404%" height="15" fill="rgb(231,203,46)" fg:x="254" fg:w="40"/><text x="29.7164%" y="1263.50">&lt;serd..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (30 samples, 3.48%)</title><rect x="30.6265%" y="1237" width="3.4803%" height="15" fill="rgb(237,142,3)" fg:x="264" fg:w="30"/><text x="30.8765%" y="1247.50">ser..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (30 samples, 3.48%)</title><rect x="30.6265%" y="1221" width="3.4803%" height="15" fill="rgb(241,107,1)" fg:x="264" fg:w="30"/><text x="30.8765%" y="1231.50">ser..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (30 samples, 3.48%)</title><rect x="30.6265%" y="1205" width="3.4803%" height="15" fill="rgb(229,83,13)" fg:x="264" fg:w="30"/><text x="30.8765%" y="1215.50">&lt;se..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 3.36%)</title><rect x="30.7425%" y="1189" width="3.3643%" height="15" fill="rgb(241,91,40)" fg:x="265" fg:w="29"/><text x="30.9925%" y="1199.50">&lt;se..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 3.36%)</title><rect x="30.7425%" y="1173" width="3.3643%" height="15" fill="rgb(225,3,45)" fg:x="265" fg:w="29"/><text x="30.9925%" y="1183.50">&lt;st..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (27 samples, 3.13%)</title><rect x="30.9745%" y="1157" width="3.1323%" height="15" fill="rgb(244,223,14)" fg:x="267" fg:w="27"/><text x="31.2245%" y="1167.50">std..</text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (27 samples, 3.13%)</title><rect x="30.9745%" y="1141" width="3.1323%" height="15" fill="rgb(224,124,37)" fg:x="267" fg:w="27"/><text x="31.2245%" y="1151.50">&lt;fl..</text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (27 samples, 3.13%)</title><rect x="30.9745%" y="1125" width="3.1323%" height="15" fill="rgb(251,171,30)" fg:x="267" fg:w="27"/><text x="31.2245%" y="1135.50">&lt;fl..</text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (23 samples, 2.67%)</title><rect x="31.4385%" y="1109" width="2.6682%" height="15" fill="rgb(236,46,54)" fg:x="271" fg:w="23"/><text x="31.6885%" y="1119.50">&lt;f..</text></g><g><title>flate2::crc::Crc::update (2 samples, 0.23%)</title><rect x="33.8747%" y="1093" width="0.2320%" height="15" fill="rgb(245,213,5)" fg:x="292" fg:w="2"/><text x="34.1247%" y="1103.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (3 samples, 0.35%)</title><rect x="34.1067%" y="1173" width="0.3480%" height="15" fill="rgb(230,144,27)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1183.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.35%)</title><rect x="34.1067%" y="1157" width="0.3480%" height="15" fill="rgb(220,86,6)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1167.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.35%)</title><rect x="34.1067%" y="1141" width="0.3480%" height="15" fill="rgb(240,20,13)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1151.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.35%)</title><rect x="34.1067%" y="1125" width="0.3480%" height="15" fill="rgb(217,89,34)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.35%)</title><rect x="34.1067%" y="1109" width="0.3480%" height="15" fill="rgb(229,13,5)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1119.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.35%)</title><rect x="34.1067%" y="1093" width="0.3480%" height="15" fill="rgb(244,67,35)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1103.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.35%)</title><rect x="34.1067%" y="1077" width="0.3480%" height="15" fill="rgb(221,40,2)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.35%)</title><rect x="34.1067%" y="1061" width="0.3480%" height="15" fill="rgb(237,157,21)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.35%)</title><rect x="34.1067%" y="1045" width="0.3480%" height="15" fill="rgb(222,94,11)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.35%)</title><rect x="34.1067%" y="1029" width="0.3480%" height="15" fill="rgb(249,113,6)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.35%)</title><rect x="34.1067%" y="1013" width="0.3480%" height="15" fill="rgb(238,137,36)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1023.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.35%)</title><rect x="34.1067%" y="997" width="0.3480%" height="15" fill="rgb(210,102,26)" fg:x="294" fg:w="3"/><text x="34.3567%" y="1007.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.35%)</title><rect x="34.1067%" y="981" width="0.3480%" height="15" fill="rgb(218,30,30)" fg:x="294" fg:w="3"/><text x="34.3567%" y="991.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.35%)</title><rect x="34.1067%" y="965" width="0.3480%" height="15" fill="rgb(214,67,26)" fg:x="294" fg:w="3"/><text x="34.3567%" y="975.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="34.2227%" y="949" width="0.2320%" height="15" fill="rgb(251,9,53)" fg:x="295" fg:w="2"/><text x="34.4727%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="933" width="0.1160%" height="15" fill="rgb(228,204,25)" fg:x="296" fg:w="1"/><text x="34.5887%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="917" width="0.1160%" height="15" fill="rgb(207,153,8)" fg:x="296" fg:w="1"/><text x="34.5887%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="901" width="0.1160%" height="15" fill="rgb(242,9,16)" fg:x="296" fg:w="1"/><text x="34.5887%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="885" width="0.1160%" height="15" fill="rgb(217,211,10)" fg:x="296" fg:w="1"/><text x="34.5887%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="869" width="0.1160%" height="15" fill="rgb(219,228,52)" fg:x="296" fg:w="1"/><text x="34.5887%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="853" width="0.1160%" height="15" fill="rgb(231,92,29)" fg:x="296" fg:w="1"/><text x="34.5887%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="837" width="0.1160%" height="15" fill="rgb(232,8,23)" fg:x="296" fg:w="1"/><text x="34.5887%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="821" width="0.1160%" height="15" fill="rgb(216,211,34)" fg:x="296" fg:w="1"/><text x="34.5887%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="805" width="0.1160%" height="15" fill="rgb(236,151,0)" fg:x="296" fg:w="1"/><text x="34.5887%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="34.3387%" y="789" width="0.1160%" height="15" fill="rgb(209,168,3)" fg:x="296" fg:w="1"/><text x="34.5887%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="34.5708%" y="1141" width="0.1160%" height="15" fill="rgb(208,129,28)" fg:x="298" fg:w="1"/><text x="34.8208%" y="1151.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="34.5708%" y="1125" width="0.1160%" height="15" fill="rgb(229,78,22)" fg:x="298" fg:w="1"/><text x="34.8208%" y="1135.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.23%)</title><rect x="36.1949%" y="1013" width="0.2320%" height="15" fill="rgb(228,187,13)" fg:x="312" fg:w="2"/><text x="36.4449%" y="1023.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.23%)</title><rect x="38.0510%" y="981" width="0.2320%" height="15" fill="rgb(240,119,24)" fg:x="328" fg:w="2"/><text x="38.3010%" y="991.50"></text></g><g><title>core::cmp::min (2 samples, 0.23%)</title><rect x="38.0510%" y="965" width="0.2320%" height="15" fill="rgb(209,194,42)" fg:x="328" fg:w="2"/><text x="38.3010%" y="975.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.23%)</title><rect x="38.0510%" y="949" width="0.2320%" height="15" fill="rgb(247,200,46)" fg:x="328" fg:w="2"/><text x="38.3010%" y="959.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.23%)</title><rect x="38.0510%" y="933" width="0.2320%" height="15" fill="rgb(218,76,16)" fg:x="328" fg:w="2"/><text x="38.3010%" y="943.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.12%)</title><rect x="38.2831%" y="981" width="0.1160%" height="15" fill="rgb(225,21,48)" fg:x="330" fg:w="1"/><text x="38.5331%" y="991.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.12%)</title><rect x="40.7193%" y="965" width="0.1160%" height="15" fill="rgb(239,223,50)" fg:x="351" fg:w="1"/><text x="40.9693%" y="975.50"></text></g><g><title>miniz_oxide::MZFlush::new (2 samples, 0.23%)</title><rect x="40.8353%" y="965" width="0.2320%" height="15" fill="rgb(244,45,21)" fg:x="352" fg:w="2"/><text x="41.0853%" y="975.50"></text></g><g><title>&lt;miniz_oxide::DataFormat as core::cmp::PartialEq&gt;::eq (1 samples, 0.12%)</title><rect x="42.5754%" y="949" width="0.1160%" height="15" fill="rgb(232,33,43)" fg:x="367" fg:w="1"/><text x="42.8254%" y="959.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (2 samples, 0.23%)</title><rect x="42.6914%" y="949" width="0.2320%" height="15" fill="rgb(209,8,3)" fg:x="368" fg:w="2"/><text x="42.9414%" y="959.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (2 samples, 0.23%)</title><rect x="42.6914%" y="933" width="0.2320%" height="15" fill="rgb(214,25,53)" fg:x="368" fg:w="2"/><text x="42.9414%" y="943.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (2 samples, 0.23%)</title><rect x="42.6914%" y="917" width="0.2320%" height="15" fill="rgb(254,186,54)" fg:x="368" fg:w="2"/><text x="42.9414%" y="927.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (1 samples, 0.12%)</title><rect x="42.8074%" y="901" width="0.1160%" height="15" fill="rgb(208,174,49)" fg:x="369" fg:w="1"/><text x="43.0574%" y="911.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (1 samples, 0.12%)</title><rect x="42.8074%" y="885" width="0.1160%" height="15" fill="rgb(233,191,51)" fg:x="369" fg:w="1"/><text x="43.0574%" y="895.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (2 samples, 0.23%)</title><rect x="42.9234%" y="933" width="0.2320%" height="15" fill="rgb(222,134,10)" fg:x="370" fg:w="2"/><text x="43.1734%" y="943.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.23%)</title><rect x="42.9234%" y="917" width="0.2320%" height="15" fill="rgb(230,226,20)" fg:x="370" fg:w="2"/><text x="43.1734%" y="927.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.23%)</title><rect x="42.9234%" y="901" width="0.2320%" height="15" fill="rgb(251,111,25)" fg:x="370" fg:w="2"/><text x="43.1734%" y="911.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (47 samples, 5.45%)</title><rect x="38.3991%" y="981" width="5.4524%" height="15" fill="rgb(224,40,46)" fg:x="331" fg:w="47"/><text x="38.6491%" y="991.50">&lt;flate2..</text></g><g><title>miniz_oxide::inflate::stream::inflate (24 samples, 2.78%)</title><rect x="41.0673%" y="965" width="2.7842%" height="15" fill="rgb(236,108,47)" fg:x="354" fg:w="24"/><text x="41.3173%" y="975.50">mi..</text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (8 samples, 0.93%)</title><rect x="42.9234%" y="949" width="0.9281%" height="15" fill="rgb(234,93,0)" fg:x="370" fg:w="8"/><text x="43.1734%" y="959.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.70%)</title><rect x="43.1555%" y="933" width="0.6961%" height="15" fill="rgb(224,213,32)" fg:x="372" fg:w="6"/><text x="43.4055%" y="943.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.70%)</title><rect x="43.1555%" y="917" width="0.6961%" height="15" fill="rgb(251,11,48)" fg:x="372" fg:w="6"/><text x="43.4055%" y="927.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.70%)</title><rect x="43.1555%" y="901" width="0.6961%" height="15" fill="rgb(236,173,5)" fg:x="372" fg:w="6"/><text x="43.4055%" y="911.50"></text></g><g><title>&lt;flate2::mem::Compress as flate2::zio::Ops&gt;::total_in (1 samples, 0.12%)</title><rect x="43.8515%" y="981" width="0.1160%" height="15" fill="rgb(230,95,12)" fg:x="378" fg:w="1"/><text x="44.1015%" y="991.50"></text></g><g><title>flate2::mem::Compress::total_in (1 samples, 0.12%)</title><rect x="43.8515%" y="965" width="0.1160%" height="15" fill="rgb(232,209,1)" fg:x="378" fg:w="1"/><text x="44.1015%" y="975.50"></text></g><g><title>&lt;flate2::ffi::rust::Deflate as flate2::ffi::Backend&gt;::total_in (1 samples, 0.12%)</title><rect x="43.8515%" y="949" width="0.1160%" height="15" fill="rgb(232,6,1)" fg:x="378" fg:w="1"/><text x="44.1015%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="981" width="0.1160%" height="15" fill="rgb(210,224,50)" fg:x="379" fg:w="1"/><text x="44.2175%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="965" width="0.1160%" height="15" fill="rgb(228,127,35)" fg:x="379" fg:w="1"/><text x="44.2175%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="949" width="0.1160%" height="15" fill="rgb(245,102,45)" fg:x="379" fg:w="1"/><text x="44.2175%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="933" width="0.1160%" height="15" fill="rgb(214,1,49)" fg:x="379" fg:w="1"/><text x="44.2175%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="917" width="0.1160%" height="15" fill="rgb(226,163,40)" fg:x="379" fg:w="1"/><text x="44.2175%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="901" width="0.1160%" height="15" fill="rgb(239,212,28)" fg:x="379" fg:w="1"/><text x="44.2175%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="885" width="0.1160%" height="15" fill="rgb(220,20,13)" fg:x="379" fg:w="1"/><text x="44.2175%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="869" width="0.1160%" height="15" fill="rgb(210,164,35)" fg:x="379" fg:w="1"/><text x="44.2175%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="43.9675%" y="853" width="0.1160%" height="15" fill="rgb(248,109,41)" fg:x="379" fg:w="1"/><text x="44.2175%" y="863.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (68 samples, 7.89%)</title><rect x="36.4269%" y="1013" width="7.8886%" height="15" fill="rgb(238,23,50)" fg:x="314" fg:w="68"/><text x="36.6769%" y="1023.50">&lt;flate2::de..</text></g><g><title>flate2::zio::read (67 samples, 7.77%)</title><rect x="36.5429%" y="997" width="7.7726%" height="15" fill="rgb(211,48,49)" fg:x="315" fg:w="67"/><text x="36.7929%" y="1007.50">flate2::zio..</text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (2 samples, 0.23%)</title><rect x="44.0835%" y="981" width="0.2320%" height="15" fill="rgb(223,36,21)" fg:x="380" fg:w="2"/><text x="44.3335%" y="991.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (6 samples, 0.70%)</title><rect x="44.3155%" y="981" width="0.6961%" height="15" fill="rgb(207,123,46)" fg:x="382" fg:w="6"/><text x="44.5655%" y="991.50"></text></g><g><title>crc32fast::baseline::update_slow (5 samples, 0.58%)</title><rect x="44.4316%" y="965" width="0.5800%" height="15" fill="rgb(240,218,32)" fg:x="383" fg:w="5"/><text x="44.6816%" y="975.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.46%)</title><rect x="44.5476%" y="949" width="0.4640%" height="15" fill="rgb(252,5,43)" fg:x="384" fg:w="4"/><text x="44.7976%" y="959.50"></text></g><g><title>crc32fast::Hasher::update (7 samples, 0.81%)</title><rect x="44.3155%" y="1013" width="0.8121%" height="15" fill="rgb(252,84,19)" fg:x="382" fg:w="7"/><text x="44.5655%" y="1023.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (7 samples, 0.81%)</title><rect x="44.3155%" y="997" width="0.8121%" height="15" fill="rgb(243,152,39)" fg:x="382" fg:w="7"/><text x="44.5655%" y="1007.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.12%)</title><rect x="45.0116%" y="981" width="0.1160%" height="15" fill="rgb(234,160,15)" fg:x="388" fg:w="1"/><text x="45.2616%" y="991.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (94 samples, 10.90%)</title><rect x="34.4548%" y="1173" width="10.9049%" height="15" fill="rgb(237,34,20)" fg:x="297" fg:w="94"/><text x="34.7048%" y="1183.50">&lt;serde_json::rea..</text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (93 samples, 10.79%)</title><rect x="34.5708%" y="1157" width="10.7889%" height="15" fill="rgb(229,97,13)" fg:x="298" fg:w="93"/><text x="34.8208%" y="1167.50">serde_json::read..</text></g><g><title>serde_json::read::next_or_eof (92 samples, 10.67%)</title><rect x="34.6868%" y="1141" width="10.6729%" height="15" fill="rgb(234,71,50)" fg:x="299" fg:w="92"/><text x="34.9368%" y="1151.50">serde_json::read..</text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (92 samples, 10.67%)</title><rect x="34.6868%" y="1125" width="10.6729%" height="15" fill="rgb(253,155,4)" fg:x="299" fg:w="92"/><text x="34.9368%" y="1135.50">&lt;serde_json::rea..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 10.67%)</title><rect x="34.6868%" y="1109" width="10.6729%" height="15" fill="rgb(222,185,37)" fg:x="299" fg:w="92"/><text x="34.9368%" y="1119.50">&lt;serde_json::ite..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 10.21%)</title><rect x="35.1508%" y="1093" width="10.2088%" height="15" fill="rgb(251,177,13)" fg:x="303" fg:w="88"/><text x="35.4008%" y="1103.50">&lt;std::io::Bytes..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (88 samples, 10.21%)</title><rect x="35.1508%" y="1077" width="10.2088%" height="15" fill="rgb(250,179,40)" fg:x="303" fg:w="88"/><text x="35.4008%" y="1087.50">std::io::impls:..</text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (88 samples, 10.21%)</title><rect x="35.1508%" y="1061" width="10.2088%" height="15" fill="rgb(242,44,2)" fg:x="303" fg:w="88"/><text x="35.4008%" y="1071.50">&lt;flate2::gz::re..</text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (88 samples, 10.21%)</title><rect x="35.1508%" y="1045" width="10.2088%" height="15" fill="rgb(216,177,13)" fg:x="303" fg:w="88"/><text x="35.4008%" y="1055.50">&lt;flate2::gz::bu..</text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (79 samples, 9.16%)</title><rect x="36.1949%" y="1029" width="9.1647%" height="15" fill="rgb(216,106,43)" fg:x="312" fg:w="79"/><text x="36.4449%" y="1039.50">&lt;flate2::crc:..</text></g><g><title>flate2::crc::Crc::update (2 samples, 0.23%)</title><rect x="45.1276%" y="1013" width="0.2320%" height="15" fill="rgb(216,183,2)" fg:x="389" fg:w="2"/><text x="45.3776%" y="1023.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (99 samples, 11.48%)</title><rect x="34.1067%" y="1237" width="11.4849%" height="15" fill="rgb(249,75,3)" fg:x="294" fg:w="99"/><text x="34.3567%" y="1247.50">&lt;core::marker::Ph..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (99 samples, 11.48%)</title><rect x="34.1067%" y="1221" width="11.4849%" height="15" fill="rgb(219,67,39)" fg:x="294" fg:w="99"/><text x="34.3567%" y="1231.50">serde::de::impls:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (99 samples, 11.48%)</title><rect x="34.1067%" y="1205" width="11.4849%" height="15" fill="rgb(253,228,2)" fg:x="294" fg:w="99"/><text x="34.3567%" y="1215.50">&lt;&amp;mut serde_json:..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (99 samples, 11.48%)</title><rect x="34.1067%" y="1189" width="11.4849%" height="15" fill="rgb(235,138,27)" fg:x="294" fg:w="99"/><text x="34.3567%" y="1199.50">&lt;&amp;mut serde_json:..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.23%)</title><rect x="45.3596%" y="1173" width="0.2320%" height="15" fill="rgb(236,97,51)" fg:x="391" fg:w="2"/><text x="45.6096%" y="1183.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.23%)</title><rect x="45.3596%" y="1157" width="0.2320%" height="15" fill="rgb(240,80,30)" fg:x="391" fg:w="2"/><text x="45.6096%" y="1167.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (2 samples, 0.23%)</title><rect x="45.3596%" y="1141" width="0.2320%" height="15" fill="rgb(230,178,19)" fg:x="391" fg:w="2"/><text x="45.6096%" y="1151.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="45.3596%" y="1125" width="0.2320%" height="15" fill="rgb(210,190,27)" fg:x="391" fg:w="2"/><text x="45.6096%" y="1135.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="45.3596%" y="1109" width="0.2320%" height="15" fill="rgb(222,107,31)" fg:x="391" fg:w="2"/><text x="45.6096%" y="1119.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.12%)</title><rect x="45.4756%" y="1093" width="0.1160%" height="15" fill="rgb(216,127,34)" fg:x="392" fg:w="1"/><text x="45.7256%" y="1103.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="45.4756%" y="1077" width="0.1160%" height="15" fill="rgb(234,116,52)" fg:x="392" fg:w="1"/><text x="45.7256%" y="1087.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="45.4756%" y="1061" width="0.1160%" height="15" fill="rgb(222,124,15)" fg:x="392" fg:w="1"/><text x="45.7256%" y="1071.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="45.4756%" y="1045" width="0.1160%" height="15" fill="rgb(231,179,28)" fg:x="392" fg:w="1"/><text x="45.7256%" y="1055.50"></text></g><g><title>crc32fast::Hasher::update (1 samples, 0.12%)</title><rect x="45.4756%" y="1029" width="0.1160%" height="15" fill="rgb(226,93,45)" fg:x="392" fg:w="1"/><text x="45.7256%" y="1039.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.12%)</title><rect x="45.4756%" y="1013" width="0.1160%" height="15" fill="rgb(215,8,51)" fg:x="392" fg:w="1"/><text x="45.7256%" y="1023.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.12%)</title><rect x="45.4756%" y="997" width="0.1160%" height="15" fill="rgb(223,106,5)" fg:x="392" fg:w="1"/><text x="45.7256%" y="1007.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (1 samples, 0.12%)</title><rect x="45.5916%" y="1045" width="0.1160%" height="15" fill="rgb(250,191,5)" fg:x="393" fg:w="1"/><text x="45.8416%" y="1055.50"></text></g><g><title>core::cmp::min (1 samples, 0.12%)</title><rect x="45.5916%" y="1029" width="0.1160%" height="15" fill="rgb(242,132,44)" fg:x="393" fg:w="1"/><text x="45.8416%" y="1039.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.12%)</title><rect x="45.5916%" y="1013" width="0.1160%" height="15" fill="rgb(251,152,29)" fg:x="393" fg:w="1"/><text x="45.8416%" y="1023.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.12%)</title><rect x="45.5916%" y="997" width="0.1160%" height="15" fill="rgb(218,179,5)" fg:x="393" fg:w="1"/><text x="45.8416%" y="1007.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (143 samples, 16.59%)</title><rect x="29.2343%" y="1301" width="16.5893%" height="15" fill="rgb(227,67,19)" fg:x="252" fg:w="143"/><text x="29.4843%" y="1311.50">&lt;&amp;mut serde_json::de::Dese..</text></g><g><title>&lt;cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CpeName&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (142 samples, 16.47%)</title><rect x="29.3503%" y="1285" width="16.4733%" height="15" fill="rgb(233,119,31)" fg:x="253" fg:w="142"/><text x="29.6003%" y="1295.50">&lt;cve_ingest_rust::_::&lt;imp..</text></g><g><title>serde::de::MapAccess::next_value (101 samples, 11.72%)</title><rect x="34.1067%" y="1269" width="11.7169%" height="15" fill="rgb(241,120,22)" fg:x="294" fg:w="101"/><text x="34.3567%" y="1279.50">serde::de::MapAcc..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (101 samples, 11.72%)</title><rect x="34.1067%" y="1253" width="11.7169%" height="15" fill="rgb(224,102,30)" fg:x="294" fg:w="101"/><text x="34.3567%" y="1263.50">&lt;serde_json::de::..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (2 samples, 0.23%)</title><rect x="45.5916%" y="1237" width="0.2320%" height="15" fill="rgb(210,164,37)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1247.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (2 samples, 0.23%)</title><rect x="45.5916%" y="1221" width="0.2320%" height="15" fill="rgb(226,191,16)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1231.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (2 samples, 0.23%)</title><rect x="45.5916%" y="1205" width="0.2320%" height="15" fill="rgb(214,40,45)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1215.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (2 samples, 0.23%)</title><rect x="45.5916%" y="1189" width="0.2320%" height="15" fill="rgb(244,29,26)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1199.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="45.5916%" y="1173" width="0.2320%" height="15" fill="rgb(216,16,5)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1183.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="45.5916%" y="1157" width="0.2320%" height="15" fill="rgb(249,76,35)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1167.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (2 samples, 0.23%)</title><rect x="45.5916%" y="1141" width="0.2320%" height="15" fill="rgb(207,11,44)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1151.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.23%)</title><rect x="45.5916%" y="1125" width="0.2320%" height="15" fill="rgb(228,190,49)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1135.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.23%)</title><rect x="45.5916%" y="1109" width="0.2320%" height="15" fill="rgb(214,173,12)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1119.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.23%)</title><rect x="45.5916%" y="1093" width="0.2320%" height="15" fill="rgb(218,26,35)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1103.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.23%)</title><rect x="45.5916%" y="1077" width="0.2320%" height="15" fill="rgb(220,200,19)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1087.50"></text></g><g><title>flate2::zio::read (2 samples, 0.23%)</title><rect x="45.5916%" y="1061" width="0.2320%" height="15" fill="rgb(239,95,49)" fg:x="393" fg:w="2"/><text x="45.8416%" y="1071.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (1 samples, 0.12%)</title><rect x="45.7077%" y="1045" width="0.1160%" height="15" fill="rgb(235,85,53)" fg:x="394" fg:w="1"/><text x="45.9577%" y="1055.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (144 samples, 16.71%)</title><rect x="29.2343%" y="1333" width="16.7053%" height="15" fill="rgb(233,133,31)" fg:x="252" fg:w="144"/><text x="29.4843%" y="1343.50">&lt;core::marker::PhantomData..</text></g><g><title>cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CpeName&gt;::deserialize (144 samples, 16.71%)</title><rect x="29.2343%" y="1317" width="16.7053%" height="15" fill="rgb(218,25,20)" fg:x="252" fg:w="144"/><text x="29.4843%" y="1327.50">cve_ingest_rust::_::&lt;impl ..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="45.8237%" y="1301" width="0.1160%" height="15" fill="rgb(252,210,38)" fg:x="395" fg:w="1"/><text x="46.0737%" y="1311.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.12%)</title><rect x="45.8237%" y="1285" width="0.1160%" height="15" fill="rgb(242,134,21)" fg:x="395" fg:w="1"/><text x="46.0737%" y="1295.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="45.8237%" y="1269" width="0.1160%" height="15" fill="rgb(213,28,48)" fg:x="395" fg:w="1"/><text x="46.0737%" y="1279.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.12%)</title><rect x="45.8237%" y="1253" width="0.1160%" height="15" fill="rgb(250,196,2)" fg:x="395" fg:w="1"/><text x="46.0737%" y="1263.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (1 samples, 0.12%)</title><rect x="46.4037%" y="1125" width="0.1160%" height="15" fill="rgb(227,5,17)" fg:x="400" fg:w="1"/><text x="46.6537%" y="1135.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1 samples, 0.12%)</title><rect x="46.4037%" y="1109" width="0.1160%" height="15" fill="rgb(221,226,24)" fg:x="400" fg:w="1"/><text x="46.6537%" y="1119.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (1 samples, 0.12%)</title><rect x="46.4037%" y="1093" width="0.1160%" height="15" fill="rgb(211,5,48)" fg:x="400" fg:w="1"/><text x="46.6537%" y="1103.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.58%)</title><rect x="46.0557%" y="1189" width="0.5800%" height="15" fill="rgb(219,150,6)" fg:x="397" fg:w="5"/><text x="46.3057%" y="1199.50"></text></g><g><title>flate2::zio::read (5 samples, 0.58%)</title><rect x="46.0557%" y="1173" width="0.5800%" height="15" fill="rgb(251,46,16)" fg:x="397" fg:w="5"/><text x="46.3057%" y="1183.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (3 samples, 0.35%)</title><rect x="46.2877%" y="1157" width="0.3480%" height="15" fill="rgb(220,204,40)" fg:x="399" fg:w="3"/><text x="46.5377%" y="1167.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (2 samples, 0.23%)</title><rect x="46.4037%" y="1141" width="0.2320%" height="15" fill="rgb(211,85,2)" fg:x="400" fg:w="2"/><text x="46.6537%" y="1151.50"></text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (1 samples, 0.12%)</title><rect x="46.5197%" y="1125" width="0.1160%" height="15" fill="rgb(229,17,7)" fg:x="401" fg:w="1"/><text x="46.7697%" y="1135.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (153 samples, 17.75%)</title><rect x="29.0023%" y="1381" width="17.7494%" height="15" fill="rgb(239,72,28)" fg:x="250" fg:w="153"/><text x="29.2523%" y="1391.50">&lt;serde::de::impls::&lt;impl ser..</text></g><g><title>serde::de::SeqAccess::next_element (151 samples, 17.52%)</title><rect x="29.2343%" y="1365" width="17.5174%" height="15" fill="rgb(230,47,54)" fg:x="252" fg:w="151"/><text x="29.4843%" y="1375.50">serde::de::SeqAccess::next_..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (151 samples, 17.52%)</title><rect x="29.2343%" y="1349" width="17.5174%" height="15" fill="rgb(214,50,8)" fg:x="252" fg:w="151"/><text x="29.4843%" y="1359.50">&lt;serde_json::de::SeqAccess&lt;..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (7 samples, 0.81%)</title><rect x="45.9397%" y="1333" width="0.8121%" height="15" fill="rgb(216,198,43)" fg:x="396" fg:w="7"/><text x="46.1897%" y="1343.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (7 samples, 0.81%)</title><rect x="45.9397%" y="1317" width="0.8121%" height="15" fill="rgb(234,20,35)" fg:x="396" fg:w="7"/><text x="46.1897%" y="1327.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (7 samples, 0.81%)</title><rect x="45.9397%" y="1301" width="0.8121%" height="15" fill="rgb(254,45,19)" fg:x="396" fg:w="7"/><text x="46.1897%" y="1311.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.81%)</title><rect x="45.9397%" y="1285" width="0.8121%" height="15" fill="rgb(219,14,44)" fg:x="396" fg:w="7"/><text x="46.1897%" y="1295.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.70%)</title><rect x="46.0557%" y="1269" width="0.6961%" height="15" fill="rgb(217,220,26)" fg:x="397" fg:w="6"/><text x="46.3057%" y="1279.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (6 samples, 0.70%)</title><rect x="46.0557%" y="1253" width="0.6961%" height="15" fill="rgb(213,158,28)" fg:x="397" fg:w="6"/><text x="46.3057%" y="1263.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.70%)</title><rect x="46.0557%" y="1237" width="0.6961%" height="15" fill="rgb(252,51,52)" fg:x="397" fg:w="6"/><text x="46.3057%" y="1247.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.70%)</title><rect x="46.0557%" y="1221" width="0.6961%" height="15" fill="rgb(246,89,16)" fg:x="397" fg:w="6"/><text x="46.3057%" y="1231.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.70%)</title><rect x="46.0557%" y="1205" width="0.6961%" height="15" fill="rgb(216,158,49)" fg:x="397" fg:w="6"/><text x="46.3057%" y="1215.50"></text></g><g><title>crc32fast::Hasher::update (1 samples, 0.12%)</title><rect x="46.6357%" y="1189" width="0.1160%" height="15" fill="rgb(236,107,19)" fg:x="402" fg:w="1"/><text x="46.8857%" y="1199.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.12%)</title><rect x="46.6357%" y="1173" width="0.1160%" height="15" fill="rgb(228,185,30)" fg:x="402" fg:w="1"/><text x="46.8857%" y="1183.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.12%)</title><rect x="46.6357%" y="1157" width="0.1160%" height="15" fill="rgb(246,134,8)" fg:x="402" fg:w="1"/><text x="46.8857%" y="1167.50"></text></g><g><title>crc32fast::baseline::update_slow (1 samples, 0.12%)</title><rect x="46.6357%" y="1141" width="0.1160%" height="15" fill="rgb(214,143,50)" fg:x="402" fg:w="1"/><text x="46.8857%" y="1151.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="46.6357%" y="1125" width="0.1160%" height="15" fill="rgb(228,75,8)" fg:x="402" fg:w="1"/><text x="46.8857%" y="1135.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (168 samples, 19.49%)</title><rect x="27.3782%" y="1429" width="19.4896%" height="15" fill="rgb(207,175,4)" fg:x="236" fg:w="168"/><text x="27.6282%" y="1439.50">&lt;core::marker::PhantomData&lt;T&gt; a..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (154 samples, 17.87%)</title><rect x="29.0023%" y="1413" width="17.8654%" height="15" fill="rgb(205,108,24)" fg:x="250" fg:w="154"/><text x="29.2523%" y="1423.50">serde::de::impls::&lt;impl serd..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (154 samples, 17.87%)</title><rect x="29.0023%" y="1397" width="17.8654%" height="15" fill="rgb(244,120,49)" fg:x="250" fg:w="154"/><text x="29.2523%" y="1407.50">&lt;&amp;mut serde_json::de::Deseri..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.12%)</title><rect x="46.7517%" y="1381" width="0.1160%" height="15" fill="rgb(223,47,38)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1391.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.12%)</title><rect x="46.7517%" y="1365" width="0.1160%" height="15" fill="rgb(229,179,11)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1375.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.12%)</title><rect x="46.7517%" y="1349" width="0.1160%" height="15" fill="rgb(231,122,1)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1359.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="46.7517%" y="1333" width="0.1160%" height="15" fill="rgb(245,119,9)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1343.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="46.7517%" y="1317" width="0.1160%" height="15" fill="rgb(241,163,25)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1327.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.12%)</title><rect x="46.7517%" y="1301" width="0.1160%" height="15" fill="rgb(217,214,3)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1311.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="46.7517%" y="1285" width="0.1160%" height="15" fill="rgb(240,86,28)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1295.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="46.7517%" y="1269" width="0.1160%" height="15" fill="rgb(215,47,9)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1279.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="46.7517%" y="1253" width="0.1160%" height="15" fill="rgb(252,25,45)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1263.50"></text></g><g><title>crc32fast::Hasher::update (1 samples, 0.12%)</title><rect x="46.7517%" y="1237" width="0.1160%" height="15" fill="rgb(251,164,9)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1247.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.12%)</title><rect x="46.7517%" y="1221" width="0.1160%" height="15" fill="rgb(233,194,0)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1231.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.12%)</title><rect x="46.7517%" y="1205" width="0.1160%" height="15" fill="rgb(249,111,24)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1215.50"></text></g><g><title>crc32fast::baseline::update_slow (1 samples, 0.12%)</title><rect x="46.7517%" y="1189" width="0.1160%" height="15" fill="rgb(250,223,3)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1199.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="46.7517%" y="1173" width="0.1160%" height="15" fill="rgb(236,178,37)" fg:x="403" fg:w="1"/><text x="47.0017%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 21.00%)</title><rect x="25.9861%" y="1573" width="20.9977%" height="15" fill="rgb(241,158,50)" fg:x="224" fg:w="181"/><text x="26.2361%" y="1583.50">&lt;core::iter::adapters::take::Take..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 21.00%)</title><rect x="25.9861%" y="1557" width="20.9977%" height="15" fill="rgb(213,121,41)" fg:x="224" fg:w="181"/><text x="26.2361%" y="1567.50">&lt;core::iter::adapters::map::Map&lt;I..</text></g><g><title>&lt;jsonit::reader::JsonSeqIterator&lt;R,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 21.00%)</title><rect x="25.9861%" y="1541" width="20.9977%" height="15" fill="rgb(240,92,3)" fg:x="224" fg:w="181"/><text x="26.2361%" y="1551.50">&lt;jsonit::reader::JsonSeqIterator&lt;..</text></g><g><title>jsonit::reader::JsonSeqIterator&lt;R,O&gt;::deserialize_one_item (181 samples, 21.00%)</title><rect x="25.9861%" y="1525" width="20.9977%" height="15" fill="rgb(205,123,3)" fg:x="224" fg:w="181"/><text x="26.2361%" y="1535.50">jsonit::reader::JsonSeqIterator&lt;R..</text></g><g><title>cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CPE&gt;::deserialize (181 samples, 21.00%)</title><rect x="25.9861%" y="1509" width="20.9977%" height="15" fill="rgb(205,97,47)" fg:x="224" fg:w="181"/><text x="26.2361%" y="1519.50">cve_ingest_rust::_::&lt;impl serde::..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (181 samples, 21.00%)</title><rect x="25.9861%" y="1493" width="20.9977%" height="15" fill="rgb(247,152,14)" fg:x="224" fg:w="181"/><text x="26.2361%" y="1503.50">&lt;&amp;mut serde_json::de::Deserialize..</text></g><g><title>&lt;cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CPE&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (181 samples, 21.00%)</title><rect x="25.9861%" y="1477" width="20.9977%" height="15" fill="rgb(248,195,53)" fg:x="224" fg:w="181"/><text x="26.2361%" y="1487.50">&lt;cve_ingest_rust::_::&lt;impl serde:..</text></g><g><title>serde::de::MapAccess::next_value (169 samples, 19.61%)</title><rect x="27.3782%" y="1461" width="19.6056%" height="15" fill="rgb(226,201,16)" fg:x="236" fg:w="169"/><text x="27.6282%" y="1471.50">serde::de::MapAccess::next_value</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (169 samples, 19.61%)</title><rect x="27.3782%" y="1445" width="19.6056%" height="15" fill="rgb(205,98,0)" fg:x="236" fg:w="169"/><text x="27.6282%" y="1455.50">&lt;serde_json::de::MapAccess&lt;R&gt; a..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.12%)</title><rect x="46.8677%" y="1429" width="0.1160%" height="15" fill="rgb(214,191,48)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1439.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (1 samples, 0.12%)</title><rect x="46.8677%" y="1413" width="0.1160%" height="15" fill="rgb(237,112,39)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1423.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.12%)</title><rect x="46.8677%" y="1397" width="0.1160%" height="15" fill="rgb(247,203,27)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1407.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.12%)</title><rect x="46.8677%" y="1381" width="0.1160%" height="15" fill="rgb(235,124,28)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1391.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="46.8677%" y="1365" width="0.1160%" height="15" fill="rgb(208,207,46)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1375.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="46.8677%" y="1349" width="0.1160%" height="15" fill="rgb(234,176,4)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1359.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.12%)</title><rect x="46.8677%" y="1333" width="0.1160%" height="15" fill="rgb(230,133,28)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1343.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="46.8677%" y="1317" width="0.1160%" height="15" fill="rgb(211,137,40)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1327.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="46.8677%" y="1301" width="0.1160%" height="15" fill="rgb(254,35,13)" fg:x="404" fg:w="1"/><text x="47.1177%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.23%)</title><rect x="46.9838%" y="1573" width="0.2320%" height="15" fill="rgb(225,49,51)" fg:x="405" fg:w="2"/><text x="47.2338%" y="1583.50"></text></g><g><title>core::ptr::write (2 samples, 0.23%)</title><rect x="46.9838%" y="1557" width="0.2320%" height="15" fill="rgb(251,10,15)" fg:x="405" fg:w="2"/><text x="47.2338%" y="1567.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.23%)</title><rect x="46.9838%" y="1541" width="0.2320%" height="15" fill="rgb(228,207,15)" fg:x="405" fg:w="2"/><text x="47.2338%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1525" width="0.1160%" height="15" fill="rgb(241,99,19)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1509" width="0.1160%" height="15" fill="rgb(207,104,49)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1493" width="0.1160%" height="15" fill="rgb(234,99,18)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1477" width="0.1160%" height="15" fill="rgb(213,191,49)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1461" width="0.1160%" height="15" fill="rgb(210,226,19)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1445" width="0.1160%" height="15" fill="rgb(229,97,18)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1429" width="0.1160%" height="15" fill="rgb(211,167,15)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1413" width="0.1160%" height="15" fill="rgb(210,169,34)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1397" width="0.1160%" height="15" fill="rgb(241,121,31)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1381" width="0.1160%" height="15" fill="rgb(232,40,11)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.0998%" y="1365" width="0.1160%" height="15" fill="rgb(205,86,26)" fg:x="406" fg:w="1"/><text x="47.3498%" y="1375.50"></text></g><g><title>bson::document::Document::insert (1 samples, 0.12%)</title><rect x="47.2158%" y="1557" width="0.1160%" height="15" fill="rgb(231,126,28)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1567.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.12%)</title><rect x="47.2158%" y="1541" width="0.1160%" height="15" fill="rgb(219,221,18)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1551.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.12%)</title><rect x="47.2158%" y="1525" width="0.1160%" height="15" fill="rgb(211,40,0)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1535.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.12%)</title><rect x="47.2158%" y="1509" width="0.1160%" height="15" fill="rgb(239,85,43)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1519.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.12%)</title><rect x="47.2158%" y="1493" width="0.1160%" height="15" fill="rgb(231,55,21)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1503.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.12%)</title><rect x="47.2158%" y="1477" width="0.1160%" height="15" fill="rgb(225,184,43)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1487.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="47.2158%" y="1461" width="0.1160%" height="15" fill="rgb(251,158,41)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1471.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="47.2158%" y="1445" width="0.1160%" height="15" fill="rgb(234,159,37)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1455.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="47.2158%" y="1429" width="0.1160%" height="15" fill="rgb(216,204,22)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="47.2158%" y="1413" width="0.1160%" height="15" fill="rgb(214,17,3)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="47.2158%" y="1397" width="0.1160%" height="15" fill="rgb(212,111,17)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="47.2158%" y="1381" width="0.1160%" height="15" fill="rgb(221,157,24)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="47.2158%" y="1365" width="0.1160%" height="15" fill="rgb(252,16,13)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1375.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="47.2158%" y="1349" width="0.1160%" height="15" fill="rgb(221,62,2)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1359.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="47.2158%" y="1333" width="0.1160%" height="15" fill="rgb(247,87,22)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1343.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="47.2158%" y="1317" width="0.1160%" height="15" fill="rgb(215,73,9)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1327.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="47.2158%" y="1301" width="0.1160%" height="15" fill="rgb(207,175,33)" fg:x="407" fg:w="1"/><text x="47.4658%" y="1311.50"></text></g><g><title>async_io::driver::block_on (185 samples, 21.46%)</title><rect x="25.9861%" y="1781" width="21.4617%" height="15" fill="rgb(243,129,54)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1791.50">async_io::driver::block_on</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (185 samples, 21.46%)</title><rect x="25.9861%" y="1765" width="21.4617%" height="15" fill="rgb(227,119,45)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1775.50">async_executor::LocalExecutor::run..</text></g><g><title>async_executor::Executor::run::{{closure}} (185 samples, 21.46%)</title><rect x="25.9861%" y="1749" width="21.4617%" height="15" fill="rgb(205,109,36)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1759.50">async_executor::Executor::run::{{c..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (185 samples, 21.46%)</title><rect x="25.9861%" y="1733" width="21.4617%" height="15" fill="rgb(205,6,39)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1743.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (185 samples, 21.46%)</title><rect x="25.9861%" y="1717" width="21.4617%" height="15" fill="rgb(221,32,16)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1727.50">&lt;async_std::task::builder::Support..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (185 samples, 21.46%)</title><rect x="25.9861%" y="1701" width="21.4617%" height="15" fill="rgb(228,144,50)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1711.50">async_std::task::task_locals_wrapp..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (185 samples, 21.46%)</title><rect x="25.9861%" y="1685" width="21.4617%" height="15" fill="rgb(229,201,53)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1695.50">std::thread::local::LocalKey&lt;T&gt;::w..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (185 samples, 21.46%)</title><rect x="25.9861%" y="1669" width="21.4617%" height="15" fill="rgb(249,153,27)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1679.50">std::thread::local::LocalKey&lt;T&gt;::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (185 samples, 21.46%)</title><rect x="25.9861%" y="1653" width="21.4617%" height="15" fill="rgb(227,106,25)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1663.50">async_std::task::task_locals_wrapp..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (185 samples, 21.46%)</title><rect x="25.9861%" y="1637" width="21.4617%" height="15" fill="rgb(230,65,29)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1647.50">&lt;async_std::task::builder::Support..</text></g><g><title>cve_ingest_rust::main::{{closure}} (185 samples, 21.46%)</title><rect x="25.9861%" y="1621" width="21.4617%" height="15" fill="rgb(221,57,46)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1631.50">cve_ingest_rust::main::{{closure}}</text></g><g><title>cve_ingest_rust::main::main::{{closure}} (185 samples, 21.46%)</title><rect x="25.9861%" y="1605" width="21.4617%" height="15" fill="rgb(229,161,17)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1615.50">cve_ingest_rust::main::main::{{clo..</text></g><g><title>cve_ingest_rust::update_cpes::{{closure}} (185 samples, 21.46%)</title><rect x="25.9861%" y="1589" width="21.4617%" height="15" fill="rgb(222,213,11)" fg:x="224" fg:w="185"/><text x="26.2361%" y="1599.50">cve_ingest_rust::update_cpes::{{cl..</text></g><g><title>cve_ingest_rust::prepare_bulk_operation (2 samples, 0.23%)</title><rect x="47.2158%" y="1573" width="0.2320%" height="15" fill="rgb(235,35,13)" fg:x="407" fg:w="2"/><text x="47.4658%" y="1583.50"></text></g><g><title>bson::ser::to_document (1 samples, 0.12%)</title><rect x="47.3318%" y="1557" width="0.1160%" height="15" fill="rgb(233,158,34)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1567.50"></text></g><g><title>bson::ser::to_document_with_options (1 samples, 0.12%)</title><rect x="47.3318%" y="1541" width="0.1160%" height="15" fill="rgb(215,151,48)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1551.50"></text></g><g><title>bson::ser::to_bson_with_options (1 samples, 0.12%)</title><rect x="47.3318%" y="1525" width="0.1160%" height="15" fill="rgb(229,84,14)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1535.50"></text></g><g><title>cve_ingest_rust::_::&lt;impl serde::ser::Serialize for cve_ingest_rust::CPE&gt;::serialize (1 samples, 0.12%)</title><rect x="47.3318%" y="1509" width="0.1160%" height="15" fill="rgb(229,68,14)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1519.50"></text></g><g><title>&lt;bson::ser::serde::StructSerializer as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.12%)</title><rect x="47.3318%" y="1493" width="0.1160%" height="15" fill="rgb(243,106,26)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1503.50"></text></g><g><title>bson::ser::to_bson_with_options (1 samples, 0.12%)</title><rect x="47.3318%" y="1477" width="0.1160%" height="15" fill="rgb(206,45,38)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1487.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.12%)</title><rect x="47.3318%" y="1461" width="0.1160%" height="15" fill="rgb(226,6,15)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1471.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.12%)</title><rect x="47.3318%" y="1445" width="0.1160%" height="15" fill="rgb(232,22,54)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1455.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.12%)</title><rect x="47.3318%" y="1429" width="0.1160%" height="15" fill="rgb(229,222,32)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1439.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.12%)</title><rect x="47.3318%" y="1413" width="0.1160%" height="15" fill="rgb(228,62,29)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1423.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 0.12%)</title><rect x="47.3318%" y="1397" width="0.1160%" height="15" fill="rgb(251,103,34)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1407.50"></text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (1 samples, 0.12%)</title><rect x="47.3318%" y="1381" width="0.1160%" height="15" fill="rgb(233,12,30)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1391.50"></text></g><g><title>&lt;bson::ser::serde::ArraySerializer as serde::ser::SerializeSeq&gt;::serialize_element (1 samples, 0.12%)</title><rect x="47.3318%" y="1365" width="0.1160%" height="15" fill="rgb(238,52,0)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="47.3318%" y="1349" width="0.1160%" height="15" fill="rgb(223,98,5)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1359.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="47.3318%" y="1333" width="0.1160%" height="15" fill="rgb(228,75,37)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1317" width="0.1160%" height="15" fill="rgb(205,115,49)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1301" width="0.1160%" height="15" fill="rgb(250,154,43)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1285" width="0.1160%" height="15" fill="rgb(226,43,29)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1269" width="0.1160%" height="15" fill="rgb(249,228,39)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1253" width="0.1160%" height="15" fill="rgb(216,79,43)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1237" width="0.1160%" height="15" fill="rgb(228,95,12)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1221" width="0.1160%" height="15" fill="rgb(249,221,15)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1205" width="0.1160%" height="15" fill="rgb(233,34,13)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="47.3318%" y="1189" width="0.1160%" height="15" fill="rgb(214,103,39)" fg:x="408" fg:w="1"/><text x="47.5818%" y="1199.50"></text></g><g><title>__GI___mmap64 (8 samples, 0.93%)</title><rect x="47.4478%" y="1349" width="0.9281%" height="15" fill="rgb(251,126,39)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1359.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1333" width="0.9281%" height="15" fill="rgb(214,216,36)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1343.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1317" width="0.9281%" height="15" fill="rgb(220,221,8)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1327.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1301" width="0.9281%" height="15" fill="rgb(240,216,3)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1311.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1285" width="0.9281%" height="15" fill="rgb(232,218,17)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1295.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1269" width="0.9281%" height="15" fill="rgb(229,163,45)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1279.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1253" width="0.9281%" height="15" fill="rgb(231,110,42)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1263.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1237" width="0.9281%" height="15" fill="rgb(208,170,48)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1247.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1221" width="0.9281%" height="15" fill="rgb(239,116,25)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1231.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1205" width="0.9281%" height="15" fill="rgb(219,200,50)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1215.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1189" width="0.9281%" height="15" fill="rgb(245,200,0)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1173" width="0.9281%" height="15" fill="rgb(245,119,33)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1183.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1157" width="0.9281%" height="15" fill="rgb(231,125,12)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1167.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1141" width="0.9281%" height="15" fill="rgb(216,96,41)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1151.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1125" width="0.9281%" height="15" fill="rgb(248,43,45)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="47.4478%" y="1109" width="0.9281%" height="15" fill="rgb(217,222,7)" fg:x="409" fg:w="8"/><text x="47.6978%" y="1119.50"></text></g><g><title>allocate_stack (9 samples, 1.04%)</title><rect x="47.4478%" y="1365" width="1.0441%" height="15" fill="rgb(233,28,6)" fg:x="409" fg:w="9"/><text x="47.6978%" y="1375.50"></text></g><g><title>setup_stack_prot (1 samples, 0.12%)</title><rect x="48.3759%" y="1349" width="0.1160%" height="15" fill="rgb(231,218,15)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1359.50"></text></g><g><title>__GI___mprotect (1 samples, 0.12%)</title><rect x="48.3759%" y="1333" width="0.1160%" height="15" fill="rgb(226,171,48)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1317" width="0.1160%" height="15" fill="rgb(235,201,9)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1301" width="0.1160%" height="15" fill="rgb(217,80,15)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1285" width="0.1160%" height="15" fill="rgb(219,152,8)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1269" width="0.1160%" height="15" fill="rgb(243,107,38)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1253" width="0.1160%" height="15" fill="rgb(231,17,5)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1237" width="0.1160%" height="15" fill="rgb(209,25,54)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1221" width="0.1160%" height="15" fill="rgb(219,0,2)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1205" width="0.1160%" height="15" fill="rgb(246,9,5)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1189" width="0.1160%" height="15" fill="rgb(226,159,4)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="48.3759%" y="1173" width="0.1160%" height="15" fill="rgb(219,175,34)" fg:x="417" fg:w="1"/><text x="48.6259%" y="1183.50"></text></g><g><title>async_std::task::builder::Builder::build (19 samples, 2.20%)</title><rect x="47.4478%" y="1765" width="2.2042%" height="15" fill="rgb(236,10,46)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1775.50">a..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (19 samples, 2.20%)</title><rect x="47.4478%" y="1749" width="2.2042%" height="15" fill="rgb(240,211,16)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1759.50">o..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (19 samples, 2.20%)</title><rect x="47.4478%" y="1733" width="2.2042%" height="15" fill="rgb(205,3,43)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1743.50">o..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (19 samples, 2.20%)</title><rect x="47.4478%" y="1717" width="2.2042%" height="15" fill="rgb(245,7,22)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1727.50">o..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (19 samples, 2.20%)</title><rect x="47.4478%" y="1701" width="2.2042%" height="15" fill="rgb(239,132,32)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1711.50">o..</text></g><g><title>once_cell::imp::initialize_or_wait (19 samples, 2.20%)</title><rect x="47.4478%" y="1685" width="2.2042%" height="15" fill="rgb(228,202,34)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1695.50">o..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 2.20%)</title><rect x="47.4478%" y="1669" width="2.2042%" height="15" fill="rgb(254,200,22)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1679.50">c..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (19 samples, 2.20%)</title><rect x="47.4478%" y="1653" width="2.2042%" height="15" fill="rgb(219,10,39)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1663.50">o..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (19 samples, 2.20%)</title><rect x="47.4478%" y="1637" width="2.2042%" height="15" fill="rgb(226,210,39)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1647.50">o..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (19 samples, 2.20%)</title><rect x="47.4478%" y="1621" width="2.2042%" height="15" fill="rgb(208,219,16)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1631.50">o..</text></g><g><title>core::ops::function::FnOnce::call_once (19 samples, 2.20%)</title><rect x="47.4478%" y="1605" width="2.2042%" height="15" fill="rgb(216,158,51)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1615.50">c..</text></g><g><title>core::ops::function::FnOnce::call_once (19 samples, 2.20%)</title><rect x="47.4478%" y="1589" width="2.2042%" height="15" fill="rgb(233,14,44)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1599.50">c..</text></g><g><title>async_std::rt::RUNTIME::{{closure}} (19 samples, 2.20%)</title><rect x="47.4478%" y="1573" width="2.2042%" height="15" fill="rgb(237,97,39)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1583.50">a..</text></g><g><title>async_global_executor::init::init_with_config (19 samples, 2.20%)</title><rect x="47.4478%" y="1557" width="2.2042%" height="15" fill="rgb(218,198,43)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1567.50">a..</text></g><g><title>async_global_executor::init::init (19 samples, 2.20%)</title><rect x="47.4478%" y="1541" width="2.2042%" height="15" fill="rgb(231,104,20)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1551.50">a..</text></g><g><title>async_global_executor::reactor::block_on (19 samples, 2.20%)</title><rect x="47.4478%" y="1525" width="2.2042%" height="15" fill="rgb(254,36,13)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1535.50">a..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (19 samples, 2.20%)</title><rect x="47.4478%" y="1509" width="2.2042%" height="15" fill="rgb(248,14,50)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1519.50">a..</text></g><g><title>async_io::driver::block_on (19 samples, 2.20%)</title><rect x="47.4478%" y="1493" width="2.2042%" height="15" fill="rgb(217,107,29)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1503.50">a..</text></g><g><title>async_global_executor::init::init::{{closure}} (19 samples, 2.20%)</title><rect x="47.4478%" y="1477" width="2.2042%" height="15" fill="rgb(251,169,33)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1487.50">a..</text></g><g><title>async_global_executor::threading::spawn_more_threads::{{closure}} (19 samples, 2.20%)</title><rect x="47.4478%" y="1461" width="2.2042%" height="15" fill="rgb(217,108,32)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1471.50">a..</text></g><g><title>std::thread::Builder::spawn (19 samples, 2.20%)</title><rect x="47.4478%" y="1445" width="2.2042%" height="15" fill="rgb(219,66,42)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1455.50">s..</text></g><g><title>std::thread::Builder::spawn_unchecked (19 samples, 2.20%)</title><rect x="47.4478%" y="1429" width="2.2042%" height="15" fill="rgb(206,180,7)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1439.50">s..</text></g><g><title>std::thread::Builder::spawn_unchecked_ (19 samples, 2.20%)</title><rect x="47.4478%" y="1413" width="2.2042%" height="15" fill="rgb(208,226,31)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1423.50">s..</text></g><g><title>std::sys::unix::thread::Thread::new (19 samples, 2.20%)</title><rect x="47.4478%" y="1397" width="2.2042%" height="15" fill="rgb(218,26,49)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1407.50">s..</text></g><g><title>__pthread_create_2_1 (19 samples, 2.20%)</title><rect x="47.4478%" y="1381" width="2.2042%" height="15" fill="rgb(233,197,48)" fg:x="409" fg:w="19"/><text x="47.6978%" y="1391.50">_..</text></g><g><title>create_thread (10 samples, 1.16%)</title><rect x="48.4919%" y="1365" width="1.1601%" height="15" fill="rgb(252,181,51)" fg:x="418" fg:w="10"/><text x="48.7419%" y="1375.50"></text></g><g><title>__GI___clone (10 samples, 1.16%)</title><rect x="48.4919%" y="1349" width="1.1601%" height="15" fill="rgb(253,90,19)" fg:x="418" fg:w="10"/><text x="48.7419%" y="1359.50"></text></g><g><title>[unknown] (10 samples, 1.16%)</title><rect x="48.4919%" y="1333" width="1.1601%" height="15" fill="rgb(215,171,30)" fg:x="418" fg:w="10"/><text x="48.7419%" y="1343.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="48.6079%" y="1317" width="1.0441%" height="15" fill="rgb(214,222,9)" fg:x="419" fg:w="9"/><text x="48.8579%" y="1327.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="48.6079%" y="1301" width="1.0441%" height="15" fill="rgb(223,3,22)" fg:x="419" fg:w="9"/><text x="48.8579%" y="1311.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="48.6079%" y="1285" width="1.0441%" height="15" fill="rgb(225,196,46)" fg:x="419" fg:w="9"/><text x="48.8579%" y="1295.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="48.6079%" y="1269" width="1.0441%" height="15" fill="rgb(209,110,37)" fg:x="419" fg:w="9"/><text x="48.8579%" y="1279.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="48.6079%" y="1253" width="1.0441%" height="15" fill="rgb(249,89,12)" fg:x="419" fg:w="9"/><text x="48.8579%" y="1263.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="48.6079%" y="1237" width="1.0441%" height="15" fill="rgb(226,27,33)" fg:x="419" fg:w="9"/><text x="48.8579%" y="1247.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="48.6079%" y="1221" width="1.0441%" height="15" fill="rgb(213,82,22)" fg:x="419" fg:w="9"/><text x="48.8579%" y="1231.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="48.7239%" y="1205" width="0.9281%" height="15" fill="rgb(248,140,0)" fg:x="420" fg:w="8"/><text x="48.9739%" y="1215.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="48.7239%" y="1189" width="0.9281%" height="15" fill="rgb(228,106,3)" fg:x="420" fg:w="8"/><text x="48.9739%" y="1199.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="48.7239%" y="1173" width="0.9281%" height="15" fill="rgb(209,23,37)" fg:x="420" fg:w="8"/><text x="48.9739%" y="1183.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="48.8399%" y="1157" width="0.8121%" height="15" fill="rgb(241,93,50)" fg:x="421" fg:w="7"/><text x="49.0899%" y="1167.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="48.8399%" y="1141" width="0.8121%" height="15" fill="rgb(253,46,43)" fg:x="421" fg:w="7"/><text x="49.0899%" y="1151.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="48.8399%" y="1125" width="0.8121%" height="15" fill="rgb(226,206,43)" fg:x="421" fg:w="7"/><text x="49.0899%" y="1135.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="50.0000%" y="1189" width="0.1160%" height="15" fill="rgb(217,54,7)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="50.0000%" y="1173" width="0.1160%" height="15" fill="rgb(223,5,52)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1183.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="50.0000%" y="1157" width="0.1160%" height="15" fill="rgb(206,52,46)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1167.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="50.0000%" y="1141" width="0.1160%" height="15" fill="rgb(253,136,11)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1151.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="50.0000%" y="1125" width="0.1160%" height="15" fill="rgb(208,106,33)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1135.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.12%)</title><rect x="50.0000%" y="1109" width="0.1160%" height="15" fill="rgb(206,54,4)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1119.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="50.0000%" y="1093" width="0.1160%" height="15" fill="rgb(213,3,15)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1103.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="50.0000%" y="1077" width="0.1160%" height="15" fill="rgb(252,211,39)" fg:x="431" fg:w="1"/><text x="50.2500%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1 samples, 0.12%)</title><rect x="50.3480%" y="1029" width="0.1160%" height="15" fill="rgb(223,6,36)" fg:x="434" fg:w="1"/><text x="50.5980%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.12%)</title><rect x="50.3480%" y="1013" width="0.1160%" height="15" fill="rgb(252,169,45)" fg:x="434" fg:w="1"/><text x="50.5980%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.12%)</title><rect x="50.3480%" y="997" width="0.1160%" height="15" fill="rgb(212,48,26)" fg:x="434" fg:w="1"/><text x="50.5980%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.12%)</title><rect x="50.3480%" y="981" width="0.1160%" height="15" fill="rgb(251,102,48)" fg:x="434" fg:w="1"/><text x="50.5980%" y="991.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.23%)</title><rect x="50.4640%" y="853" width="0.2320%" height="15" fill="rgb(243,208,16)" fg:x="435" fg:w="2"/><text x="50.7140%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="50.5800%" y="837" width="0.1160%" height="15" fill="rgb(219,96,24)" fg:x="436" fg:w="1"/><text x="50.8300%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="50.5800%" y="821" width="0.1160%" height="15" fill="rgb(219,33,29)" fg:x="436" fg:w="1"/><text x="50.8300%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="50.5800%" y="805" width="0.1160%" height="15" fill="rgb(223,176,5)" fg:x="436" fg:w="1"/><text x="50.8300%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="50.5800%" y="789" width="0.1160%" height="15" fill="rgb(228,140,14)" fg:x="436" fg:w="1"/><text x="50.8300%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="50.5800%" y="773" width="0.1160%" height="15" fill="rgb(217,179,31)" fg:x="436" fg:w="1"/><text x="50.8300%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="50.5800%" y="757" width="0.1160%" height="15" fill="rgb(230,9,30)" fg:x="436" fg:w="1"/><text x="50.8300%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="50.5800%" y="741" width="0.1160%" height="15" fill="rgb(230,136,20)" fg:x="436" fg:w="1"/><text x="50.8300%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="50.5800%" y="725" width="0.1160%" height="15" fill="rgb(215,210,22)" fg:x="436" fg:w="1"/><text x="50.8300%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="50.5800%" y="709" width="0.1160%" height="15" fill="rgb(218,43,5)" fg:x="436" fg:w="1"/><text x="50.8300%" y="719.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="50.5800%" y="693" width="0.1160%" height="15" fill="rgb(216,11,5)" fg:x="436" fg:w="1"/><text x="50.8300%" y="703.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="50.5800%" y="677" width="0.1160%" height="15" fill="rgb(209,82,29)" fg:x="436" fg:w="1"/><text x="50.8300%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (7 samples, 0.81%)</title><rect x="50.3480%" y="1045" width="0.8121%" height="15" fill="rgb(244,115,12)" fg:x="434" fg:w="7"/><text x="50.5980%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.70%)</title><rect x="50.4640%" y="1029" width="0.6961%" height="15" fill="rgb(222,82,18)" fg:x="435" fg:w="6"/><text x="50.7140%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (6 samples, 0.70%)</title><rect x="50.4640%" y="1013" width="0.6961%" height="15" fill="rgb(249,227,8)" fg:x="435" fg:w="6"/><text x="50.7140%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.70%)</title><rect x="50.4640%" y="997" width="0.6961%" height="15" fill="rgb(253,141,45)" fg:x="435" fg:w="6"/><text x="50.7140%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6 samples, 0.70%)</title><rect x="50.4640%" y="981" width="0.6961%" height="15" fill="rgb(234,184,4)" fg:x="435" fg:w="6"/><text x="50.7140%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.70%)</title><rect x="50.4640%" y="965" width="0.6961%" height="15" fill="rgb(218,194,23)" fg:x="435" fg:w="6"/><text x="50.7140%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.70%)</title><rect x="50.4640%" y="949" width="0.6961%" height="15" fill="rgb(235,66,41)" fg:x="435" fg:w="6"/><text x="50.7140%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.70%)</title><rect x="50.4640%" y="933" width="0.6961%" height="15" fill="rgb(245,217,1)" fg:x="435" fg:w="6"/><text x="50.7140%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.70%)</title><rect x="50.4640%" y="917" width="0.6961%" height="15" fill="rgb(229,91,1)" fg:x="435" fg:w="6"/><text x="50.7140%" y="927.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 0.70%)</title><rect x="50.4640%" y="901" width="0.6961%" height="15" fill="rgb(207,101,30)" fg:x="435" fg:w="6"/><text x="50.7140%" y="911.50"></text></g><g><title>core::ops::function::FnMut::call_mut (6 samples, 0.70%)</title><rect x="50.4640%" y="885" width="0.6961%" height="15" fill="rgb(223,82,49)" fg:x="435" fg:w="6"/><text x="50.7140%" y="895.50"></text></g><g><title>&lt;indexmap::Bucket&lt;K,V&gt; as core::clone::Clone&gt;::clone (6 samples, 0.70%)</title><rect x="50.4640%" y="869" width="0.6961%" height="15" fill="rgb(218,167,17)" fg:x="435" fg:w="6"/><text x="50.7140%" y="879.50"></text></g><g><title>&lt;bson::bson::Bson as core::clone::Clone&gt;::clone (4 samples, 0.46%)</title><rect x="50.6961%" y="853" width="0.4640%" height="15" fill="rgb(208,103,14)" fg:x="437" fg:w="4"/><text x="50.9461%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.46%)</title><rect x="50.6961%" y="837" width="0.4640%" height="15" fill="rgb(238,20,8)" fg:x="437" fg:w="4"/><text x="50.9461%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.46%)</title><rect x="50.6961%" y="821" width="0.4640%" height="15" fill="rgb(218,80,54)" fg:x="437" fg:w="4"/><text x="50.9461%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.46%)</title><rect x="50.6961%" y="805" width="0.4640%" height="15" fill="rgb(240,144,17)" fg:x="437" fg:w="4"/><text x="50.9461%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.46%)</title><rect x="50.6961%" y="789" width="0.4640%" height="15" fill="rgb(245,27,50)" fg:x="437" fg:w="4"/><text x="50.9461%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.46%)</title><rect x="50.6961%" y="773" width="0.4640%" height="15" fill="rgb(251,51,7)" fg:x="437" fg:w="4"/><text x="50.9461%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.46%)</title><rect x="50.6961%" y="757" width="0.4640%" height="15" fill="rgb(245,217,29)" fg:x="437" fg:w="4"/><text x="50.9461%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.46%)</title><rect x="50.6961%" y="741" width="0.4640%" height="15" fill="rgb(221,176,29)" fg:x="437" fg:w="4"/><text x="50.9461%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.46%)</title><rect x="50.6961%" y="725" width="0.4640%" height="15" fill="rgb(212,180,24)" fg:x="437" fg:w="4"/><text x="50.9461%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.46%)</title><rect x="50.6961%" y="709" width="0.4640%" height="15" fill="rgb(254,24,2)" fg:x="437" fg:w="4"/><text x="50.9461%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.46%)</title><rect x="50.6961%" y="693" width="0.4640%" height="15" fill="rgb(230,100,2)" fg:x="437" fg:w="4"/><text x="50.9461%" y="703.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.46%)</title><rect x="50.6961%" y="677" width="0.4640%" height="15" fill="rgb(219,142,25)" fg:x="437" fg:w="4"/><text x="50.9461%" y="687.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.46%)</title><rect x="50.6961%" y="661" width="0.4640%" height="15" fill="rgb(240,73,43)" fg:x="437" fg:w="4"/><text x="50.9461%" y="671.50"></text></g><g><title>_int_malloc (4 samples, 0.46%)</title><rect x="50.6961%" y="645" width="0.4640%" height="15" fill="rgb(214,114,15)" fg:x="437" fg:w="4"/><text x="50.9461%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="50.6961%" y="629" width="0.4640%" height="15" fill="rgb(207,130,4)" fg:x="437" fg:w="4"/><text x="50.9461%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="50.8121%" y="613" width="0.3480%" height="15" fill="rgb(221,25,40)" fg:x="438" fg:w="3"/><text x="51.0621%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="50.9281%" y="597" width="0.2320%" height="15" fill="rgb(241,184,7)" fg:x="439" fg:w="2"/><text x="51.1781%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="50.9281%" y="581" width="0.2320%" height="15" fill="rgb(235,159,4)" fg:x="439" fg:w="2"/><text x="51.1781%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="50.9281%" y="565" width="0.2320%" height="15" fill="rgb(214,87,48)" fg:x="439" fg:w="2"/><text x="51.1781%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="50.9281%" y="549" width="0.2320%" height="15" fill="rgb(246,198,24)" fg:x="439" fg:w="2"/><text x="51.1781%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="50.9281%" y="533" width="0.2320%" height="15" fill="rgb(209,66,40)" fg:x="439" fg:w="2"/><text x="51.1781%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="51.0441%" y="517" width="0.1160%" height="15" fill="rgb(233,147,39)" fg:x="440" fg:w="1"/><text x="51.2941%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="51.0441%" y="501" width="0.1160%" height="15" fill="rgb(231,145,52)" fg:x="440" fg:w="1"/><text x="51.2941%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as hashbrown::raw::inner::RawTableClone&gt;::clone_from_spec (1 samples, 0.12%)</title><rect x="51.1601%" y="1029" width="0.1160%" height="15" fill="rgb(206,20,26)" fg:x="441" fg:w="1"/><text x="51.4101%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clone_from_impl (1 samples, 0.12%)</title><rect x="51.1601%" y="1013" width="0.1160%" height="15" fill="rgb(238,220,4)" fg:x="441" fg:w="1"/><text x="51.4101%" y="1023.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (1 samples, 0.12%)</title><rect x="51.1601%" y="997" width="0.1160%" height="15" fill="rgb(252,195,42)" fg:x="441" fg:w="1"/><text x="51.4101%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="51.1601%" y="981" width="0.1160%" height="15" fill="rgb(209,10,6)" fg:x="441" fg:w="1"/><text x="51.4101%" y="991.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="51.1601%" y="965" width="0.1160%" height="15" fill="rgb(229,3,52)" fg:x="441" fg:w="1"/><text x="51.4101%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.23%)</title><rect x="51.1601%" y="1045" width="0.2320%" height="15" fill="rgb(253,49,37)" fg:x="441" fg:w="2"/><text x="51.4101%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::new_uninitialized (1 samples, 0.12%)</title><rect x="51.2761%" y="1029" width="0.1160%" height="15" fill="rgb(240,103,49)" fg:x="442" fg:w="1"/><text x="51.5261%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.12%)</title><rect x="51.2761%" y="1013" width="0.1160%" height="15" fill="rgb(250,182,30)" fg:x="442" fg:w="1"/><text x="51.5261%" y="1023.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1 samples, 0.12%)</title><rect x="51.2761%" y="997" width="0.1160%" height="15" fill="rgb(248,8,30)" fg:x="442" fg:w="1"/><text x="51.5261%" y="1007.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="51.2761%" y="981" width="0.1160%" height="15" fill="rgb(237,120,30)" fg:x="442" fg:w="1"/><text x="51.5261%" y="991.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="51.2761%" y="965" width="0.1160%" height="15" fill="rgb(221,146,34)" fg:x="442" fg:w="1"/><text x="51.5261%" y="975.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="51.2761%" y="949" width="0.1160%" height="15" fill="rgb(242,55,13)" fg:x="442" fg:w="1"/><text x="51.5261%" y="959.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="51.2761%" y="933" width="0.1160%" height="15" fill="rgb(242,112,31)" fg:x="442" fg:w="1"/><text x="51.5261%" y="943.50"></text></g><g><title>sysmalloc (1 samples, 0.12%)</title><rect x="51.2761%" y="917" width="0.1160%" height="15" fill="rgb(249,192,27)" fg:x="442" fg:w="1"/><text x="51.5261%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="51.2761%" y="901" width="0.1160%" height="15" fill="rgb(208,204,44)" fg:x="442" fg:w="1"/><text x="51.5261%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="51.2761%" y="885" width="0.1160%" height="15" fill="rgb(208,93,54)" fg:x="442" fg:w="1"/><text x="51.5261%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="51.2761%" y="869" width="0.1160%" height="15" fill="rgb(242,1,31)" fg:x="442" fg:w="1"/><text x="51.5261%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="51.2761%" y="853" width="0.1160%" height="15" fill="rgb(241,83,25)" fg:x="442" fg:w="1"/><text x="51.5261%" y="863.50"></text></g><g><title>[unknown] (13 samples, 1.51%)</title><rect x="51.6241%" y="901" width="1.5081%" height="15" fill="rgb(205,169,50)" fg:x="445" fg:w="13"/><text x="51.8741%" y="911.50"></text></g><g><title>[unknown] (13 samples, 1.51%)</title><rect x="51.6241%" y="885" width="1.5081%" height="15" fill="rgb(239,186,37)" fg:x="445" fg:w="13"/><text x="51.8741%" y="895.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="51.7401%" y="869" width="1.3921%" height="15" fill="rgb(205,221,10)" fg:x="446" fg:w="12"/><text x="51.9901%" y="879.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="51.7401%" y="853" width="1.3921%" height="15" fill="rgb(218,196,15)" fg:x="446" fg:w="12"/><text x="51.9901%" y="863.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="51.7401%" y="837" width="1.3921%" height="15" fill="rgb(218,196,35)" fg:x="446" fg:w="12"/><text x="51.9901%" y="847.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="51.7401%" y="821" width="1.3921%" height="15" fill="rgb(233,63,24)" fg:x="446" fg:w="12"/><text x="51.9901%" y="831.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="51.7401%" y="805" width="1.3921%" height="15" fill="rgb(225,8,4)" fg:x="446" fg:w="12"/><text x="51.9901%" y="815.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="52.0882%" y="789" width="1.0441%" height="15" fill="rgb(234,105,35)" fg:x="449" fg:w="9"/><text x="52.3382%" y="799.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="52.0882%" y="773" width="1.0441%" height="15" fill="rgb(236,21,32)" fg:x="449" fg:w="9"/><text x="52.3382%" y="783.50"></text></g><g><title>[unknown] (9 samples, 1.04%)</title><rect x="52.0882%" y="757" width="1.0441%" height="15" fill="rgb(228,109,6)" fg:x="449" fg:w="9"/><text x="52.3382%" y="767.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="52.4362%" y="741" width="0.6961%" height="15" fill="rgb(229,215,31)" fg:x="452" fg:w="6"/><text x="52.6862%" y="751.50"></text></g><g><title>__GI___libc_malloc (16 samples, 1.86%)</title><rect x="51.3921%" y="933" width="1.8561%" height="15" fill="rgb(221,52,54)" fg:x="443" fg:w="16"/><text x="51.6421%" y="943.50">_..</text></g><g><title>_int_malloc (16 samples, 1.86%)</title><rect x="51.3921%" y="917" width="1.8561%" height="15" fill="rgb(252,129,43)" fg:x="443" fg:w="16"/><text x="51.6421%" y="927.50">_..</text></g><g><title>sysmalloc (1 samples, 0.12%)</title><rect x="53.1323%" y="901" width="0.1160%" height="15" fill="rgb(248,183,27)" fg:x="458" fg:w="1"/><text x="53.3823%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.1323%" y="885" width="0.1160%" height="15" fill="rgb(250,0,22)" fg:x="458" fg:w="1"/><text x="53.3823%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.1323%" y="869" width="0.1160%" height="15" fill="rgb(213,166,10)" fg:x="458" fg:w="1"/><text x="53.3823%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.1323%" y="853" width="0.1160%" height="15" fill="rgb(207,163,36)" fg:x="458" fg:w="1"/><text x="53.3823%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.1323%" y="837" width="0.1160%" height="15" fill="rgb(208,122,22)" fg:x="458" fg:w="1"/><text x="53.3823%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.1323%" y="821" width="0.1160%" height="15" fill="rgb(207,104,49)" fg:x="458" fg:w="1"/><text x="53.3823%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.1323%" y="805" width="0.1160%" height="15" fill="rgb(248,211,50)" fg:x="458" fg:w="1"/><text x="53.3823%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.1323%" y="789" width="0.1160%" height="15" fill="rgb(217,13,45)" fg:x="458" fg:w="1"/><text x="53.3823%" y="799.50"></text></g><g><title>&lt;bson::bson::Bson as core::clone::Clone&gt;::clone (27 samples, 3.13%)</title><rect x="50.2320%" y="1109" width="3.1323%" height="15" fill="rgb(211,216,49)" fg:x="433" fg:w="27"/><text x="50.4820%" y="1119.50">&lt;bs..</text></g><g><title>&lt;bson::document::Document as core::clone::Clone&gt;::clone (27 samples, 3.13%)</title><rect x="50.2320%" y="1093" width="3.1323%" height="15" fill="rgb(221,58,53)" fg:x="433" fg:w="27"/><text x="50.4820%" y="1103.50">&lt;bs..</text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (26 samples, 3.02%)</title><rect x="50.3480%" y="1077" width="3.0162%" height="15" fill="rgb(220,112,41)" fg:x="434" fg:w="26"/><text x="50.5980%" y="1087.50">&lt;in..</text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (26 samples, 3.02%)</title><rect x="50.3480%" y="1061" width="3.0162%" height="15" fill="rgb(236,38,28)" fg:x="434" fg:w="26"/><text x="50.5980%" y="1071.50">&lt;in..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 1.97%)</title><rect x="51.3921%" y="1045" width="1.9722%" height="15" fill="rgb(227,195,22)" fg:x="443" fg:w="17"/><text x="51.6421%" y="1055.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 1.97%)</title><rect x="51.3921%" y="1029" width="1.9722%" height="15" fill="rgb(214,55,33)" fg:x="443" fg:w="17"/><text x="51.6421%" y="1039.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 1.97%)</title><rect x="51.3921%" y="1013" width="1.9722%" height="15" fill="rgb(248,80,13)" fg:x="443" fg:w="17"/><text x="51.6421%" y="1023.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 1.97%)</title><rect x="51.3921%" y="997" width="1.9722%" height="15" fill="rgb(238,52,6)" fg:x="443" fg:w="17"/><text x="51.6421%" y="1007.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 1.97%)</title><rect x="51.3921%" y="981" width="1.9722%" height="15" fill="rgb(224,198,47)" fg:x="443" fg:w="17"/><text x="51.6421%" y="991.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 1.97%)</title><rect x="51.3921%" y="965" width="1.9722%" height="15" fill="rgb(233,171,20)" fg:x="443" fg:w="17"/><text x="51.6421%" y="975.50">a..</text></g><g><title>alloc::alloc::alloc (17 samples, 1.97%)</title><rect x="51.3921%" y="949" width="1.9722%" height="15" fill="rgb(241,30,25)" fg:x="443" fg:w="17"/><text x="51.6421%" y="959.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.12%)</title><rect x="53.2483%" y="933" width="0.1160%" height="15" fill="rgb(207,171,38)" fg:x="459" fg:w="1"/><text x="53.4983%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="53.2483%" y="917" width="0.1160%" height="15" fill="rgb(234,70,1)" fg:x="459" fg:w="1"/><text x="53.4983%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="53.2483%" y="901" width="0.1160%" height="15" fill="rgb(232,178,18)" fg:x="459" fg:w="1"/><text x="53.4983%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.12%)</title><rect x="53.2483%" y="885" width="0.1160%" height="15" fill="rgb(241,78,40)" fg:x="459" fg:w="1"/><text x="53.4983%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.12%)</title><rect x="53.2483%" y="869" width="0.1160%" height="15" fill="rgb(222,35,25)" fg:x="459" fg:w="1"/><text x="53.4983%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.12%)</title><rect x="53.2483%" y="853" width="0.1160%" height="15" fill="rgb(207,92,16)" fg:x="459" fg:w="1"/><text x="53.4983%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.12%)</title><rect x="53.2483%" y="837" width="0.1160%" height="15" fill="rgb(216,59,51)" fg:x="459" fg:w="1"/><text x="53.4983%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.12%)</title><rect x="53.2483%" y="821" width="0.1160%" height="15" fill="rgb(213,80,28)" fg:x="459" fg:w="1"/><text x="53.4983%" y="831.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.12%)</title><rect x="53.2483%" y="805" width="0.1160%" height="15" fill="rgb(220,93,7)" fg:x="459" fg:w="1"/><text x="53.4983%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.12%)</title><rect x="53.2483%" y="789" width="0.1160%" height="15" fill="rgb(225,24,44)" fg:x="459" fg:w="1"/><text x="53.4983%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1 samples, 0.12%)</title><rect x="53.2483%" y="773" width="0.1160%" height="15" fill="rgb(243,74,40)" fg:x="459" fg:w="1"/><text x="53.4983%" y="783.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="53.2483%" y="757" width="0.1160%" height="15" fill="rgb(228,39,7)" fg:x="459" fg:w="1"/><text x="53.4983%" y="767.50"></text></g><g><title>&lt;bson::bson::Bson as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="53.2483%" y="741" width="0.1160%" height="15" fill="rgb(227,79,8)" fg:x="459" fg:w="1"/><text x="53.4983%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="53.2483%" y="725" width="0.1160%" height="15" fill="rgb(236,58,11)" fg:x="459" fg:w="1"/><text x="53.4983%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="53.2483%" y="709" width="0.1160%" height="15" fill="rgb(249,63,35)" fg:x="459" fg:w="1"/><text x="53.4983%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="53.2483%" y="693" width="0.1160%" height="15" fill="rgb(252,114,16)" fg:x="459" fg:w="1"/><text x="53.4983%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="53.2483%" y="677" width="0.1160%" height="15" fill="rgb(254,151,24)" fg:x="459" fg:w="1"/><text x="53.4983%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="53.2483%" y="661" width="0.1160%" height="15" fill="rgb(253,54,39)" fg:x="459" fg:w="1"/><text x="53.4983%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.12%)</title><rect x="53.2483%" y="645" width="0.1160%" height="15" fill="rgb(243,25,45)" fg:x="459" fg:w="1"/><text x="53.4983%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="53.2483%" y="629" width="0.1160%" height="15" fill="rgb(234,134,9)" fg:x="459" fg:w="1"/><text x="53.4983%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="53.2483%" y="613" width="0.1160%" height="15" fill="rgb(227,166,31)" fg:x="459" fg:w="1"/><text x="53.4983%" y="623.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="53.2483%" y="597" width="0.1160%" height="15" fill="rgb(245,143,41)" fg:x="459" fg:w="1"/><text x="53.4983%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.2483%" y="581" width="0.1160%" height="15" fill="rgb(238,181,32)" fg:x="459" fg:w="1"/><text x="53.4983%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone_from (32 samples, 3.71%)</title><rect x="49.7680%" y="1381" width="3.7123%" height="15" fill="rgb(224,113,18)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1391.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (32 samples, 3.71%)</title><rect x="49.7680%" y="1365" width="3.7123%" height="15" fill="rgb(240,229,28)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1375.50">allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,I&gt;&gt;::spec_extend (32 samples, 3.71%)</title><rect x="49.7680%" y="1349" width="3.7123%" height="15" fill="rgb(250,185,3)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1359.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (32 samples, 3.71%)</title><rect x="49.7680%" y="1333" width="3.7123%" height="15" fill="rgb(212,59,25)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1343.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (32 samples, 3.71%)</title><rect x="49.7680%" y="1317" width="3.7123%" height="15" fill="rgb(221,87,20)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1327.50">allo..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (32 samples, 3.71%)</title><rect x="49.7680%" y="1301" width="3.7123%" height="15" fill="rgb(213,74,28)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1311.50">core..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 3.71%)</title><rect x="49.7680%" y="1285" width="3.7123%" height="15" fill="rgb(224,132,34)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1295.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 3.71%)</title><rect x="49.7680%" y="1269" width="3.7123%" height="15" fill="rgb(222,101,24)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1279.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (32 samples, 3.71%)</title><rect x="49.7680%" y="1253" width="3.7123%" height="15" fill="rgb(254,142,4)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1263.50">core..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (32 samples, 3.71%)</title><rect x="49.7680%" y="1237" width="3.7123%" height="15" fill="rgb(230,229,49)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1247.50">core..</text></g><g><title>core::ops::function::FnMut::call_mut (32 samples, 3.71%)</title><rect x="49.7680%" y="1221" width="3.7123%" height="15" fill="rgb(238,70,47)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1231.50">core..</text></g><g><title>&lt;indexmap::Bucket&lt;K,V&gt; as core::clone::Clone&gt;::clone (32 samples, 3.71%)</title><rect x="49.7680%" y="1205" width="3.7123%" height="15" fill="rgb(231,160,17)" fg:x="429" fg:w="32"/><text x="50.0180%" y="1215.50">&lt;ind..</text></g><g><title>&lt;bson::bson::Bson as core::clone::Clone&gt;::clone (29 samples, 3.36%)</title><rect x="50.1160%" y="1189" width="3.3643%" height="15" fill="rgb(218,68,53)" fg:x="432" fg:w="29"/><text x="50.3660%" y="1199.50">&lt;bs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 3.25%)</title><rect x="50.2320%" y="1173" width="3.2483%" height="15" fill="rgb(236,111,10)" fg:x="433" fg:w="28"/><text x="50.4820%" y="1183.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 3.25%)</title><rect x="50.2320%" y="1157" width="3.2483%" height="15" fill="rgb(224,34,41)" fg:x="433" fg:w="28"/><text x="50.4820%" y="1167.50">all..</text></g><g><title>alloc::slice::hack::to_vec (28 samples, 3.25%)</title><rect x="50.2320%" y="1141" width="3.2483%" height="15" fill="rgb(241,118,19)" fg:x="433" fg:w="28"/><text x="50.4820%" y="1151.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 3.25%)</title><rect x="50.2320%" y="1125" width="3.2483%" height="15" fill="rgb(238,129,25)" fg:x="433" fg:w="28"/><text x="50.4820%" y="1135.50">&lt;T ..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.12%)</title><rect x="53.3643%" y="1109" width="0.1160%" height="15" fill="rgb(238,22,31)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="1093" width="0.1160%" height="15" fill="rgb(222,174,48)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="1077" width="0.1160%" height="15" fill="rgb(206,152,40)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="1061" width="0.1160%" height="15" fill="rgb(218,99,54)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="1045" width="0.1160%" height="15" fill="rgb(220,174,26)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="1029" width="0.1160%" height="15" fill="rgb(245,116,9)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="1013" width="0.1160%" height="15" fill="rgb(209,72,35)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="997" width="0.1160%" height="15" fill="rgb(226,126,21)" fg:x="460" fg:w="1"/><text x="53.6143%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="981" width="0.1160%" height="15" fill="rgb(227,192,1)" fg:x="460" fg:w="1"/><text x="53.6143%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.3643%" y="965" width="0.1160%" height="15" fill="rgb(237,180,29)" fg:x="460" fg:w="1"/><text x="53.6143%" y="975.50"></text></g><g><title>&lt;bson::bson::Bson as core::convert::From&lt;&amp;T&gt;&gt;::from (35 samples, 4.06%)</title><rect x="49.6520%" y="1445" width="4.0603%" height="15" fill="rgb(230,197,35)" fg:x="428" fg:w="35"/><text x="49.9020%" y="1455.50">&lt;bso..</text></g><g><title>&lt;bson::document::Document as core::clone::Clone&gt;::clone (35 samples, 4.06%)</title><rect x="49.6520%" y="1429" width="4.0603%" height="15" fill="rgb(246,193,31)" fg:x="428" fg:w="35"/><text x="49.9020%" y="1439.50">&lt;bso..</text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (35 samples, 4.06%)</title><rect x="49.6520%" y="1413" width="4.0603%" height="15" fill="rgb(241,36,4)" fg:x="428" fg:w="35"/><text x="49.9020%" y="1423.50">&lt;ind..</text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as core::clone::Clone&gt;::clone (34 samples, 3.94%)</title><rect x="49.7680%" y="1397" width="3.9443%" height="15" fill="rgb(241,130,17)" fg:x="429" fg:w="34"/><text x="50.0180%" y="1407.50">&lt;ind..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.23%)</title><rect x="53.4803%" y="1381" width="0.2320%" height="15" fill="rgb(206,137,32)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="53.4803%" y="1365" width="0.2320%" height="15" fill="rgb(237,228,51)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.23%)</title><rect x="53.4803%" y="1349" width="0.2320%" height="15" fill="rgb(243,6,42)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.23%)</title><rect x="53.4803%" y="1333" width="0.2320%" height="15" fill="rgb(251,74,28)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1343.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.23%)</title><rect x="53.4803%" y="1317" width="0.2320%" height="15" fill="rgb(218,20,49)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1327.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.23%)</title><rect x="53.4803%" y="1301" width="0.2320%" height="15" fill="rgb(238,28,14)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1311.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.23%)</title><rect x="53.4803%" y="1285" width="0.2320%" height="15" fill="rgb(229,40,46)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1295.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.23%)</title><rect x="53.4803%" y="1269" width="0.2320%" height="15" fill="rgb(244,195,20)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1279.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="53.4803%" y="1253" width="0.2320%" height="15" fill="rgb(253,56,35)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1263.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1237" width="0.2320%" height="15" fill="rgb(210,149,44)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1247.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1221" width="0.2320%" height="15" fill="rgb(240,135,12)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1231.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1205" width="0.2320%" height="15" fill="rgb(251,24,50)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1215.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1189" width="0.2320%" height="15" fill="rgb(243,200,47)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1199.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1173" width="0.2320%" height="15" fill="rgb(224,166,26)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1157" width="0.2320%" height="15" fill="rgb(233,0,47)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1141" width="0.2320%" height="15" fill="rgb(253,80,5)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1125" width="0.2320%" height="15" fill="rgb(214,133,25)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1109" width="0.2320%" height="15" fill="rgb(209,27,14)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1093" width="0.2320%" height="15" fill="rgb(219,102,51)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="53.4803%" y="1077" width="0.2320%" height="15" fill="rgb(237,18,16)" fg:x="461" fg:w="2"/><text x="53.7303%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="53.7123%" y="1445" width="0.1160%" height="15" fill="rgb(241,85,17)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="53.7123%" y="1429" width="0.1160%" height="15" fill="rgb(236,90,42)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="53.7123%" y="1413" width="0.1160%" height="15" fill="rgb(249,57,21)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1423.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="53.7123%" y="1397" width="0.1160%" height="15" fill="rgb(243,12,36)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="53.7123%" y="1381" width="0.1160%" height="15" fill="rgb(253,128,47)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1391.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="53.7123%" y="1365" width="0.1160%" height="15" fill="rgb(207,33,20)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1375.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="53.7123%" y="1349" width="0.1160%" height="15" fill="rgb(233,215,35)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1359.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="53.7123%" y="1333" width="0.1160%" height="15" fill="rgb(249,188,52)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1343.50"></text></g><g><title>_int_realloc (1 samples, 0.12%)</title><rect x="53.7123%" y="1317" width="0.1160%" height="15" fill="rgb(225,12,32)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1327.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="53.7123%" y="1301" width="0.1160%" height="15" fill="rgb(247,98,14)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="53.7123%" y="1285" width="0.1160%" height="15" fill="rgb(247,219,48)" fg:x="463" fg:w="1"/><text x="53.9623%" y="1295.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.46%)</title><rect x="53.8283%" y="1269" width="0.4640%" height="15" fill="rgb(253,60,48)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1279.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.46%)</title><rect x="53.8283%" y="1253" width="0.4640%" height="15" fill="rgb(245,15,52)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1263.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.46%)</title><rect x="53.8283%" y="1237" width="0.4640%" height="15" fill="rgb(220,133,28)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1247.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.46%)</title><rect x="53.8283%" y="1221" width="0.4640%" height="15" fill="rgb(217,180,4)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1231.50"></text></g><g><title>_int_realloc (4 samples, 0.46%)</title><rect x="53.8283%" y="1205" width="0.4640%" height="15" fill="rgb(251,24,1)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1215.50"></text></g><g><title>_int_malloc (4 samples, 0.46%)</title><rect x="53.8283%" y="1189" width="0.4640%" height="15" fill="rgb(212,185,49)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="53.8283%" y="1173" width="0.4640%" height="15" fill="rgb(215,175,22)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="53.8283%" y="1157" width="0.4640%" height="15" fill="rgb(250,205,14)" fg:x="464" fg:w="4"/><text x="54.0783%" y="1167.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="53.9443%" y="1141" width="0.3480%" height="15" fill="rgb(225,211,22)" fg:x="465" fg:w="3"/><text x="54.1943%" y="1151.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="53.9443%" y="1125" width="0.3480%" height="15" fill="rgb(251,179,42)" fg:x="465" fg:w="3"/><text x="54.1943%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="53.9443%" y="1109" width="0.3480%" height="15" fill="rgb(208,216,51)" fg:x="465" fg:w="3"/><text x="54.1943%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="54.0603%" y="1093" width="0.2320%" height="15" fill="rgb(235,36,11)" fg:x="466" fg:w="2"/><text x="54.3103%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="54.0603%" y="1077" width="0.2320%" height="15" fill="rgb(213,189,28)" fg:x="466" fg:w="2"/><text x="54.3103%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="54.0603%" y="1061" width="0.2320%" height="15" fill="rgb(227,203,42)" fg:x="466" fg:w="2"/><text x="54.3103%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="54.0603%" y="1045" width="0.2320%" height="15" fill="rgb(244,72,36)" fg:x="466" fg:w="2"/><text x="54.3103%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="54.0603%" y="1029" width="0.2320%" height="15" fill="rgb(213,53,17)" fg:x="466" fg:w="2"/><text x="54.3103%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="54.0603%" y="1013" width="0.2320%" height="15" fill="rgb(207,167,3)" fg:x="466" fg:w="2"/><text x="54.3103%" y="1023.50"></text></g><g><title>bson::document::Document::insert (5 samples, 0.58%)</title><rect x="53.8283%" y="1445" width="0.5800%" height="15" fill="rgb(216,98,30)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1455.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (5 samples, 0.58%)</title><rect x="53.8283%" y="1429" width="0.5800%" height="15" fill="rgb(236,123,15)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1439.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (5 samples, 0.58%)</title><rect x="53.8283%" y="1413" width="0.5800%" height="15" fill="rgb(248,81,50)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1423.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (5 samples, 0.58%)</title><rect x="53.8283%" y="1397" width="0.5800%" height="15" fill="rgb(214,120,4)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1407.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (5 samples, 0.58%)</title><rect x="53.8283%" y="1381" width="0.5800%" height="15" fill="rgb(208,179,34)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1391.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (5 samples, 0.58%)</title><rect x="53.8283%" y="1365" width="0.5800%" height="15" fill="rgb(227,140,7)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (5 samples, 0.58%)</title><rect x="53.8283%" y="1349" width="0.5800%" height="15" fill="rgb(214,22,6)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (5 samples, 0.58%)</title><rect x="53.8283%" y="1333" width="0.5800%" height="15" fill="rgb(207,137,27)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1343.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (5 samples, 0.58%)</title><rect x="53.8283%" y="1317" width="0.5800%" height="15" fill="rgb(210,8,46)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (5 samples, 0.58%)</title><rect x="53.8283%" y="1301" width="0.5800%" height="15" fill="rgb(240,16,54)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1311.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.58%)</title><rect x="53.8283%" y="1285" width="0.5800%" height="15" fill="rgb(211,209,29)" fg:x="464" fg:w="5"/><text x="54.0783%" y="1295.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="54.2923%" y="1269" width="0.1160%" height="15" fill="rgb(226,228,24)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1279.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="54.2923%" y="1253" width="0.1160%" height="15" fill="rgb(222,84,9)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="54.2923%" y="1237" width="0.1160%" height="15" fill="rgb(234,203,30)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="54.2923%" y="1221" width="0.1160%" height="15" fill="rgb(238,109,14)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="54.2923%" y="1205" width="0.1160%" height="15" fill="rgb(233,206,34)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="54.2923%" y="1189" width="0.1160%" height="15" fill="rgb(220,167,47)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="54.2923%" y="1173" width="0.1160%" height="15" fill="rgb(238,105,10)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="54.2923%" y="1157" width="0.1160%" height="15" fill="rgb(213,227,17)" fg:x="468" fg:w="1"/><text x="54.5423%" y="1167.50"></text></g><g><title>&lt;alloc::string::String as core::convert::AsRef&lt;str&gt;&gt;::as_ref (2 samples, 0.23%)</title><rect x="54.4084%" y="1301" width="0.2320%" height="15" fill="rgb(217,132,38)" fg:x="469" fg:w="2"/><text x="54.6584%" y="1311.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.23%)</title><rect x="54.4084%" y="1285" width="0.2320%" height="15" fill="rgb(242,146,4)" fg:x="469" fg:w="2"/><text x="54.6584%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.23%)</title><rect x="54.4084%" y="1269" width="0.2320%" height="15" fill="rgb(212,61,9)" fg:x="469" fg:w="2"/><text x="54.6584%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.23%)</title><rect x="54.4084%" y="1253" width="0.2320%" height="15" fill="rgb(247,126,22)" fg:x="469" fg:w="2"/><text x="54.6584%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.23%)</title><rect x="54.4084%" y="1237" width="0.2320%" height="15" fill="rgb(220,196,2)" fg:x="469" fg:w="2"/><text x="54.6584%" y="1247.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.12%)</title><rect x="54.6404%" y="1269" width="0.1160%" height="15" fill="rgb(208,46,4)" fg:x="471" fg:w="1"/><text x="54.8904%" y="1279.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.12%)</title><rect x="54.6404%" y="1253" width="0.1160%" height="15" fill="rgb(252,104,46)" fg:x="471" fg:w="1"/><text x="54.8904%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="54.7564%" y="1253" width="0.1160%" height="15" fill="rgb(237,152,48)" fg:x="472" fg:w="1"/><text x="55.0064%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="54.7564%" y="1237" width="0.1160%" height="15" fill="rgb(221,59,37)" fg:x="472" fg:w="1"/><text x="55.0064%" y="1247.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="54.7564%" y="1221" width="0.1160%" height="15" fill="rgb(209,202,51)" fg:x="472" fg:w="1"/><text x="55.0064%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="54.7564%" y="1205" width="0.1160%" height="15" fill="rgb(228,81,30)" fg:x="472" fg:w="1"/><text x="55.0064%" y="1215.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="54.7564%" y="1189" width="0.1160%" height="15" fill="rgb(227,42,39)" fg:x="472" fg:w="1"/><text x="55.0064%" y="1199.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="54.7564%" y="1173" width="0.1160%" height="15" fill="rgb(221,26,2)" fg:x="472" fg:w="1"/><text x="55.0064%" y="1183.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="54.7564%" y="1157" width="0.1160%" height="15" fill="rgb(254,61,31)" fg:x="472" fg:w="1"/><text x="55.0064%" y="1167.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.12%)</title><rect x="54.8724%" y="1237" width="0.1160%" height="15" fill="rgb(222,173,38)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1247.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.12%)</title><rect x="54.8724%" y="1221" width="0.1160%" height="15" fill="rgb(218,50,12)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1231.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.12%)</title><rect x="54.8724%" y="1205" width="0.1160%" height="15" fill="rgb(223,88,40)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1215.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.12%)</title><rect x="54.8724%" y="1189" width="0.1160%" height="15" fill="rgb(237,54,19)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1199.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.12%)</title><rect x="54.8724%" y="1173" width="0.1160%" height="15" fill="rgb(251,129,25)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.12%)</title><rect x="54.8724%" y="1157" width="0.1160%" height="15" fill="rgb(238,97,19)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="54.8724%" y="1141" width="0.1160%" height="15" fill="rgb(240,169,18)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1151.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.12%)</title><rect x="54.8724%" y="1125" width="0.1160%" height="15" fill="rgb(230,187,49)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1135.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="54.8724%" y="1109" width="0.1160%" height="15" fill="rgb(209,44,26)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="54.8724%" y="1093" width="0.1160%" height="15" fill="rgb(244,0,6)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1103.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="54.8724%" y="1077" width="0.1160%" height="15" fill="rgb(248,18,21)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="54.8724%" y="1061" width="0.1160%" height="15" fill="rgb(245,180,19)" fg:x="473" fg:w="1"/><text x="55.1224%" y="1071.50"></text></g><g><title>bson::ser::serialize_bson (1 samples, 0.12%)</title><rect x="54.9884%" y="1237" width="0.1160%" height="15" fill="rgb(252,118,36)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1247.50"></text></g><g><title>bson::document::Document::to_writer (1 samples, 0.12%)</title><rect x="54.9884%" y="1221" width="0.1160%" height="15" fill="rgb(210,224,19)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1231.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.12%)</title><rect x="54.9884%" y="1205" width="0.1160%" height="15" fill="rgb(218,30,24)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1215.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.12%)</title><rect x="54.9884%" y="1189" width="0.1160%" height="15" fill="rgb(219,75,50)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.12%)</title><rect x="54.9884%" y="1173" width="0.1160%" height="15" fill="rgb(234,72,50)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="54.9884%" y="1157" width="0.1160%" height="15" fill="rgb(219,100,48)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.12%)</title><rect x="54.9884%" y="1141" width="0.1160%" height="15" fill="rgb(253,5,41)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1151.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="54.9884%" y="1125" width="0.1160%" height="15" fill="rgb(247,181,11)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1135.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="54.9884%" y="1109" width="0.1160%" height="15" fill="rgb(222,223,25)" fg:x="474" fg:w="1"/><text x="55.2384%" y="1119.50"></text></g><g><title>bson::ser::serialize_array (3 samples, 0.35%)</title><rect x="54.8724%" y="1253" width="0.3480%" height="15" fill="rgb(214,198,28)" fg:x="473" fg:w="3"/><text x="55.1224%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.12%)</title><rect x="55.1044%" y="1237" width="0.1160%" height="15" fill="rgb(230,46,43)" fg:x="475" fg:w="1"/><text x="55.3544%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.12%)</title><rect x="55.1044%" y="1221" width="0.1160%" height="15" fill="rgb(233,65,53)" fg:x="475" fg:w="1"/><text x="55.3544%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.12%)</title><rect x="55.1044%" y="1205" width="0.1160%" height="15" fill="rgb(221,121,27)" fg:x="475" fg:w="1"/><text x="55.3544%" y="1215.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="55.1044%" y="1189" width="0.1160%" height="15" fill="rgb(247,70,47)" fg:x="475" fg:w="1"/><text x="55.3544%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.12%)</title><rect x="55.1044%" y="1173" width="0.1160%" height="15" fill="rgb(228,85,35)" fg:x="475" fg:w="1"/><text x="55.3544%" y="1183.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.12%)</title><rect x="55.1044%" y="1157" width="0.1160%" height="15" fill="rgb(209,50,18)" fg:x="475" fg:w="1"/><text x="55.3544%" y="1167.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="55.1044%" y="1141" width="0.1160%" height="15" fill="rgb(250,19,35)" fg:x="475" fg:w="1"/><text x="55.3544%" y="1151.50"></text></g><g><title>bson::ser::serialize_bson (5 samples, 0.58%)</title><rect x="54.7564%" y="1269" width="0.5800%" height="15" fill="rgb(253,107,29)" fg:x="472" fg:w="5"/><text x="55.0064%" y="1279.50"></text></g><g><title>bson::ser::write_cstring (1 samples, 0.12%)</title><rect x="55.2204%" y="1253" width="0.1160%" height="15" fill="rgb(252,179,29)" fg:x="476" fg:w="1"/><text x="55.4704%" y="1263.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.12%)</title><rect x="55.2204%" y="1237" width="0.1160%" height="15" fill="rgb(238,194,6)" fg:x="476" fg:w="1"/><text x="55.4704%" y="1247.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.12%)</title><rect x="55.2204%" y="1221" width="0.1160%" height="15" fill="rgb(238,164,29)" fg:x="476" fg:w="1"/><text x="55.4704%" y="1231.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.12%)</title><rect x="55.2204%" y="1205" width="0.1160%" height="15" fill="rgb(224,25,9)" fg:x="476" fg:w="1"/><text x="55.4704%" y="1215.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.12%)</title><rect x="55.2204%" y="1189" width="0.1160%" height="15" fill="rgb(244,153,23)" fg:x="476" fg:w="1"/><text x="55.4704%" y="1199.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.12%)</title><rect x="55.2204%" y="1173" width="0.1160%" height="15" fill="rgb(212,203,14)" fg:x="476" fg:w="1"/><text x="55.4704%" y="1183.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.12%)</title><rect x="55.2204%" y="1157" width="0.1160%" height="15" fill="rgb(220,164,20)" fg:x="476" fg:w="1"/><text x="55.4704%" y="1167.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="55.4524%" y="1029" width="0.1160%" height="15" fill="rgb(222,203,48)" fg:x="478" fg:w="1"/><text x="55.7024%" y="1039.50"></text></g><g><title>bson::document::Document::to_writer (9 samples, 1.04%)</title><rect x="54.6404%" y="1285" width="1.0441%" height="15" fill="rgb(215,159,22)" fg:x="471" fg:w="9"/><text x="54.8904%" y="1295.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.35%)</title><rect x="55.3364%" y="1269" width="0.3480%" height="15" fill="rgb(216,183,47)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1279.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.35%)</title><rect x="55.3364%" y="1253" width="0.3480%" height="15" fill="rgb(229,195,25)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.35%)</title><rect x="55.3364%" y="1237" width="0.3480%" height="15" fill="rgb(224,132,51)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.35%)</title><rect x="55.3364%" y="1221" width="0.3480%" height="15" fill="rgb(240,63,7)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.35%)</title><rect x="55.3364%" y="1205" width="0.3480%" height="15" fill="rgb(249,182,41)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.35%)</title><rect x="55.3364%" y="1189" width="0.3480%" height="15" fill="rgb(243,47,26)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.35%)</title><rect x="55.3364%" y="1173" width="0.3480%" height="15" fill="rgb(233,48,2)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.35%)</title><rect x="55.3364%" y="1157" width="0.3480%" height="15" fill="rgb(244,165,34)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.35%)</title><rect x="55.3364%" y="1141" width="0.3480%" height="15" fill="rgb(207,89,7)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1151.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.35%)</title><rect x="55.3364%" y="1125" width="0.3480%" height="15" fill="rgb(244,117,36)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1135.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.35%)</title><rect x="55.3364%" y="1109" width="0.3480%" height="15" fill="rgb(226,144,34)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1119.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.35%)</title><rect x="55.3364%" y="1093" width="0.3480%" height="15" fill="rgb(213,23,19)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1103.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.35%)</title><rect x="55.3364%" y="1077" width="0.3480%" height="15" fill="rgb(217,75,12)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1087.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.35%)</title><rect x="55.3364%" y="1061" width="0.3480%" height="15" fill="rgb(224,159,17)" fg:x="477" fg:w="3"/><text x="55.5864%" y="1071.50"></text></g><g><title>_int_realloc (2 samples, 0.23%)</title><rect x="55.4524%" y="1045" width="0.2320%" height="15" fill="rgb(217,118,1)" fg:x="478" fg:w="2"/><text x="55.7024%" y="1055.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="55.5684%" y="1029" width="0.1160%" height="15" fill="rgb(232,180,48)" fg:x="479" fg:w="1"/><text x="55.8184%" y="1039.50"></text></g><g><title>bson::ser::write_cstring (1 samples, 0.12%)</title><rect x="55.6845%" y="1285" width="0.1160%" height="15" fill="rgb(230,27,33)" fg:x="480" fg:w="1"/><text x="55.9345%" y="1295.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (1 samples, 0.12%)</title><rect x="55.6845%" y="1269" width="0.1160%" height="15" fill="rgb(205,31,21)" fg:x="480" fg:w="1"/><text x="55.9345%" y="1279.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (1 samples, 0.12%)</title><rect x="55.6845%" y="1253" width="0.1160%" height="15" fill="rgb(253,59,4)" fg:x="480" fg:w="1"/><text x="55.9345%" y="1263.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.12%)</title><rect x="55.6845%" y="1237" width="0.1160%" height="15" fill="rgb(224,201,9)" fg:x="480" fg:w="1"/><text x="55.9345%" y="1247.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.12%)</title><rect x="55.6845%" y="1221" width="0.1160%" height="15" fill="rgb(229,206,30)" fg:x="480" fg:w="1"/><text x="55.9345%" y="1231.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.12%)</title><rect x="55.6845%" y="1205" width="0.1160%" height="15" fill="rgb(212,67,47)" fg:x="480" fg:w="1"/><text x="55.9345%" y="1215.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.12%)</title><rect x="55.6845%" y="1189" width="0.1160%" height="15" fill="rgb(211,96,50)" fg:x="480" fg:w="1"/><text x="55.9345%" y="1199.50"></text></g><g><title>bson::ser::serialize_bson (11 samples, 1.28%)</title><rect x="54.6404%" y="1301" width="1.2761%" height="15" fill="rgb(252,114,18)" fg:x="471" fg:w="11"/><text x="54.8904%" y="1311.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.12%)</title><rect x="55.8005%" y="1285" width="0.1160%" height="15" fill="rgb(223,58,37)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.12%)</title><rect x="55.8005%" y="1269" width="0.1160%" height="15" fill="rgb(237,70,4)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="55.8005%" y="1253" width="0.1160%" height="15" fill="rgb(244,85,46)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.12%)</title><rect x="55.8005%" y="1237" width="0.1160%" height="15" fill="rgb(223,39,52)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="55.8005%" y="1221" width="0.1160%" height="15" fill="rgb(218,200,14)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="55.8005%" y="1205" width="0.1160%" height="15" fill="rgb(208,171,16)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="55.8005%" y="1189" width="0.1160%" height="15" fill="rgb(234,200,18)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="55.8005%" y="1173" width="0.1160%" height="15" fill="rgb(228,45,11)" fg:x="481" fg:w="1"/><text x="56.0505%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="55.9165%" y="1221" width="0.1160%" height="15" fill="rgb(237,182,11)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="55.9165%" y="1205" width="0.1160%" height="15" fill="rgb(241,175,49)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="55.9165%" y="1189" width="0.1160%" height="15" fill="rgb(247,38,35)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="55.9165%" y="1173" width="0.1160%" height="15" fill="rgb(228,39,49)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1183.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="55.9165%" y="1157" width="0.1160%" height="15" fill="rgb(226,101,26)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="55.9165%" y="1141" width="0.1160%" height="15" fill="rgb(206,141,19)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1151.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="55.9165%" y="1125" width="0.1160%" height="15" fill="rgb(211,200,13)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1135.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="55.9165%" y="1109" width="0.1160%" height="15" fill="rgb(241,121,6)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1119.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="55.9165%" y="1093" width="0.1160%" height="15" fill="rgb(234,221,29)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1103.50"></text></g><g><title>_int_realloc (1 samples, 0.12%)</title><rect x="55.9165%" y="1077" width="0.1160%" height="15" fill="rgb(229,136,5)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1087.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="55.9165%" y="1061" width="0.1160%" height="15" fill="rgb(238,36,11)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="55.9165%" y="1045" width="0.1160%" height="15" fill="rgb(251,55,41)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="55.9165%" y="1029" width="0.1160%" height="15" fill="rgb(242,34,40)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="55.9165%" y="1013" width="0.1160%" height="15" fill="rgb(215,42,17)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="55.9165%" y="997" width="0.1160%" height="15" fill="rgb(207,44,46)" fg:x="482" fg:w="1"/><text x="56.1665%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="55.9165%" y="981" width="0.1160%" height="15" fill="rgb(211,206,28)" fg:x="482" fg:w="1"/><text x="56.1665%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="55.9165%" y="965" width="0.1160%" height="15" fill="rgb(237,167,16)" fg:x="482" fg:w="1"/><text x="56.1665%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="55.9165%" y="949" width="0.1160%" height="15" fill="rgb(233,66,6)" fg:x="482" fg:w="1"/><text x="56.1665%" y="959.50"></text></g><g><title>bson::ser::serialize_bson (18 samples, 2.09%)</title><rect x="54.4084%" y="1333" width="2.0882%" height="15" fill="rgb(246,123,29)" fg:x="469" fg:w="18"/><text x="54.6584%" y="1343.50">b..</text></g><g><title>bson::document::Document::to_writer (18 samples, 2.09%)</title><rect x="54.4084%" y="1317" width="2.0882%" height="15" fill="rgb(209,62,40)" fg:x="469" fg:w="18"/><text x="54.6584%" y="1327.50">b..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.58%)</title><rect x="55.9165%" y="1301" width="0.5800%" height="15" fill="rgb(218,4,25)" fg:x="482" fg:w="5"/><text x="56.1665%" y="1311.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (5 samples, 0.58%)</title><rect x="55.9165%" y="1285" width="0.5800%" height="15" fill="rgb(253,91,49)" fg:x="482" fg:w="5"/><text x="56.1665%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.58%)</title><rect x="55.9165%" y="1269" width="0.5800%" height="15" fill="rgb(228,155,29)" fg:x="482" fg:w="5"/><text x="56.1665%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.58%)</title><rect x="55.9165%" y="1253" width="0.5800%" height="15" fill="rgb(243,57,37)" fg:x="482" fg:w="5"/><text x="56.1665%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.58%)</title><rect x="55.9165%" y="1237" width="0.5800%" height="15" fill="rgb(244,167,17)" fg:x="482" fg:w="5"/><text x="56.1665%" y="1247.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.46%)</title><rect x="56.0325%" y="1221" width="0.4640%" height="15" fill="rgb(207,181,38)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1231.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.46%)</title><rect x="56.0325%" y="1205" width="0.4640%" height="15" fill="rgb(211,8,23)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1215.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1189" width="0.4640%" height="15" fill="rgb(235,11,44)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1199.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1173" width="0.4640%" height="15" fill="rgb(248,18,52)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1157" width="0.4640%" height="15" fill="rgb(208,4,7)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1141" width="0.4640%" height="15" fill="rgb(240,17,39)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1125" width="0.4640%" height="15" fill="rgb(207,170,3)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1109" width="0.4640%" height="15" fill="rgb(236,100,52)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1093" width="0.4640%" height="15" fill="rgb(246,78,51)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1103.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1077" width="0.4640%" height="15" fill="rgb(211,17,15)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1087.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1061" width="0.4640%" height="15" fill="rgb(209,59,46)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1071.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="56.0325%" y="1045" width="0.4640%" height="15" fill="rgb(210,92,25)" fg:x="483" fg:w="4"/><text x="56.2825%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="56.2645%" y="1029" width="0.2320%" height="15" fill="rgb(238,174,52)" fg:x="485" fg:w="2"/><text x="56.5145%" y="1039.50"></text></g><g><title>async_std::task::builder::Builder::blocking (79 samples, 9.16%)</title><rect x="47.4478%" y="1781" width="9.1647%" height="15" fill="rgb(230,73,7)" fg:x="409" fg:w="79"/><text x="47.6978%" y="1791.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (60 samples, 6.96%)</title><rect x="49.6520%" y="1765" width="6.9606%" height="15" fill="rgb(243,124,40)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1775.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (60 samples, 6.96%)</title><rect x="49.6520%" y="1749" width="6.9606%" height="15" fill="rgb(244,170,11)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1759.50">std::thre..</text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1733" width="6.9606%" height="15" fill="rgb(207,114,54)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1743.50">async_std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (60 samples, 6.96%)</title><rect x="49.6520%" y="1717" width="6.9606%" height="15" fill="rgb(205,42,20)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1727.50">async_std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (60 samples, 6.96%)</title><rect x="49.6520%" y="1701" width="6.9606%" height="15" fill="rgb(230,30,28)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1711.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (60 samples, 6.96%)</title><rect x="49.6520%" y="1685" width="6.9606%" height="15" fill="rgb(205,73,54)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1695.50">std::thre..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1669" width="6.9606%" height="15" fill="rgb(254,227,23)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1679.50">async_std..</text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}}::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1653" width="6.9606%" height="15" fill="rgb(228,202,34)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1663.50">async_std..</text></g><g><title>futures_lite::future::block_on (60 samples, 6.96%)</title><rect x="49.6520%" y="1637" width="6.9606%" height="15" fill="rgb(222,225,37)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1647.50">futures_l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (60 samples, 6.96%)</title><rect x="49.6520%" y="1621" width="6.9606%" height="15" fill="rgb(221,14,54)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1631.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (60 samples, 6.96%)</title><rect x="49.6520%" y="1605" width="6.9606%" height="15" fill="rgb(254,102,2)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1615.50">std::thre..</text></g><g><title>futures_lite::future::block_on::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1589" width="6.9606%" height="15" fill="rgb(232,104,17)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1599.50">futures_l..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (60 samples, 6.96%)</title><rect x="49.6520%" y="1573" width="6.9606%" height="15" fill="rgb(250,220,14)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1583.50">&lt;async_st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (60 samples, 6.96%)</title><rect x="49.6520%" y="1557" width="6.9606%" height="15" fill="rgb(241,158,9)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1567.50">async_std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (60 samples, 6.96%)</title><rect x="49.6520%" y="1541" width="6.9606%" height="15" fill="rgb(246,9,43)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1551.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (60 samples, 6.96%)</title><rect x="49.6520%" y="1525" width="6.9606%" height="15" fill="rgb(206,73,33)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1535.50">std::thre..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1509" width="6.9606%" height="15" fill="rgb(222,79,8)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1519.50">async_std..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1493" width="6.9606%" height="15" fill="rgb(234,8,54)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1503.50">&lt;async_st..</text></g><g><title>cve_ingest_rust::do_one_vec::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1477" width="6.9606%" height="15" fill="rgb(209,134,38)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1487.50">cve_inges..</text></g><g><title>cve_ingest_rust::mongo_helper::bulk_update::{{closure}} (60 samples, 6.96%)</title><rect x="49.6520%" y="1461" width="6.9606%" height="15" fill="rgb(230,127,29)" fg:x="428" fg:w="60"/><text x="49.9020%" y="1471.50">cve_inges..</text></g><g><title>mongodb::db::Database::run_command::{{closure}} (19 samples, 2.20%)</title><rect x="54.4084%" y="1445" width="2.2042%" height="15" fill="rgb(242,44,41)" fg:x="469" fg:w="19"/><text x="54.6584%" y="1455.50">m..</text></g><g><title>mongodb::db::Database::run_command_common::{{closure}} (19 samples, 2.20%)</title><rect x="54.4084%" y="1429" width="2.2042%" height="15" fill="rgb(222,56,43)" fg:x="469" fg:w="19"/><text x="54.6584%" y="1439.50">m..</text></g><g><title>mongodb::operation::run_command::RunCommand::new (19 samples, 2.20%)</title><rect x="54.4084%" y="1413" width="2.2042%" height="15" fill="rgb(238,39,47)" fg:x="469" fg:w="19"/><text x="54.6584%" y="1423.50">m..</text></g><g><title>bson::raw::document_buf::RawDocumentBuf::from_document (19 samples, 2.20%)</title><rect x="54.4084%" y="1397" width="2.2042%" height="15" fill="rgb(226,79,43)" fg:x="469" fg:w="19"/><text x="54.6584%" y="1407.50">b..</text></g><g><title>bson::document::Document::to_writer (19 samples, 2.20%)</title><rect x="54.4084%" y="1381" width="2.2042%" height="15" fill="rgb(242,105,53)" fg:x="469" fg:w="19"/><text x="54.6584%" y="1391.50">b..</text></g><g><title>bson::ser::serialize_bson (19 samples, 2.20%)</title><rect x="54.4084%" y="1365" width="2.2042%" height="15" fill="rgb(251,132,46)" fg:x="469" fg:w="19"/><text x="54.6584%" y="1375.50">b..</text></g><g><title>bson::ser::serialize_array (19 samples, 2.20%)</title><rect x="54.4084%" y="1349" width="2.2042%" height="15" fill="rgb(231,77,14)" fg:x="469" fg:w="19"/><text x="54.6584%" y="1359.50">b..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.12%)</title><rect x="56.4965%" y="1333" width="0.1160%" height="15" fill="rgb(240,135,9)" fg:x="487" fg:w="1"/><text x="56.7465%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.12%)</title><rect x="56.4965%" y="1317" width="0.1160%" height="15" fill="rgb(248,109,14)" fg:x="487" fg:w="1"/><text x="56.7465%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="56.4965%" y="1301" width="0.1160%" height="15" fill="rgb(227,146,52)" fg:x="487" fg:w="1"/><text x="56.7465%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.12%)</title><rect x="56.4965%" y="1285" width="0.1160%" height="15" fill="rgb(232,54,3)" fg:x="487" fg:w="1"/><text x="56.7465%" y="1295.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="56.4965%" y="1269" width="0.1160%" height="15" fill="rgb(229,201,43)" fg:x="487" fg:w="1"/><text x="56.7465%" y="1279.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="56.4965%" y="1253" width="0.1160%" height="15" fill="rgb(252,161,33)" fg:x="487" fg:w="1"/><text x="56.7465%" y="1263.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="56.6125%" y="1653" width="0.1160%" height="15" fill="rgb(226,146,40)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="56.6125%" y="1637" width="0.1160%" height="15" fill="rgb(219,47,25)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1647.50"></text></g><g><title>&lt;jsonit::reader::JsonSeqIterator&lt;R,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="56.6125%" y="1621" width="0.1160%" height="15" fill="rgb(250,135,13)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1631.50"></text></g><g><title>jsonit::reader::JsonSeqIterator&lt;R,O&gt;::deserialize_one_item (1 samples, 0.12%)</title><rect x="56.6125%" y="1605" width="0.1160%" height="15" fill="rgb(219,229,18)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1615.50"></text></g><g><title>cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CPE&gt;::deserialize (1 samples, 0.12%)</title><rect x="56.6125%" y="1589" width="0.1160%" height="15" fill="rgb(217,152,27)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1599.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.12%)</title><rect x="56.6125%" y="1573" width="0.1160%" height="15" fill="rgb(225,71,47)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1583.50"></text></g><g><title>&lt;cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CPE&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.12%)</title><rect x="56.6125%" y="1557" width="0.1160%" height="15" fill="rgb(220,139,14)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1567.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.12%)</title><rect x="56.6125%" y="1541" width="0.1160%" height="15" fill="rgb(247,54,32)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1551.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.12%)</title><rect x="56.6125%" y="1525" width="0.1160%" height="15" fill="rgb(252,131,39)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1535.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.12%)</title><rect x="56.6125%" y="1509" width="0.1160%" height="15" fill="rgb(210,108,39)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1519.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.12%)</title><rect x="56.6125%" y="1493" width="0.1160%" height="15" fill="rgb(205,23,29)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1503.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.12%)</title><rect x="56.6125%" y="1477" width="0.1160%" height="15" fill="rgb(246,139,46)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1487.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.12%)</title><rect x="56.6125%" y="1461" width="0.1160%" height="15" fill="rgb(250,81,26)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1471.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.12%)</title><rect x="56.6125%" y="1445" width="0.1160%" height="15" fill="rgb(214,104,7)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1455.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.12%)</title><rect x="56.6125%" y="1429" width="0.1160%" height="15" fill="rgb(233,189,8)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1439.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.12%)</title><rect x="56.6125%" y="1413" width="0.1160%" height="15" fill="rgb(228,141,17)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1423.50"></text></g><g><title>cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CpeName&gt;::deserialize (1 samples, 0.12%)</title><rect x="56.6125%" y="1397" width="0.1160%" height="15" fill="rgb(247,157,1)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1407.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.12%)</title><rect x="56.6125%" y="1381" width="0.1160%" height="15" fill="rgb(249,225,5)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1391.50"></text></g><g><title>&lt;cve_ingest_rust::_::&lt;impl serde::de::Deserialize for cve_ingest_rust::CpeName&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.12%)</title><rect x="56.6125%" y="1365" width="0.1160%" height="15" fill="rgb(242,55,13)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1375.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.12%)</title><rect x="56.6125%" y="1349" width="0.1160%" height="15" fill="rgb(230,49,50)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1359.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.12%)</title><rect x="56.6125%" y="1333" width="0.1160%" height="15" fill="rgb(241,111,38)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1343.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.12%)</title><rect x="56.6125%" y="1317" width="0.1160%" height="15" fill="rgb(252,155,4)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1327.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.12%)</title><rect x="56.6125%" y="1301" width="0.1160%" height="15" fill="rgb(212,69,32)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1311.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.12%)</title><rect x="56.6125%" y="1285" width="0.1160%" height="15" fill="rgb(243,107,47)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1295.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.12%)</title><rect x="56.6125%" y="1269" width="0.1160%" height="15" fill="rgb(247,130,12)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1279.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.12%)</title><rect x="56.6125%" y="1253" width="0.1160%" height="15" fill="rgb(233,74,16)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1263.50"></text></g><g><title>serde_json::read::IoRead&lt;R&gt;::parse_str_bytes (1 samples, 0.12%)</title><rect x="56.6125%" y="1237" width="0.1160%" height="15" fill="rgb(208,58,18)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1247.50"></text></g><g><title>serde_json::read::next_or_eof (1 samples, 0.12%)</title><rect x="56.6125%" y="1221" width="0.1160%" height="15" fill="rgb(242,225,1)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1231.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (1 samples, 0.12%)</title><rect x="56.6125%" y="1205" width="0.1160%" height="15" fill="rgb(249,39,40)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1215.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="56.6125%" y="1189" width="0.1160%" height="15" fill="rgb(207,72,44)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1199.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="56.6125%" y="1173" width="0.1160%" height="15" fill="rgb(215,193,12)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1183.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read (1 samples, 0.12%)</title><rect x="56.6125%" y="1157" width="0.1160%" height="15" fill="rgb(248,41,39)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1167.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="56.6125%" y="1141" width="0.1160%" height="15" fill="rgb(253,85,4)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1151.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="56.6125%" y="1125" width="0.1160%" height="15" fill="rgb(243,70,31)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1135.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="56.6125%" y="1109" width="0.1160%" height="15" fill="rgb(253,195,26)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1119.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="56.6125%" y="1093" width="0.1160%" height="15" fill="rgb(243,42,11)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1103.50"></text></g><g><title>flate2::zio::read (1 samples, 0.12%)</title><rect x="56.6125%" y="1077" width="0.1160%" height="15" fill="rgb(239,66,17)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1087.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.12%)</title><rect x="56.6125%" y="1061" width="0.1160%" height="15" fill="rgb(217,132,21)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1071.50"></text></g><g><title>&lt;reqwest::blocking::response::Response as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="56.6125%" y="1045" width="0.1160%" height="15" fill="rgb(252,202,21)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1055.50"></text></g><g><title>reqwest::blocking::wait::timeout (1 samples, 0.12%)</title><rect x="56.6125%" y="1029" width="0.1160%" height="15" fill="rgb(233,98,36)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1039.50"></text></g><g><title>&lt;futures_util::io::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="56.6125%" y="1013" width="0.1160%" height="15" fill="rgb(216,153,54)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1023.50"></text></g><g><title>&lt;&amp;mut T as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="56.6125%" y="997" width="0.1160%" height="15" fill="rgb(250,99,7)" fg:x="488" fg:w="1"/><text x="56.8625%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="56.6125%" y="981" width="0.1160%" height="15" fill="rgb(207,56,50)" fg:x="488" fg:w="1"/><text x="56.8625%" y="991.50"></text></g><g><title>&lt;futures_util::stream::try_stream::into_async_read::IntoAsyncRead&lt;St&gt; as futures_io::if_std::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="56.6125%" y="965" width="0.1160%" height="15" fill="rgb(244,61,34)" fg:x="488" fg:w="1"/><text x="56.8625%" y="975.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="949" width="0.1160%" height="15" fill="rgb(241,50,38)" fg:x="488" fg:w="1"/><text x="56.8625%" y="959.50"></text></g><g><title>&lt;futures_util::stream::try_stream::MapErr&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="933" width="0.1160%" height="15" fill="rgb(212,166,30)" fg:x="488" fg:w="1"/><text x="56.8625%" y="943.50"></text></g><g><title>&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="917" width="0.1160%" height="15" fill="rgb(249,127,32)" fg:x="488" fg:w="1"/><text x="56.8625%" y="927.50"></text></g><g><title>&lt;futures_util::stream::try_stream::into_stream::IntoStream&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="901" width="0.1160%" height="15" fill="rgb(209,103,0)" fg:x="488" fg:w="1"/><text x="56.8625%" y="911.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="885" width="0.1160%" height="15" fill="rgb(238,209,51)" fg:x="488" fg:w="1"/><text x="56.8625%" y="895.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="869" width="0.1160%" height="15" fill="rgb(237,56,23)" fg:x="488" fg:w="1"/><text x="56.8625%" y="879.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="853" width="0.1160%" height="15" fill="rgb(215,153,46)" fg:x="488" fg:w="1"/><text x="56.8625%" y="863.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1 samples, 0.12%)</title><rect x="56.6125%" y="837" width="0.1160%" height="15" fill="rgb(224,49,31)" fg:x="488" fg:w="1"/><text x="56.8625%" y="847.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::poll_data (1 samples, 0.12%)</title><rect x="56.6125%" y="821" width="0.1160%" height="15" fill="rgb(250,18,42)" fg:x="488" fg:w="1"/><text x="56.8625%" y="831.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 0.12%)</title><rect x="56.6125%" y="805" width="0.1160%" height="15" fill="rgb(215,176,39)" fg:x="488" fg:w="1"/><text x="56.8625%" y="815.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 0.12%)</title><rect x="56.6125%" y="789" width="0.1160%" height="15" fill="rgb(223,77,29)" fg:x="488" fg:w="1"/><text x="56.8625%" y="799.50"></text></g><g><title>hyper::body::body::Body::poll_eof (1 samples, 0.12%)</title><rect x="56.6125%" y="773" width="0.1160%" height="15" fill="rgb(234,94,52)" fg:x="488" fg:w="1"/><text x="56.8625%" y="783.50"></text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 0.12%)</title><rect x="56.6125%" y="757" width="0.1160%" height="15" fill="rgb(220,154,50)" fg:x="488" fg:w="1"/><text x="56.8625%" y="767.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.12%)</title><rect x="56.6125%" y="741" width="0.1160%" height="15" fill="rgb(212,11,10)" fg:x="488" fg:w="1"/><text x="56.8625%" y="751.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1 samples, 0.12%)</title><rect x="56.6125%" y="725" width="0.1160%" height="15" fill="rgb(205,166,19)" fg:x="488" fg:w="1"/><text x="56.8625%" y="735.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.12%)</title><rect x="56.6125%" y="709" width="0.1160%" height="15" fill="rgb(244,198,16)" fg:x="488" fg:w="1"/><text x="56.8625%" y="719.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (1 samples, 0.12%)</title><rect x="56.6125%" y="693" width="0.1160%" height="15" fill="rgb(219,69,12)" fg:x="488" fg:w="1"/><text x="56.8625%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.12%)</title><rect x="56.6125%" y="677" width="0.1160%" height="15" fill="rgb(245,30,7)" fg:x="488" fg:w="1"/><text x="56.8625%" y="687.50"></text></g><g><title>&lt;bson::ser::serde::StructSerializer as serde::ser::SerializeStruct&gt;::end (1 samples, 0.12%)</title><rect x="56.7285%" y="1573" width="0.1160%" height="15" fill="rgb(218,221,48)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1583.50"></text></g><g><title>bson::bson::Bson::from_extended_document (1 samples, 0.12%)</title><rect x="56.7285%" y="1557" width="0.1160%" height="15" fill="rgb(216,66,15)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1567.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.12%)</title><rect x="56.7285%" y="1541" width="0.1160%" height="15" fill="rgb(226,122,50)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1551.50"></text></g><g><title>&lt;bson::document::Document as core::iter::traits::collect::FromIterator&lt;(alloc::string::String,bson::bson::Bson)&gt;&gt;::from_iter (1 samples, 0.12%)</title><rect x="56.7285%" y="1525" width="0.1160%" height="15" fill="rgb(239,156,16)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1535.50"></text></g><g><title>bson::document::Document::insert (1 samples, 0.12%)</title><rect x="56.7285%" y="1509" width="0.1160%" height="15" fill="rgb(224,27,38)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1519.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.12%)</title><rect x="56.7285%" y="1493" width="0.1160%" height="15" fill="rgb(224,39,27)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1503.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.12%)</title><rect x="56.7285%" y="1477" width="0.1160%" height="15" fill="rgb(215,92,29)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1487.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.12%)</title><rect x="56.7285%" y="1461" width="0.1160%" height="15" fill="rgb(207,159,16)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1471.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (1 samples, 0.12%)</title><rect x="56.7285%" y="1445" width="0.1160%" height="15" fill="rgb(238,163,47)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1455.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (1 samples, 0.12%)</title><rect x="56.7285%" y="1429" width="0.1160%" height="15" fill="rgb(219,91,49)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.12%)</title><rect x="56.7285%" y="1413" width="0.1160%" height="15" fill="rgb(227,167,31)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.12%)</title><rect x="56.7285%" y="1397" width="0.1160%" height="15" fill="rgb(234,80,54)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.12%)</title><rect x="56.7285%" y="1381" width="0.1160%" height="15" fill="rgb(212,114,2)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.12%)</title><rect x="56.7285%" y="1365" width="0.1160%" height="15" fill="rgb(234,50,24)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1375.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="56.7285%" y="1349" width="0.1160%" height="15" fill="rgb(221,68,8)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1359.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="56.7285%" y="1333" width="0.1160%" height="15" fill="rgb(254,180,31)" fg:x="489" fg:w="1"/><text x="56.9785%" y="1343.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.12%)</title><rect x="56.8445%" y="1541" width="0.1160%" height="15" fill="rgb(247,130,50)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1551.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.12%)</title><rect x="56.8445%" y="1525" width="0.1160%" height="15" fill="rgb(211,109,4)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1535.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.12%)</title><rect x="56.8445%" y="1509" width="0.1160%" height="15" fill="rgb(238,50,21)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1519.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.12%)</title><rect x="56.8445%" y="1493" width="0.1160%" height="15" fill="rgb(225,57,45)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1503.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.12%)</title><rect x="56.8445%" y="1477" width="0.1160%" height="15" fill="rgb(209,196,50)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1487.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="56.8445%" y="1461" width="0.1160%" height="15" fill="rgb(242,140,13)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1471.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="56.8445%" y="1445" width="0.1160%" height="15" fill="rgb(217,111,7)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1455.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="56.8445%" y="1429" width="0.1160%" height="15" fill="rgb(253,193,51)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="56.8445%" y="1413" width="0.1160%" height="15" fill="rgb(252,70,29)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="56.8445%" y="1397" width="0.1160%" height="15" fill="rgb(232,127,12)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="56.8445%" y="1381" width="0.1160%" height="15" fill="rgb(211,180,21)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1391.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="56.8445%" y="1365" width="0.1160%" height="15" fill="rgb(229,72,13)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1375.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="56.8445%" y="1349" width="0.1160%" height="15" fill="rgb(240,211,49)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1359.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="56.8445%" y="1333" width="0.1160%" height="15" fill="rgb(219,149,40)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1343.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="56.8445%" y="1317" width="0.1160%" height="15" fill="rgb(210,127,46)" fg:x="490" fg:w="1"/><text x="57.0945%" y="1327.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (1 samples, 0.12%)</title><rect x="56.9606%" y="1493" width="0.1160%" height="15" fill="rgb(220,106,7)" fg:x="491" fg:w="1"/><text x="57.2106%" y="1503.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1 samples, 0.12%)</title><rect x="56.9606%" y="1477" width="0.1160%" height="15" fill="rgb(249,31,22)" fg:x="491" fg:w="1"/><text x="57.2106%" y="1487.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.12%)</title><rect x="56.9606%" y="1461" width="0.1160%" height="15" fill="rgb(253,1,49)" fg:x="491" fg:w="1"/><text x="57.2106%" y="1471.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.12%)</title><rect x="56.9606%" y="1445" width="0.1160%" height="15" fill="rgb(227,144,33)" fg:x="491" fg:w="1"/><text x="57.2106%" y="1455.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.12%)</title><rect x="56.9606%" y="1429" width="0.1160%" height="15" fill="rgb(249,163,44)" fg:x="491" fg:w="1"/><text x="57.2106%" y="1439.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.12%)</title><rect x="56.9606%" y="1413" width="0.1160%" height="15" fill="rgb(234,15,39)" fg:x="491" fg:w="1"/><text x="57.2106%" y="1423.50"></text></g><g><title>bson::document::Document::insert (5 samples, 0.58%)</title><rect x="56.8445%" y="1557" width="0.5800%" height="15" fill="rgb(207,66,16)" fg:x="490" fg:w="5"/><text x="57.0945%" y="1567.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (4 samples, 0.46%)</title><rect x="56.9606%" y="1541" width="0.4640%" height="15" fill="rgb(233,112,24)" fg:x="491" fg:w="4"/><text x="57.2106%" y="1551.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (4 samples, 0.46%)</title><rect x="56.9606%" y="1525" width="0.4640%" height="15" fill="rgb(230,90,22)" fg:x="491" fg:w="4"/><text x="57.2106%" y="1535.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (4 samples, 0.46%)</title><rect x="56.9606%" y="1509" width="0.4640%" height="15" fill="rgb(229,61,13)" fg:x="491" fg:w="4"/><text x="57.2106%" y="1519.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (3 samples, 0.35%)</title><rect x="57.0766%" y="1493" width="0.3480%" height="15" fill="rgb(225,57,24)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1503.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (3 samples, 0.35%)</title><rect x="57.0766%" y="1477" width="0.3480%" height="15" fill="rgb(208,169,48)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (3 samples, 0.35%)</title><rect x="57.0766%" y="1461" width="0.3480%" height="15" fill="rgb(244,218,51)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (3 samples, 0.35%)</title><rect x="57.0766%" y="1445" width="0.3480%" height="15" fill="rgb(214,148,10)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (3 samples, 0.35%)</title><rect x="57.0766%" y="1429" width="0.3480%" height="15" fill="rgb(225,174,27)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (3 samples, 0.35%)</title><rect x="57.0766%" y="1413" width="0.3480%" height="15" fill="rgb(230,96,26)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1423.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.35%)</title><rect x="57.0766%" y="1397" width="0.3480%" height="15" fill="rgb(232,10,30)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1407.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.35%)</title><rect x="57.0766%" y="1381" width="0.3480%" height="15" fill="rgb(222,8,50)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1391.50"></text></g><g><title>_int_malloc (3 samples, 0.35%)</title><rect x="57.0766%" y="1365" width="0.3480%" height="15" fill="rgb(213,81,27)" fg:x="492" fg:w="3"/><text x="57.3266%" y="1375.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="57.1926%" y="1349" width="0.2320%" height="15" fill="rgb(245,50,10)" fg:x="493" fg:w="2"/><text x="57.4426%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1333" width="0.1160%" height="15" fill="rgb(216,100,18)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1317" width="0.1160%" height="15" fill="rgb(236,147,54)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1301" width="0.1160%" height="15" fill="rgb(205,143,26)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1285" width="0.1160%" height="15" fill="rgb(236,26,9)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1269" width="0.1160%" height="15" fill="rgb(221,165,53)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1253" width="0.1160%" height="15" fill="rgb(214,110,17)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1237" width="0.1160%" height="15" fill="rgb(237,197,12)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1221" width="0.1160%" height="15" fill="rgb(205,84,17)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="57.3086%" y="1205" width="0.1160%" height="15" fill="rgb(237,18,45)" fg:x="494" fg:w="1"/><text x="57.5586%" y="1215.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.12%)</title><rect x="57.6566%" y="1301" width="0.1160%" height="15" fill="rgb(221,87,14)" fg:x="497" fg:w="1"/><text x="57.9066%" y="1311.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.12%)</title><rect x="57.6566%" y="1285" width="0.1160%" height="15" fill="rgb(238,186,15)" fg:x="497" fg:w="1"/><text x="57.9066%" y="1295.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.12%)</title><rect x="57.6566%" y="1269" width="0.1160%" height="15" fill="rgb(208,115,11)" fg:x="497" fg:w="1"/><text x="57.9066%" y="1279.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.12%)</title><rect x="57.7726%" y="1269" width="0.1160%" height="15" fill="rgb(254,175,0)" fg:x="498" fg:w="1"/><text x="58.0226%" y="1279.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.12%)</title><rect x="57.7726%" y="1253" width="0.1160%" height="15" fill="rgb(227,24,42)" fg:x="498" fg:w="1"/><text x="58.0226%" y="1263.50"></text></g><g><title>ahash::random_state::RandomState::from_keys (2 samples, 0.23%)</title><rect x="57.7726%" y="1301" width="0.2320%" height="15" fill="rgb(223,211,37)" fg:x="498" fg:w="2"/><text x="58.0226%" y="1311.50"></text></g><g><title>ahash::random_state::RandomState::from_keys::{{closure}} (2 samples, 0.23%)</title><rect x="57.7726%" y="1285" width="0.2320%" height="15" fill="rgb(235,49,27)" fg:x="498" fg:w="2"/><text x="58.0226%" y="1295.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1 samples, 0.12%)</title><rect x="57.8886%" y="1269" width="0.1160%" height="15" fill="rgb(254,97,51)" fg:x="499" fg:w="1"/><text x="58.1386%" y="1279.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1 samples, 0.12%)</title><rect x="57.8886%" y="1253" width="0.1160%" height="15" fill="rgb(249,51,40)" fg:x="499" fg:w="1"/><text x="58.1386%" y="1263.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.12%)</title><rect x="57.8886%" y="1237" width="0.1160%" height="15" fill="rgb(210,128,45)" fg:x="499" fg:w="1"/><text x="58.1386%" y="1247.50"></text></g><g><title>&lt;bson::ser::serde::Serializer as serde::ser::Serializer&gt;::serialize_struct (5 samples, 0.58%)</title><rect x="57.5406%" y="1381" width="0.5800%" height="15" fill="rgb(224,137,50)" fg:x="496" fg:w="5"/><text x="57.7906%" y="1391.50"></text></g><g><title>bson::document::Document::new (4 samples, 0.46%)</title><rect x="57.6566%" y="1365" width="0.4640%" height="15" fill="rgb(242,15,9)" fg:x="497" fg:w="4"/><text x="57.9066%" y="1375.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::default::Default&gt;::default (4 samples, 0.46%)</title><rect x="57.6566%" y="1349" width="0.4640%" height="15" fill="rgb(233,187,41)" fg:x="497" fg:w="4"/><text x="57.9066%" y="1359.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (4 samples, 0.46%)</title><rect x="57.6566%" y="1333" width="0.4640%" height="15" fill="rgb(227,2,29)" fg:x="497" fg:w="4"/><text x="57.9066%" y="1343.50"></text></g><g><title>ahash::random_state::RandomState::new (4 samples, 0.46%)</title><rect x="57.6566%" y="1317" width="0.4640%" height="15" fill="rgb(222,70,3)" fg:x="497" fg:w="4"/><text x="57.9066%" y="1327.50"></text></g><g><title>ahash::random_state::get_fixed_seeds (1 samples, 0.12%)</title><rect x="58.0046%" y="1301" width="0.1160%" height="15" fill="rgb(213,11,42)" fg:x="500" fg:w="1"/><text x="58.2546%" y="1311.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_init (1 samples, 0.12%)</title><rect x="58.0046%" y="1285" width="0.1160%" height="15" fill="rgb(225,150,9)" fg:x="500" fg:w="1"/><text x="58.2546%" y="1295.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.12%)</title><rect x="58.3527%" y="1269" width="0.1160%" height="15" fill="rgb(230,162,45)" fg:x="503" fg:w="1"/><text x="58.6027%" y="1279.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.12%)</title><rect x="58.3527%" y="1253" width="0.1160%" height="15" fill="rgb(222,14,52)" fg:x="503" fg:w="1"/><text x="58.6027%" y="1263.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (1 samples, 0.12%)</title><rect x="58.3527%" y="1237" width="0.1160%" height="15" fill="rgb(254,198,14)" fg:x="503" fg:w="1"/><text x="58.6027%" y="1247.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1 samples, 0.12%)</title><rect x="58.4687%" y="1237" width="0.1160%" height="15" fill="rgb(220,217,30)" fg:x="504" fg:w="1"/><text x="58.7187%" y="1247.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="58.4687%" y="1221" width="0.1160%" height="15" fill="rgb(215,146,41)" fg:x="504" fg:w="1"/><text x="58.7187%" y="1231.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.12%)</title><rect x="58.4687%" y="1205" width="0.1160%" height="15" fill="rgb(217,27,36)" fg:x="504" fg:w="1"/><text x="58.7187%" y="1215.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.12%)</title><rect x="58.4687%" y="1189" width="0.1160%" height="15" fill="rgb(219,218,39)" fg:x="504" fg:w="1"/><text x="58.7187%" y="1199.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.12%)</title><rect x="58.5847%" y="1157" width="0.1160%" height="15" fill="rgb(219,4,42)" fg:x="505" fg:w="1"/><text x="58.8347%" y="1167.50"></text></g><g><title>[unknown] (10 samples, 1.16%)</title><rect x="59.0487%" y="1109" width="1.1601%" height="15" fill="rgb(249,119,36)" fg:x="509" fg:w="10"/><text x="59.2987%" y="1119.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="1093" width="0.8121%" height="15" fill="rgb(209,23,33)" fg:x="512" fg:w="7"/><text x="59.6468%" y="1103.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="1077" width="0.8121%" height="15" fill="rgb(211,10,0)" fg:x="512" fg:w="7"/><text x="59.6468%" y="1087.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="1061" width="0.8121%" height="15" fill="rgb(208,99,37)" fg:x="512" fg:w="7"/><text x="59.6468%" y="1071.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="1045" width="0.8121%" height="15" fill="rgb(213,132,31)" fg:x="512" fg:w="7"/><text x="59.6468%" y="1055.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="1029" width="0.8121%" height="15" fill="rgb(243,129,40)" fg:x="512" fg:w="7"/><text x="59.6468%" y="1039.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="1013" width="0.8121%" height="15" fill="rgb(210,66,33)" fg:x="512" fg:w="7"/><text x="59.6468%" y="1023.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="997" width="0.8121%" height="15" fill="rgb(209,189,4)" fg:x="512" fg:w="7"/><text x="59.6468%" y="1007.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="59.3968%" y="981" width="0.8121%" height="15" fill="rgb(214,107,37)" fg:x="512" fg:w="7"/><text x="59.6468%" y="991.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="59.5128%" y="965" width="0.6961%" height="15" fill="rgb(245,88,54)" fg:x="513" fg:w="6"/><text x="59.7628%" y="975.50"></text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="59.7448%" y="949" width="0.4640%" height="15" fill="rgb(205,146,20)" fg:x="515" fg:w="4"/><text x="59.9948%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.0928%" y="933" width="0.1160%" height="15" fill="rgb(220,161,25)" fg:x="518" fg:w="1"/><text x="60.3428%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="1093" width="0.1160%" height="15" fill="rgb(215,152,15)" fg:x="519" fg:w="1"/><text x="60.4588%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="1077" width="0.1160%" height="15" fill="rgb(233,192,44)" fg:x="519" fg:w="1"/><text x="60.4588%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="1061" width="0.1160%" height="15" fill="rgb(240,170,46)" fg:x="519" fg:w="1"/><text x="60.4588%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="1045" width="0.1160%" height="15" fill="rgb(207,104,33)" fg:x="519" fg:w="1"/><text x="60.4588%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="1029" width="0.1160%" height="15" fill="rgb(219,21,39)" fg:x="519" fg:w="1"/><text x="60.4588%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="1013" width="0.1160%" height="15" fill="rgb(214,133,29)" fg:x="519" fg:w="1"/><text x="60.4588%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="997" width="0.1160%" height="15" fill="rgb(226,93,6)" fg:x="519" fg:w="1"/><text x="60.4588%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="981" width="0.1160%" height="15" fill="rgb(252,222,34)" fg:x="519" fg:w="1"/><text x="60.4588%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.2088%" y="965" width="0.1160%" height="15" fill="rgb(252,92,48)" fg:x="519" fg:w="1"/><text x="60.4588%" y="975.50"></text></g><g><title>bson::document::Document::insert (19 samples, 2.20%)</title><rect x="58.2367%" y="1317" width="2.2042%" height="15" fill="rgb(245,223,24)" fg:x="502" fg:w="19"/><text x="58.4867%" y="1327.50">b..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (19 samples, 2.20%)</title><rect x="58.2367%" y="1301" width="2.2042%" height="15" fill="rgb(205,176,3)" fg:x="502" fg:w="19"/><text x="58.4867%" y="1311.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (18 samples, 2.09%)</title><rect x="58.3527%" y="1285" width="2.0882%" height="15" fill="rgb(235,151,15)" fg:x="503" fg:w="18"/><text x="58.6027%" y="1295.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (17 samples, 1.97%)</title><rect x="58.4687%" y="1269" width="1.9722%" height="15" fill="rgb(237,209,11)" fg:x="504" fg:w="17"/><text x="58.7187%" y="1279.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (17 samples, 1.97%)</title><rect x="58.4687%" y="1253" width="1.9722%" height="15" fill="rgb(243,227,24)" fg:x="504" fg:w="17"/><text x="58.7187%" y="1263.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (16 samples, 1.86%)</title><rect x="58.5847%" y="1237" width="1.8561%" height="15" fill="rgb(239,193,16)" fg:x="505" fg:w="16"/><text x="58.8347%" y="1247.50">i..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (16 samples, 1.86%)</title><rect x="58.5847%" y="1221" width="1.8561%" height="15" fill="rgb(231,27,9)" fg:x="505" fg:w="16"/><text x="58.8347%" y="1231.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (16 samples, 1.86%)</title><rect x="58.5847%" y="1205" width="1.8561%" height="15" fill="rgb(219,169,10)" fg:x="505" fg:w="16"/><text x="58.8347%" y="1215.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (16 samples, 1.86%)</title><rect x="58.5847%" y="1189" width="1.8561%" height="15" fill="rgb(244,229,43)" fg:x="505" fg:w="16"/><text x="58.8347%" y="1199.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (16 samples, 1.86%)</title><rect x="58.5847%" y="1173" width="1.8561%" height="15" fill="rgb(254,38,20)" fg:x="505" fg:w="16"/><text x="58.8347%" y="1183.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 1.74%)</title><rect x="58.7007%" y="1157" width="1.7401%" height="15" fill="rgb(250,47,30)" fg:x="506" fg:w="15"/><text x="58.9507%" y="1167.50"></text></g><g><title>__GI___libc_malloc (15 samples, 1.74%)</title><rect x="58.7007%" y="1141" width="1.7401%" height="15" fill="rgb(224,124,36)" fg:x="506" fg:w="15"/><text x="58.9507%" y="1151.50"></text></g><g><title>_int_malloc (14 samples, 1.62%)</title><rect x="58.8167%" y="1125" width="1.6241%" height="15" fill="rgb(246,68,51)" fg:x="507" fg:w="14"/><text x="59.0667%" y="1135.50"></text></g><g><title>sysmalloc (2 samples, 0.23%)</title><rect x="60.2088%" y="1109" width="0.2320%" height="15" fill="rgb(253,43,49)" fg:x="519" fg:w="2"/><text x="60.4588%" y="1119.50"></text></g><g><title>__GI___default_morecore (1 samples, 0.12%)</title><rect x="60.3248%" y="1093" width="0.1160%" height="15" fill="rgb(219,54,36)" fg:x="520" fg:w="1"/><text x="60.5748%" y="1103.50"></text></g><g><title>__GI___sbrk (1 samples, 0.12%)</title><rect x="60.3248%" y="1077" width="0.1160%" height="15" fill="rgb(227,133,34)" fg:x="520" fg:w="1"/><text x="60.5748%" y="1087.50"></text></g><g><title>__brk (1 samples, 0.12%)</title><rect x="60.3248%" y="1061" width="0.1160%" height="15" fill="rgb(247,227,15)" fg:x="520" fg:w="1"/><text x="60.5748%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.3248%" y="1045" width="0.1160%" height="15" fill="rgb(229,96,14)" fg:x="520" fg:w="1"/><text x="60.5748%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.3248%" y="1029" width="0.1160%" height="15" fill="rgb(220,79,17)" fg:x="520" fg:w="1"/><text x="60.5748%" y="1039.50"></text></g><g><title>&lt;bson::ser::serde::StructSerializer as serde::ser::SerializeStruct&gt;::end (21 samples, 2.44%)</title><rect x="58.1206%" y="1381" width="2.4362%" height="15" fill="rgb(205,131,53)" fg:x="501" fg:w="21"/><text x="58.3706%" y="1391.50">&lt;b..</text></g><g><title>bson::bson::Bson::from_extended_document (21 samples, 2.44%)</title><rect x="58.1206%" y="1365" width="2.4362%" height="15" fill="rgb(209,50,29)" fg:x="501" fg:w="21"/><text x="58.3706%" y="1375.50">bs..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 2.32%)</title><rect x="58.2367%" y="1349" width="2.3202%" height="15" fill="rgb(245,86,46)" fg:x="502" fg:w="20"/><text x="58.4867%" y="1359.50">c..</text></g><g><title>&lt;bson::document::Document as core::iter::traits::collect::FromIterator&lt;(alloc::string::String,bson::bson::Bson)&gt;&gt;::from_iter (20 samples, 2.32%)</title><rect x="58.2367%" y="1333" width="2.3202%" height="15" fill="rgb(235,66,46)" fg:x="502" fg:w="20"/><text x="58.4867%" y="1343.50">&lt;..</text></g><g><title>bson::document::Document::new (1 samples, 0.12%)</title><rect x="60.4408%" y="1317" width="0.1160%" height="15" fill="rgb(232,148,31)" fg:x="521" fg:w="1"/><text x="60.6908%" y="1327.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.12%)</title><rect x="60.4408%" y="1301" width="0.1160%" height="15" fill="rgb(217,149,8)" fg:x="521" fg:w="1"/><text x="60.6908%" y="1311.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::default::Default&gt;::default (1 samples, 0.12%)</title><rect x="60.4408%" y="1285" width="0.1160%" height="15" fill="rgb(209,183,11)" fg:x="521" fg:w="1"/><text x="60.6908%" y="1295.50"></text></g><g><title>ahash::random_state::RandomState::new (1 samples, 0.12%)</title><rect x="60.4408%" y="1269" width="0.1160%" height="15" fill="rgb(208,55,20)" fg:x="521" fg:w="1"/><text x="60.6908%" y="1279.50"></text></g><g><title>&lt;ahash::random_state::DefaultRandomSource as ahash::random_state::RandomSource&gt;::gen_hasher_seed (1 samples, 0.12%)</title><rect x="60.4408%" y="1253" width="0.1160%" height="15" fill="rgb(218,39,14)" fg:x="521" fg:w="1"/><text x="60.6908%" y="1263.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.12%)</title><rect x="60.4408%" y="1237" width="0.1160%" height="15" fill="rgb(216,169,33)" fg:x="521" fg:w="1"/><text x="60.6908%" y="1247.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.12%)</title><rect x="60.4408%" y="1221" width="0.1160%" height="15" fill="rgb(233,80,24)" fg:x="521" fg:w="1"/><text x="60.6908%" y="1231.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.35%)</title><rect x="60.5568%" y="1349" width="0.3480%" height="15" fill="rgb(213,179,31)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1359.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (3 samples, 0.35%)</title><rect x="60.5568%" y="1333" width="0.3480%" height="15" fill="rgb(209,19,5)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1343.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (3 samples, 0.35%)</title><rect x="60.5568%" y="1317" width="0.3480%" height="15" fill="rgb(219,18,35)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1327.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (3 samples, 0.35%)</title><rect x="60.5568%" y="1301" width="0.3480%" height="15" fill="rgb(209,169,16)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.35%)</title><rect x="60.5568%" y="1285" width="0.3480%" height="15" fill="rgb(245,90,51)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.35%)</title><rect x="60.5568%" y="1269" width="0.3480%" height="15" fill="rgb(220,99,45)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.35%)</title><rect x="60.5568%" y="1253" width="0.3480%" height="15" fill="rgb(249,89,25)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.35%)</title><rect x="60.5568%" y="1237" width="0.3480%" height="15" fill="rgb(239,193,0)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.35%)</title><rect x="60.5568%" y="1221" width="0.3480%" height="15" fill="rgb(231,126,1)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.35%)</title><rect x="60.5568%" y="1205" width="0.3480%" height="15" fill="rgb(243,166,3)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.35%)</title><rect x="60.5568%" y="1189" width="0.3480%" height="15" fill="rgb(223,22,34)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.35%)</title><rect x="60.5568%" y="1173" width="0.3480%" height="15" fill="rgb(251,52,51)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.35%)</title><rect x="60.5568%" y="1157" width="0.3480%" height="15" fill="rgb(221,165,28)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.35%)</title><rect x="60.5568%" y="1141" width="0.3480%" height="15" fill="rgb(218,121,47)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1151.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.35%)</title><rect x="60.5568%" y="1125" width="0.3480%" height="15" fill="rgb(209,120,9)" fg:x="522" fg:w="3"/><text x="60.8068%" y="1135.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="60.6729%" y="1109" width="0.2320%" height="15" fill="rgb(236,68,12)" fg:x="523" fg:w="2"/><text x="60.9229%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="60.6729%" y="1093" width="0.2320%" height="15" fill="rgb(225,194,26)" fg:x="523" fg:w="2"/><text x="60.9229%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="1077" width="0.1160%" height="15" fill="rgb(231,84,39)" fg:x="524" fg:w="1"/><text x="61.0389%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="1061" width="0.1160%" height="15" fill="rgb(210,11,45)" fg:x="524" fg:w="1"/><text x="61.0389%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="1045" width="0.1160%" height="15" fill="rgb(224,54,52)" fg:x="524" fg:w="1"/><text x="61.0389%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="1029" width="0.1160%" height="15" fill="rgb(238,102,14)" fg:x="524" fg:w="1"/><text x="61.0389%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="1013" width="0.1160%" height="15" fill="rgb(243,160,52)" fg:x="524" fg:w="1"/><text x="61.0389%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="997" width="0.1160%" height="15" fill="rgb(216,114,19)" fg:x="524" fg:w="1"/><text x="61.0389%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="981" width="0.1160%" height="15" fill="rgb(244,166,37)" fg:x="524" fg:w="1"/><text x="61.0389%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="965" width="0.1160%" height="15" fill="rgb(246,29,44)" fg:x="524" fg:w="1"/><text x="61.0389%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="949" width="0.1160%" height="15" fill="rgb(215,56,53)" fg:x="524" fg:w="1"/><text x="61.0389%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="60.7889%" y="933" width="0.1160%" height="15" fill="rgb(217,60,2)" fg:x="524" fg:w="1"/><text x="61.0389%" y="943.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1 samples, 0.12%)</title><rect x="61.2529%" y="1285" width="0.1160%" height="15" fill="rgb(207,26,24)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1295.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="61.2529%" y="1269" width="0.1160%" height="15" fill="rgb(252,210,15)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1279.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.12%)</title><rect x="61.2529%" y="1253" width="0.1160%" height="15" fill="rgb(253,209,26)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1263.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.12%)</title><rect x="61.2529%" y="1237" width="0.1160%" height="15" fill="rgb(238,170,14)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1247.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.12%)</title><rect x="61.2529%" y="1221" width="0.1160%" height="15" fill="rgb(216,178,15)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1231.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.12%)</title><rect x="61.2529%" y="1205" width="0.1160%" height="15" fill="rgb(250,197,2)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1215.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.12%)</title><rect x="61.2529%" y="1189" width="0.1160%" height="15" fill="rgb(212,70,42)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1199.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.12%)</title><rect x="61.2529%" y="1173" width="0.1160%" height="15" fill="rgb(227,213,9)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1183.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1 samples, 0.12%)</title><rect x="61.2529%" y="1157" width="0.1160%" height="15" fill="rgb(245,99,25)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1167.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="61.2529%" y="1141" width="0.1160%" height="15" fill="rgb(250,82,29)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1151.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="61.2529%" y="1125" width="0.1160%" height="15" fill="rgb(241,226,54)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1135.50"></text></g><g><title>__rdl_alloc (1 samples, 0.12%)</title><rect x="61.2529%" y="1109" width="0.1160%" height="15" fill="rgb(221,99,41)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1119.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.12%)</title><rect x="61.2529%" y="1093" width="0.1160%" height="15" fill="rgb(213,90,21)" fg:x="528" fg:w="1"/><text x="61.5029%" y="1103.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (42 samples, 4.87%)</title><rect x="56.6125%" y="1717" width="4.8724%" height="15" fill="rgb(205,208,24)" fg:x="488" fg:w="42"/><text x="56.8625%" y="1727.50">&lt;async..</text></g><g><title>cve_ingest_rust::main::{{closure}} (42 samples, 4.87%)</title><rect x="56.6125%" y="1701" width="4.8724%" height="15" fill="rgb(246,31,12)" fg:x="488" fg:w="42"/><text x="56.8625%" y="1711.50">cve_in..</text></g><g><title>cve_ingest_rust::main::main::{{closure}} (42 samples, 4.87%)</title><rect x="56.6125%" y="1685" width="4.8724%" height="15" fill="rgb(213,154,6)" fg:x="488" fg:w="42"/><text x="56.8625%" y="1695.50">cve_in..</text></g><g><title>cve_ingest_rust::update_cpes::{{closure}} (42 samples, 4.87%)</title><rect x="56.6125%" y="1669" width="4.8724%" height="15" fill="rgb(222,163,29)" fg:x="488" fg:w="42"/><text x="56.8625%" y="1679.50">cve_in..</text></g><g><title>cve_ingest_rust::prepare_bulk_operation (41 samples, 4.76%)</title><rect x="56.7285%" y="1653" width="4.7564%" height="15" fill="rgb(227,201,8)" fg:x="489" fg:w="41"/><text x="56.9785%" y="1663.50">cve_in..</text></g><g><title>bson::ser::to_document (41 samples, 4.76%)</title><rect x="56.7285%" y="1637" width="4.7564%" height="15" fill="rgb(233,9,32)" fg:x="489" fg:w="41"/><text x="56.9785%" y="1647.50">bson::..</text></g><g><title>bson::ser::to_document_with_options (41 samples, 4.76%)</title><rect x="56.7285%" y="1621" width="4.7564%" height="15" fill="rgb(217,54,24)" fg:x="489" fg:w="41"/><text x="56.9785%" y="1631.50">bson::..</text></g><g><title>bson::ser::to_bson_with_options (41 samples, 4.76%)</title><rect x="56.7285%" y="1605" width="4.7564%" height="15" fill="rgb(235,192,0)" fg:x="489" fg:w="41"/><text x="56.9785%" y="1615.50">bson::..</text></g><g><title>cve_ingest_rust::_::&lt;impl serde::ser::Serialize for cve_ingest_rust::CPE&gt;::serialize (41 samples, 4.76%)</title><rect x="56.7285%" y="1589" width="4.7564%" height="15" fill="rgb(235,45,9)" fg:x="489" fg:w="41"/><text x="56.9785%" y="1599.50">cve_in..</text></g><g><title>&lt;bson::ser::serde::StructSerializer as serde::ser::SerializeStruct&gt;::serialize_field (40 samples, 4.64%)</title><rect x="56.8445%" y="1573" width="4.6404%" height="15" fill="rgb(246,42,40)" fg:x="490" fg:w="40"/><text x="57.0945%" y="1583.50">&lt;bson..</text></g><g><title>bson::ser::to_bson_with_options (35 samples, 4.06%)</title><rect x="57.4246%" y="1557" width="4.0603%" height="15" fill="rgb(248,111,24)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1567.50">bson..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (35 samples, 4.06%)</title><rect x="57.4246%" y="1541" width="4.0603%" height="15" fill="rgb(249,65,22)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1551.50">serd..</text></g><g><title>serde::ser::Serializer::collect_seq (35 samples, 4.06%)</title><rect x="57.4246%" y="1525" width="4.0603%" height="15" fill="rgb(238,111,51)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1535.50">serd..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (35 samples, 4.06%)</title><rect x="57.4246%" y="1509" width="4.0603%" height="15" fill="rgb(250,118,22)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1519.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35 samples, 4.06%)</title><rect x="57.4246%" y="1493" width="4.0603%" height="15" fill="rgb(234,84,26)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1503.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (35 samples, 4.06%)</title><rect x="57.4246%" y="1477" width="4.0603%" height="15" fill="rgb(243,172,12)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1487.50">core..</text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (35 samples, 4.06%)</title><rect x="57.4246%" y="1461" width="4.0603%" height="15" fill="rgb(236,150,49)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1471.50">serd..</text></g><g><title>&lt;bson::ser::serde::ArraySerializer as serde::ser::SerializeSeq&gt;::serialize_element (35 samples, 4.06%)</title><rect x="57.4246%" y="1445" width="4.0603%" height="15" fill="rgb(225,197,26)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1455.50">&lt;bso..</text></g><g><title>bson::ser::to_bson_with_options (35 samples, 4.06%)</title><rect x="57.4246%" y="1429" width="4.0603%" height="15" fill="rgb(214,17,42)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1439.50">bson..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (35 samples, 4.06%)</title><rect x="57.4246%" y="1413" width="4.0603%" height="15" fill="rgb(224,165,40)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1423.50">serd..</text></g><g><title>cve_ingest_rust::_::&lt;impl serde::ser::Serialize for cve_ingest_rust::CpeName&gt;::serialize (35 samples, 4.06%)</title><rect x="57.4246%" y="1397" width="4.0603%" height="15" fill="rgb(246,100,4)" fg:x="495" fg:w="35"/><text x="57.6746%" y="1407.50">cve_..</text></g><g><title>&lt;bson::ser::serde::StructSerializer as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.93%)</title><rect x="60.5568%" y="1381" width="0.9281%" height="15" fill="rgb(222,103,0)" fg:x="522" fg:w="8"/><text x="60.8068%" y="1391.50"></text></g><g><title>bson::document::Document::insert (8 samples, 0.93%)</title><rect x="60.5568%" y="1365" width="0.9281%" height="15" fill="rgb(227,189,26)" fg:x="522" fg:w="8"/><text x="60.8068%" y="1375.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (5 samples, 0.58%)</title><rect x="60.9049%" y="1349" width="0.5800%" height="15" fill="rgb(214,202,17)" fg:x="525" fg:w="5"/><text x="61.1549%" y="1359.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (4 samples, 0.46%)</title><rect x="61.0209%" y="1333" width="0.4640%" height="15" fill="rgb(229,111,3)" fg:x="526" fg:w="4"/><text x="61.2709%" y="1343.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (4 samples, 0.46%)</title><rect x="61.0209%" y="1317" width="0.4640%" height="15" fill="rgb(229,172,15)" fg:x="526" fg:w="4"/><text x="61.2709%" y="1327.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (3 samples, 0.35%)</title><rect x="61.1369%" y="1301" width="0.3480%" height="15" fill="rgb(230,224,35)" fg:x="527" fg:w="3"/><text x="61.3869%" y="1311.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (1 samples, 0.12%)</title><rect x="61.3689%" y="1285" width="0.1160%" height="15" fill="rgb(251,141,6)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1295.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (1 samples, 0.12%)</title><rect x="61.3689%" y="1269" width="0.1160%" height="15" fill="rgb(225,208,6)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.12%)</title><rect x="61.3689%" y="1253" width="0.1160%" height="15" fill="rgb(246,181,16)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.12%)</title><rect x="61.3689%" y="1237" width="0.1160%" height="15" fill="rgb(227,129,36)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1247.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.12%)</title><rect x="61.3689%" y="1221" width="0.1160%" height="15" fill="rgb(248,117,24)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1231.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="61.3689%" y="1205" width="0.1160%" height="15" fill="rgb(214,185,35)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1215.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="61.3689%" y="1189" width="0.1160%" height="15" fill="rgb(236,150,34)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1199.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="61.3689%" y="1173" width="0.1160%" height="15" fill="rgb(243,228,27)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="61.3689%" y="1157" width="0.1160%" height="15" fill="rgb(245,77,44)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="61.3689%" y="1141" width="0.1160%" height="15" fill="rgb(235,214,42)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="61.3689%" y="1125" width="0.1160%" height="15" fill="rgb(221,74,3)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="61.3689%" y="1109" width="0.1160%" height="15" fill="rgb(206,121,29)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="61.3689%" y="1093" width="0.1160%" height="15" fill="rgb(249,131,53)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="61.3689%" y="1077" width="0.1160%" height="15" fill="rgb(236,170,29)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="61.3689%" y="1061" width="0.1160%" height="15" fill="rgb(247,96,15)" fg:x="529" fg:w="1"/><text x="61.6189%" y="1071.50"></text></g><g><title>_int_free (2 samples, 0.23%)</title><rect x="61.4849%" y="1269" width="0.2320%" height="15" fill="rgb(211,210,7)" fg:x="530" fg:w="2"/><text x="61.7349%" y="1279.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.35%)</title><rect x="61.7169%" y="1253" width="0.3480%" height="15" fill="rgb(240,88,50)" fg:x="532" fg:w="3"/><text x="61.9669%" y="1263.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.35%)</title><rect x="61.7169%" y="1237" width="0.3480%" height="15" fill="rgb(209,229,26)" fg:x="532" fg:w="3"/><text x="61.9669%" y="1247.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.35%)</title><rect x="61.7169%" y="1221" width="0.3480%" height="15" fill="rgb(210,68,23)" fg:x="532" fg:w="3"/><text x="61.9669%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.35%)</title><rect x="61.7169%" y="1205" width="0.3480%" height="15" fill="rgb(229,180,13)" fg:x="532" fg:w="3"/><text x="61.9669%" y="1215.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.35%)</title><rect x="61.7169%" y="1189" width="0.3480%" height="15" fill="rgb(236,53,44)" fg:x="532" fg:w="3"/><text x="61.9669%" y="1199.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.35%)</title><rect x="61.7169%" y="1173" width="0.3480%" height="15" fill="rgb(244,214,29)" fg:x="532" fg:w="3"/><text x="61.9669%" y="1183.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.35%)</title><rect x="61.7169%" y="1157" width="0.3480%" height="15" fill="rgb(220,75,29)" fg:x="532" fg:w="3"/><text x="61.9669%" y="1167.50"></text></g><g><title>_int_realloc (2 samples, 0.23%)</title><rect x="61.8329%" y="1141" width="0.2320%" height="15" fill="rgb(214,183,37)" fg:x="533" fg:w="2"/><text x="62.0829%" y="1151.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="61.9490%" y="1125" width="0.1160%" height="15" fill="rgb(239,117,29)" fg:x="534" fg:w="1"/><text x="62.1990%" y="1135.50"></text></g><g><title>core::str::&lt;impl str&gt;::contains (2 samples, 0.23%)</title><rect x="62.0650%" y="1237" width="0.2320%" height="15" fill="rgb(237,171,35)" fg:x="535" fg:w="2"/><text x="62.3150%" y="1247.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_contained_in (2 samples, 0.23%)</title><rect x="62.0650%" y="1221" width="0.2320%" height="15" fill="rgb(229,178,53)" fg:x="535" fg:w="2"/><text x="62.3150%" y="1231.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (2 samples, 0.23%)</title><rect x="62.0650%" y="1205" width="0.2320%" height="15" fill="rgb(210,102,19)" fg:x="535" fg:w="2"/><text x="62.3150%" y="1215.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceContains&gt;::slice_contains (2 samples, 0.23%)</title><rect x="62.0650%" y="1189" width="0.2320%" height="15" fill="rgb(235,127,22)" fg:x="535" fg:w="2"/><text x="62.3150%" y="1199.50"></text></g><g><title>core::slice::memchr::memchr (2 samples, 0.23%)</title><rect x="62.0650%" y="1173" width="0.2320%" height="15" fill="rgb(244,31,31)" fg:x="535" fg:w="2"/><text x="62.3150%" y="1183.50"></text></g><g><title>core::slice::memchr::memchr_naive (2 samples, 0.23%)</title><rect x="62.0650%" y="1157" width="0.2320%" height="15" fill="rgb(231,43,21)" fg:x="535" fg:w="2"/><text x="62.3150%" y="1167.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (50 samples, 5.80%)</title><rect x="56.6125%" y="1781" width="5.8005%" height="15" fill="rgb(217,131,35)" fg:x="488" fg:w="50"/><text x="56.8625%" y="1791.50">async_s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 samples, 5.80%)</title><rect x="56.6125%" y="1765" width="5.8005%" height="15" fill="rgb(221,149,4)" fg:x="488" fg:w="50"/><text x="56.8625%" y="1775.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (50 samples, 5.80%)</title><rect x="56.6125%" y="1749" width="5.8005%" height="15" fill="rgb(232,170,28)" fg:x="488" fg:w="50"/><text x="56.8625%" y="1759.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (50 samples, 5.80%)</title><rect x="56.6125%" y="1733" width="5.8005%" height="15" fill="rgb(238,56,10)" fg:x="488" fg:w="50"/><text x="56.8625%" y="1743.50">async_s..</text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}}::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1717" width="0.9281%" height="15" fill="rgb(235,196,14)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1727.50"></text></g><g><title>futures_lite::future::block_on (8 samples, 0.93%)</title><rect x="61.4849%" y="1701" width="0.9281%" height="15" fill="rgb(216,45,48)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1711.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8 samples, 0.93%)</title><rect x="61.4849%" y="1685" width="0.9281%" height="15" fill="rgb(238,213,17)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1695.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.93%)</title><rect x="61.4849%" y="1669" width="0.9281%" height="15" fill="rgb(212,13,2)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1679.50"></text></g><g><title>futures_lite::future::block_on::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1653" width="0.9281%" height="15" fill="rgb(240,114,20)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1663.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (8 samples, 0.93%)</title><rect x="61.4849%" y="1637" width="0.9281%" height="15" fill="rgb(228,41,40)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1647.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (8 samples, 0.93%)</title><rect x="61.4849%" y="1621" width="0.9281%" height="15" fill="rgb(244,132,35)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1631.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8 samples, 0.93%)</title><rect x="61.4849%" y="1605" width="0.9281%" height="15" fill="rgb(253,189,4)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1615.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.93%)</title><rect x="61.4849%" y="1589" width="0.9281%" height="15" fill="rgb(224,37,19)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1599.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1573" width="0.9281%" height="15" fill="rgb(235,223,18)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1583.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1557" width="0.9281%" height="15" fill="rgb(235,163,25)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1567.50"></text></g><g><title>cve_ingest_rust::do_one_vec::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1541" width="0.9281%" height="15" fill="rgb(217,145,28)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1551.50"></text></g><g><title>cve_ingest_rust::mongo_helper::bulk_update::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1525" width="0.9281%" height="15" fill="rgb(223,223,32)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1535.50"></text></g><g><title>mongodb::db::Database::run_command::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1509" width="0.9281%" height="15" fill="rgb(227,189,39)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1519.50"></text></g><g><title>mongodb::db::Database::run_command_common::{{closure}} (8 samples, 0.93%)</title><rect x="61.4849%" y="1493" width="0.9281%" height="15" fill="rgb(248,10,22)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1503.50"></text></g><g><title>mongodb::operation::run_command::RunCommand::new (8 samples, 0.93%)</title><rect x="61.4849%" y="1477" width="0.9281%" height="15" fill="rgb(248,46,39)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1487.50"></text></g><g><title>bson::raw::document_buf::RawDocumentBuf::from_document (8 samples, 0.93%)</title><rect x="61.4849%" y="1461" width="0.9281%" height="15" fill="rgb(248,113,48)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1471.50"></text></g><g><title>bson::document::Document::to_writer (8 samples, 0.93%)</title><rect x="61.4849%" y="1445" width="0.9281%" height="15" fill="rgb(245,16,25)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1455.50"></text></g><g><title>bson::ser::serialize_bson (8 samples, 0.93%)</title><rect x="61.4849%" y="1429" width="0.9281%" height="15" fill="rgb(249,152,16)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1439.50"></text></g><g><title>bson::ser::serialize_array (8 samples, 0.93%)</title><rect x="61.4849%" y="1413" width="0.9281%" height="15" fill="rgb(250,16,1)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1423.50"></text></g><g><title>bson::ser::serialize_bson (8 samples, 0.93%)</title><rect x="61.4849%" y="1397" width="0.9281%" height="15" fill="rgb(249,138,3)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1407.50"></text></g><g><title>bson::document::Document::to_writer (8 samples, 0.93%)</title><rect x="61.4849%" y="1381" width="0.9281%" height="15" fill="rgb(227,71,41)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1391.50"></text></g><g><title>bson::ser::serialize_bson (8 samples, 0.93%)</title><rect x="61.4849%" y="1365" width="0.9281%" height="15" fill="rgb(209,184,23)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1375.50"></text></g><g><title>bson::document::Document::to_writer (8 samples, 0.93%)</title><rect x="61.4849%" y="1349" width="0.9281%" height="15" fill="rgb(223,215,31)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1359.50"></text></g><g><title>bson::ser::serialize_bson (8 samples, 0.93%)</title><rect x="61.4849%" y="1333" width="0.9281%" height="15" fill="rgb(210,146,28)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1343.50"></text></g><g><title>bson::ser::serialize_array (8 samples, 0.93%)</title><rect x="61.4849%" y="1317" width="0.9281%" height="15" fill="rgb(209,183,41)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1327.50"></text></g><g><title>bson::ser::serialize_bson (8 samples, 0.93%)</title><rect x="61.4849%" y="1301" width="0.9281%" height="15" fill="rgb(209,224,45)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1311.50"></text></g><g><title>bson::document::Document::to_writer (8 samples, 0.93%)</title><rect x="61.4849%" y="1285" width="0.9281%" height="15" fill="rgb(224,209,51)" fg:x="530" fg:w="8"/><text x="61.7349%" y="1295.50"></text></g><g><title>bson::ser::serialize_bson (6 samples, 0.70%)</title><rect x="61.7169%" y="1269" width="0.6961%" height="15" fill="rgb(223,17,39)" fg:x="532" fg:w="6"/><text x="61.9669%" y="1279.50"></text></g><g><title>bson::ser::write_cstring (3 samples, 0.35%)</title><rect x="62.0650%" y="1253" width="0.3480%" height="15" fill="rgb(234,204,37)" fg:x="535" fg:w="3"/><text x="62.3150%" y="1263.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.12%)</title><rect x="62.2970%" y="1237" width="0.1160%" height="15" fill="rgb(236,120,5)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.12%)</title><rect x="62.2970%" y="1221" width="0.1160%" height="15" fill="rgb(248,97,27)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.12%)</title><rect x="62.2970%" y="1205" width="0.1160%" height="15" fill="rgb(240,66,17)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.12%)</title><rect x="62.2970%" y="1189" width="0.1160%" height="15" fill="rgb(210,79,3)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1199.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="62.2970%" y="1173" width="0.1160%" height="15" fill="rgb(214,176,27)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.12%)</title><rect x="62.2970%" y="1157" width="0.1160%" height="15" fill="rgb(235,185,3)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1167.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="62.2970%" y="1141" width="0.1160%" height="15" fill="rgb(227,24,12)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1151.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="62.2970%" y="1125" width="0.1160%" height="15" fill="rgb(252,169,48)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1135.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="62.2970%" y="1109" width="0.1160%" height="15" fill="rgb(212,65,1)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="62.2970%" y="1093" width="0.1160%" height="15" fill="rgb(242,39,24)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1103.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="62.2970%" y="1077" width="0.1160%" height="15" fill="rgb(249,32,23)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1087.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="62.2970%" y="1061" width="0.1160%" height="15" fill="rgb(251,195,23)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1071.50"></text></g><g><title>__rdl_realloc (1 samples, 0.12%)</title><rect x="62.2970%" y="1045" width="0.1160%" height="15" fill="rgb(236,174,8)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1055.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.12%)</title><rect x="62.2970%" y="1029" width="0.1160%" height="15" fill="rgb(220,197,8)" fg:x="537" fg:w="1"/><text x="62.5470%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1 samples, 0.12%)</title><rect x="62.4130%" y="1781" width="0.1160%" height="15" fill="rgb(240,108,37)" fg:x="538" fg:w="1"/><text x="62.6630%" y="1791.50"></text></g><g><title>cve_ingest_rust::do_one_vec (2 samples, 0.23%)</title><rect x="62.5290%" y="1781" width="0.2320%" height="15" fill="rgb(232,176,24)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1791.50"></text></g><g><title>async_std::task::block_on::block_on (2 samples, 0.23%)</title><rect x="62.5290%" y="1765" width="0.2320%" height="15" fill="rgb(243,35,29)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1775.50"></text></g><g><title>async_std::task::builder::Builder::blocking (2 samples, 0.23%)</title><rect x="62.5290%" y="1749" width="0.2320%" height="15" fill="rgb(210,37,18)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1759.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.23%)</title><rect x="62.5290%" y="1733" width="0.2320%" height="15" fill="rgb(224,184,40)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1743.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.23%)</title><rect x="62.5290%" y="1717" width="0.2320%" height="15" fill="rgb(236,39,29)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1727.50"></text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1701" width="0.2320%" height="15" fill="rgb(232,48,39)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1711.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2 samples, 0.23%)</title><rect x="62.5290%" y="1685" width="0.2320%" height="15" fill="rgb(236,34,42)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1695.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.23%)</title><rect x="62.5290%" y="1669" width="0.2320%" height="15" fill="rgb(243,106,37)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1679.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.23%)</title><rect x="62.5290%" y="1653" width="0.2320%" height="15" fill="rgb(218,96,6)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1663.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1637" width="0.2320%" height="15" fill="rgb(235,130,12)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1647.50"></text></g><g><title>async_std::task::builder::Builder::blocking::{{closure}}::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1621" width="0.2320%" height="15" fill="rgb(231,95,0)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1631.50"></text></g><g><title>futures_lite::future::block_on (2 samples, 0.23%)</title><rect x="62.5290%" y="1605" width="0.2320%" height="15" fill="rgb(228,12,23)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1615.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.23%)</title><rect x="62.5290%" y="1589" width="0.2320%" height="15" fill="rgb(216,12,1)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1599.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.23%)</title><rect x="62.5290%" y="1573" width="0.2320%" height="15" fill="rgb(219,59,3)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1583.50"></text></g><g><title>futures_lite::future::block_on::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1557" width="0.2320%" height="15" fill="rgb(215,208,46)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1567.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.23%)</title><rect x="62.5290%" y="1541" width="0.2320%" height="15" fill="rgb(254,224,29)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1551.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2 samples, 0.23%)</title><rect x="62.5290%" y="1525" width="0.2320%" height="15" fill="rgb(232,14,29)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1535.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.23%)</title><rect x="62.5290%" y="1509" width="0.2320%" height="15" fill="rgb(208,45,52)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1519.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.23%)</title><rect x="62.5290%" y="1493" width="0.2320%" height="15" fill="rgb(234,191,28)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1503.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1477" width="0.2320%" height="15" fill="rgb(244,67,43)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1487.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1461" width="0.2320%" height="15" fill="rgb(236,189,24)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1471.50"></text></g><g><title>cve_ingest_rust::do_one_vec::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1445" width="0.2320%" height="15" fill="rgb(239,214,33)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1455.50"></text></g><g><title>cve_ingest_rust::mongo_helper::bulk_update::{{closure}} (2 samples, 0.23%)</title><rect x="62.5290%" y="1429" width="0.2320%" height="15" fill="rgb(226,176,41)" fg:x="539" fg:w="2"/><text x="62.7790%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="62.6450%" y="1413" width="0.1160%" height="15" fill="rgb(248,47,8)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1423.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="62.6450%" y="1397" width="0.1160%" height="15" fill="rgb(218,81,44)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1381" width="0.1160%" height="15" fill="rgb(213,98,6)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1365" width="0.1160%" height="15" fill="rgb(222,85,22)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1349" width="0.1160%" height="15" fill="rgb(239,46,39)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1333" width="0.1160%" height="15" fill="rgb(237,12,29)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1317" width="0.1160%" height="15" fill="rgb(214,77,8)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1301" width="0.1160%" height="15" fill="rgb(217,168,37)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1285" width="0.1160%" height="15" fill="rgb(221,217,23)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1269" width="0.1160%" height="15" fill="rgb(243,229,36)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1253" width="0.1160%" height="15" fill="rgb(251,163,40)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1237" width="0.1160%" height="15" fill="rgb(237,222,12)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.6450%" y="1221" width="0.1160%" height="15" fill="rgb(248,132,6)" fg:x="540" fg:w="1"/><text x="62.8950%" y="1231.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (1 samples, 0.12%)</title><rect x="62.7610%" y="1781" width="0.1160%" height="15" fill="rgb(227,167,50)" fg:x="541" fg:w="1"/><text x="63.0110%" y="1791.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="62.7610%" y="1765" width="0.1160%" height="15" fill="rgb(242,84,37)" fg:x="541" fg:w="1"/><text x="63.0110%" y="1775.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="62.7610%" y="1749" width="0.1160%" height="15" fill="rgb(212,4,50)" fg:x="541" fg:w="1"/><text x="63.0110%" y="1759.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="62.7610%" y="1733" width="0.1160%" height="15" fill="rgb(230,228,32)" fg:x="541" fg:w="1"/><text x="63.0110%" y="1743.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="62.7610%" y="1717" width="0.1160%" height="15" fill="rgb(248,217,23)" fg:x="541" fg:w="1"/><text x="63.0110%" y="1727.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="62.7610%" y="1701" width="0.1160%" height="15" fill="rgb(238,197,32)" fg:x="541" fg:w="1"/><text x="63.0110%" y="1711.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="62.7610%" y="1685" width="0.1160%" height="15" fill="rgb(236,106,1)" fg:x="541" fg:w="1"/><text x="63.0110%" y="1695.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (2 samples, 0.23%)</title><rect x="62.8770%" y="1781" width="0.2320%" height="15" fill="rgb(219,228,13)" fg:x="542" fg:w="2"/><text x="63.1270%" y="1791.50"></text></g><g><title>[unknown] (357 samples, 41.42%)</title><rect x="21.8097%" y="1797" width="41.4153%" height="15" fill="rgb(238,30,35)" fg:x="188" fg:w="357"/><text x="22.0597%" y="1807.50">[unknown]</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.12%)</title><rect x="63.1090%" y="1781" width="0.1160%" height="15" fill="rgb(236,70,23)" fg:x="544" fg:w="1"/><text x="63.3590%" y="1791.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.12%)</title><rect x="63.1090%" y="1765" width="0.1160%" height="15" fill="rgb(249,104,48)" fg:x="544" fg:w="1"/><text x="63.3590%" y="1775.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.12%)</title><rect x="63.1090%" y="1749" width="0.1160%" height="15" fill="rgb(254,117,50)" fg:x="544" fg:w="1"/><text x="63.3590%" y="1759.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.12%)</title><rect x="63.1090%" y="1733" width="0.1160%" height="15" fill="rgb(223,152,4)" fg:x="544" fg:w="1"/><text x="63.3590%" y="1743.50"></text></g><g><title>[unknown] (242 samples, 28.07%)</title><rect x="63.3411%" y="1781" width="28.0742%" height="15" fill="rgb(245,6,2)" fg:x="546" fg:w="242"/><text x="63.5911%" y="1791.50">[unknown]</text></g><g><title>[unknown] (240 samples, 27.84%)</title><rect x="63.5731%" y="1765" width="27.8422%" height="15" fill="rgb(249,150,24)" fg:x="548" fg:w="240"/><text x="63.8231%" y="1775.50">[unknown]</text></g><g><title>[unknown] (239 samples, 27.73%)</title><rect x="63.6891%" y="1749" width="27.7262%" height="15" fill="rgb(228,185,42)" fg:x="549" fg:w="239"/><text x="63.9391%" y="1759.50">[unknown]</text></g><g><title>[unknown] (237 samples, 27.49%)</title><rect x="63.9211%" y="1733" width="27.4942%" height="15" fill="rgb(226,39,33)" fg:x="551" fg:w="237"/><text x="64.1711%" y="1743.50">[unknown]</text></g><g><title>[unknown] (234 samples, 27.15%)</title><rect x="64.2691%" y="1717" width="27.1462%" height="15" fill="rgb(221,166,19)" fg:x="554" fg:w="234"/><text x="64.5191%" y="1727.50">[unknown]</text></g><g><title>[unknown] (234 samples, 27.15%)</title><rect x="64.2691%" y="1701" width="27.1462%" height="15" fill="rgb(209,109,2)" fg:x="554" fg:w="234"/><text x="64.5191%" y="1711.50">[unknown]</text></g><g><title>[unknown] (234 samples, 27.15%)</title><rect x="64.2691%" y="1685" width="27.1462%" height="15" fill="rgb(252,216,26)" fg:x="554" fg:w="234"/><text x="64.5191%" y="1695.50">[unknown]</text></g><g><title>[unknown] (234 samples, 27.15%)</title><rect x="64.2691%" y="1669" width="27.1462%" height="15" fill="rgb(227,173,36)" fg:x="554" fg:w="234"/><text x="64.5191%" y="1679.50">[unknown]</text></g><g><title>[unknown] (4 samples, 0.46%)</title><rect x="91.4153%" y="1765" width="0.4640%" height="15" fill="rgb(209,90,7)" fg:x="788" fg:w="4"/><text x="91.6653%" y="1775.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="91.7633%" y="1749" width="0.1160%" height="15" fill="rgb(250,194,11)" fg:x="791" fg:w="1"/><text x="92.0133%" y="1759.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.12%)</title><rect x="91.8794%" y="1765" width="0.1160%" height="15" fill="rgb(220,72,50)" fg:x="792" fg:w="1"/><text x="92.1294%" y="1775.50"></text></g><g><title>__GI___sigsetjmp (1 samples, 0.12%)</title><rect x="91.9954%" y="1765" width="0.1160%" height="15" fill="rgb(222,106,48)" fg:x="793" fg:w="1"/><text x="92.2454%" y="1775.50"></text></g><g><title>__sigaltstack (3 samples, 0.35%)</title><rect x="92.1114%" y="1717" width="0.3480%" height="15" fill="rgb(216,220,45)" fg:x="794" fg:w="3"/><text x="92.3614%" y="1727.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="92.1114%" y="1701" width="0.3480%" height="15" fill="rgb(234,112,18)" fg:x="794" fg:w="3"/><text x="92.3614%" y="1711.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.3434%" y="1685" width="0.1160%" height="15" fill="rgb(206,179,9)" fg:x="796" fg:w="1"/><text x="92.5934%" y="1695.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.12%)</title><rect x="92.4594%" y="1717" width="0.1160%" height="15" fill="rgb(215,115,40)" fg:x="797" fg:w="1"/><text x="92.7094%" y="1727.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.12%)</title><rect x="92.4594%" y="1701" width="0.1160%" height="15" fill="rgb(222,69,34)" fg:x="797" fg:w="1"/><text x="92.7094%" y="1711.50"></text></g><g><title>__GI___mmap64 (12 samples, 1.39%)</title><rect x="92.5754%" y="1685" width="1.3921%" height="15" fill="rgb(209,161,10)" fg:x="798" fg:w="12"/><text x="92.8254%" y="1695.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="92.5754%" y="1669" width="1.3921%" height="15" fill="rgb(217,6,38)" fg:x="798" fg:w="12"/><text x="92.8254%" y="1679.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="92.5754%" y="1653" width="1.3921%" height="15" fill="rgb(229,229,48)" fg:x="798" fg:w="12"/><text x="92.8254%" y="1663.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="92.5754%" y="1637" width="1.3921%" height="15" fill="rgb(225,21,28)" fg:x="798" fg:w="12"/><text x="92.8254%" y="1647.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="92.5754%" y="1621" width="1.3921%" height="15" fill="rgb(206,33,13)" fg:x="798" fg:w="12"/><text x="92.8254%" y="1631.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="92.5754%" y="1605" width="1.3921%" height="15" fill="rgb(242,178,17)" fg:x="798" fg:w="12"/><text x="92.8254%" y="1615.50"></text></g><g><title>[unknown] (12 samples, 1.39%)</title><rect x="92.5754%" y="1589" width="1.3921%" height="15" fill="rgb(220,162,5)" fg:x="798" fg:w="12"/><text x="92.8254%" y="1599.50"></text></g><g><title>[unknown] (8 samples, 0.93%)</title><rect x="93.0394%" y="1573" width="0.9281%" height="15" fill="rgb(210,33,43)" fg:x="802" fg:w="8"/><text x="93.2894%" y="1583.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="93.1555%" y="1557" width="0.8121%" height="15" fill="rgb(216,116,54)" fg:x="803" fg:w="7"/><text x="93.4055%" y="1567.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="93.2715%" y="1541" width="0.6961%" height="15" fill="rgb(249,92,24)" fg:x="804" fg:w="6"/><text x="93.5215%" y="1551.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="93.3875%" y="1525" width="0.5800%" height="15" fill="rgb(231,189,14)" fg:x="805" fg:w="5"/><text x="93.6375%" y="1535.50"></text></g><g><title>__GI___mprotect (1 samples, 0.12%)</title><rect x="93.9675%" y="1685" width="0.1160%" height="15" fill="rgb(230,8,41)" fg:x="810" fg:w="1"/><text x="94.2175%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.9675%" y="1669" width="0.1160%" height="15" fill="rgb(249,7,27)" fg:x="810" fg:w="1"/><text x="94.2175%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.9675%" y="1653" width="0.1160%" height="15" fill="rgb(232,86,5)" fg:x="810" fg:w="1"/><text x="94.2175%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.9675%" y="1637" width="0.1160%" height="15" fill="rgb(224,175,18)" fg:x="810" fg:w="1"/><text x="94.2175%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.9675%" y="1621" width="0.1160%" height="15" fill="rgb(220,129,12)" fg:x="810" fg:w="1"/><text x="94.2175%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="93.9675%" y="1605" width="0.1160%" height="15" fill="rgb(210,19,36)" fg:x="810" fg:w="1"/><text x="94.2175%" y="1615.50"></text></g><g><title>__GI___clone (268 samples, 31.09%)</title><rect x="63.2251%" y="1797" width="31.0905%" height="15" fill="rgb(219,96,14)" fg:x="545" fg:w="268"/><text x="63.4751%" y="1807.50">__GI___clone</text></g><g><title>start_thread (25 samples, 2.90%)</title><rect x="91.4153%" y="1781" width="2.9002%" height="15" fill="rgb(249,106,1)" fg:x="788" fg:w="25"/><text x="91.6653%" y="1791.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (19 samples, 2.20%)</title><rect x="92.1114%" y="1765" width="2.2042%" height="15" fill="rgb(249,155,20)" fg:x="794" fg:w="19"/><text x="92.3614%" y="1775.50">s..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (19 samples, 2.20%)</title><rect x="92.1114%" y="1749" width="2.2042%" height="15" fill="rgb(244,168,9)" fg:x="794" fg:w="19"/><text x="92.3614%" y="1759.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (19 samples, 2.20%)</title><rect x="92.1114%" y="1733" width="2.2042%" height="15" fill="rgb(216,23,50)" fg:x="794" fg:w="19"/><text x="92.3614%" y="1743.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (15 samples, 1.74%)</title><rect x="92.5754%" y="1717" width="1.7401%" height="15" fill="rgb(224,219,20)" fg:x="798" fg:w="15"/><text x="92.8254%" y="1727.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (15 samples, 1.74%)</title><rect x="92.5754%" y="1701" width="1.7401%" height="15" fill="rgb(222,156,15)" fg:x="798" fg:w="15"/><text x="92.8254%" y="1711.50"></text></g><g><title>std::sys::unix::os::page_size (2 samples, 0.23%)</title><rect x="94.0835%" y="1685" width="0.2320%" height="15" fill="rgb(231,97,17)" fg:x="811" fg:w="2"/><text x="94.3335%" y="1695.50"></text></g><g><title>__GI___sysconf (2 samples, 0.23%)</title><rect x="94.0835%" y="1669" width="0.2320%" height="15" fill="rgb(218,70,48)" fg:x="811" fg:w="2"/><text x="94.3335%" y="1679.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.12%)</title><rect x="94.1995%" y="1653" width="0.1160%" height="15" fill="rgb(212,196,52)" fg:x="812" fg:w="1"/><text x="94.4495%" y="1663.50"></text></g><g><title>__libc_start_main (1 samples, 0.12%)</title><rect x="94.3155%" y="1781" width="0.1160%" height="15" fill="rgb(243,203,18)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1791.50"></text></g><g><title>main (1 samples, 0.12%)</title><rect x="94.3155%" y="1765" width="0.1160%" height="15" fill="rgb(252,125,41)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1775.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.12%)</title><rect x="94.3155%" y="1749" width="0.1160%" height="15" fill="rgb(223,180,33)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1759.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.12%)</title><rect x="94.3155%" y="1733" width="0.1160%" height="15" fill="rgb(254,159,46)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1743.50"></text></g><g><title>std::panicking::try (1 samples, 0.12%)</title><rect x="94.3155%" y="1717" width="0.1160%" height="15" fill="rgb(254,38,10)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1727.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.12%)</title><rect x="94.3155%" y="1701" width="0.1160%" height="15" fill="rgb(208,217,32)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1711.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.12%)</title><rect x="94.3155%" y="1685" width="0.1160%" height="15" fill="rgb(221,120,13)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1695.50"></text></g><g><title>std::rt::init (1 samples, 0.12%)</title><rect x="94.3155%" y="1669" width="0.1160%" height="15" fill="rgb(246,54,52)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1679.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.12%)</title><rect x="94.3155%" y="1653" width="0.1160%" height="15" fill="rgb(242,34,25)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1663.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.12%)</title><rect x="94.3155%" y="1637" width="0.1160%" height="15" fill="rgb(247,209,9)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1647.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.12%)</title><rect x="94.3155%" y="1621" width="0.1160%" height="15" fill="rgb(228,71,26)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1631.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.12%)</title><rect x="94.3155%" y="1605" width="0.1160%" height="15" fill="rgb(222,145,49)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1615.50"></text></g><g><title>_IO_getdelim (1 samples, 0.12%)</title><rect x="94.3155%" y="1589" width="0.1160%" height="15" fill="rgb(218,121,17)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1599.50"></text></g><g><title>__GI__IO_file_underflow (1 samples, 0.12%)</title><rect x="94.3155%" y="1573" width="0.1160%" height="15" fill="rgb(244,50,7)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1583.50"></text></g><g><title>__GI___read_nocancel (1 samples, 0.12%)</title><rect x="94.3155%" y="1557" width="0.1160%" height="15" fill="rgb(246,229,37)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1541" width="0.1160%" height="15" fill="rgb(225,18,5)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1525" width="0.1160%" height="15" fill="rgb(213,204,8)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1509" width="0.1160%" height="15" fill="rgb(238,103,6)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1493" width="0.1160%" height="15" fill="rgb(222,25,35)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1477" width="0.1160%" height="15" fill="rgb(213,203,35)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1461" width="0.1160%" height="15" fill="rgb(221,79,53)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1445" width="0.1160%" height="15" fill="rgb(243,200,35)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.3155%" y="1429" width="0.1160%" height="15" fill="rgb(248,60,25)" fg:x="813" fg:w="1"/><text x="94.5655%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1749" width="0.1160%" height="15" fill="rgb(227,53,46)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1759.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1733" width="0.1160%" height="15" fill="rgb(216,120,32)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1743.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1717" width="0.1160%" height="15" fill="rgb(220,134,1)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1727.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1701" width="0.1160%" height="15" fill="rgb(237,168,5)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1711.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1685" width="0.1160%" height="15" fill="rgb(231,100,33)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1669" width="0.1160%" height="15" fill="rgb(236,177,47)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1653" width="0.1160%" height="15" fill="rgb(235,7,49)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1637" width="0.1160%" height="15" fill="rgb(232,119,22)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1621" width="0.1160%" height="15" fill="rgb(254,73,53)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1605" width="0.1160%" height="15" fill="rgb(251,35,20)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.4316%" y="1589" width="0.1160%" height="15" fill="rgb(241,119,20)" fg:x="814" fg:w="1"/><text x="94.6816%" y="1599.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.12%)</title><rect x="94.5476%" y="1733" width="0.1160%" height="15" fill="rgb(207,102,14)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1743.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.12%)</title><rect x="94.5476%" y="1717" width="0.1160%" height="15" fill="rgb(248,201,50)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1727.50"></text></g><g><title>openaux (1 samples, 0.12%)</title><rect x="94.5476%" y="1701" width="0.1160%" height="15" fill="rgb(222,185,44)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1711.50"></text></g><g><title>_dl_map_object (1 samples, 0.12%)</title><rect x="94.5476%" y="1685" width="0.1160%" height="15" fill="rgb(218,107,18)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1695.50"></text></g><g><title>open_verify.constprop.0 (1 samples, 0.12%)</title><rect x="94.5476%" y="1669" width="0.1160%" height="15" fill="rgb(237,177,39)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1679.50"></text></g><g><title>__GI___open_nocancel (1 samples, 0.12%)</title><rect x="94.5476%" y="1653" width="0.1160%" height="15" fill="rgb(246,69,6)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1637" width="0.1160%" height="15" fill="rgb(234,208,37)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1621" width="0.1160%" height="15" fill="rgb(225,4,6)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1605" width="0.1160%" height="15" fill="rgb(233,45,0)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1589" width="0.1160%" height="15" fill="rgb(226,136,5)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1599.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1573" width="0.1160%" height="15" fill="rgb(211,91,47)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1557" width="0.1160%" height="15" fill="rgb(242,88,51)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1541" width="0.1160%" height="15" fill="rgb(230,91,28)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1525" width="0.1160%" height="15" fill="rgb(254,186,29)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1509" width="0.1160%" height="15" fill="rgb(238,6,4)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="94.5476%" y="1493" width="0.1160%" height="15" fill="rgb(221,151,16)" fg:x="815" fg:w="1"/><text x="94.7976%" y="1503.50"></text></g><g><title>_start (5 samples, 0.58%)</title><rect x="94.3155%" y="1797" width="0.5800%" height="15" fill="rgb(251,143,52)" fg:x="813" fg:w="5"/><text x="94.5655%" y="1807.50"></text></g><g><title>_dl_start (4 samples, 0.46%)</title><rect x="94.4316%" y="1781" width="0.4640%" height="15" fill="rgb(206,90,15)" fg:x="814" fg:w="4"/><text x="94.6816%" y="1791.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.46%)</title><rect x="94.4316%" y="1765" width="0.4640%" height="15" fill="rgb(218,35,8)" fg:x="814" fg:w="4"/><text x="94.6816%" y="1775.50"></text></g><g><title>dl_main (3 samples, 0.35%)</title><rect x="94.5476%" y="1749" width="0.3480%" height="15" fill="rgb(239,215,6)" fg:x="815" fg:w="3"/><text x="94.7976%" y="1759.50"></text></g><g><title>_dl_relocate_object (2 samples, 0.23%)</title><rect x="94.6636%" y="1733" width="0.2320%" height="15" fill="rgb(245,116,39)" fg:x="816" fg:w="2"/><text x="94.9136%" y="1743.50"></text></g><g><title>crc32fast::Hasher::update (1 samples, 0.12%)</title><rect x="94.8956%" y="1797" width="0.1160%" height="15" fill="rgb(242,65,28)" fg:x="818" fg:w="1"/><text x="95.1456%" y="1807.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (1 samples, 0.12%)</title><rect x="94.8956%" y="1781" width="0.1160%" height="15" fill="rgb(252,132,53)" fg:x="818" fg:w="1"/><text x="95.1456%" y="1791.50"></text></g><g><title>cve-ingest-rust (691 samples, 80.16%)</title><rect x="15.1972%" y="1813" width="80.1624%" height="15" fill="rgb(224,159,50)" fg:x="131" fg:w="691"/><text x="15.4472%" y="1823.50">cve-ingest-rust</text></g><g><title>crc32fast::baseline::update_fast_16 (3 samples, 0.35%)</title><rect x="95.0116%" y="1797" width="0.3480%" height="15" fill="rgb(224,93,4)" fg:x="819" fg:w="3"/><text x="95.2616%" y="1807.50"></text></g><g><title>perf (7 samples, 0.81%)</title><rect x="95.3596%" y="1813" width="0.8121%" height="15" fill="rgb(208,81,34)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1823.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1797" width="0.8121%" height="15" fill="rgb(233,92,54)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1807.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1781" width="0.8121%" height="15" fill="rgb(237,21,14)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1791.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1765" width="0.8121%" height="15" fill="rgb(249,128,51)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1775.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1749" width="0.8121%" height="15" fill="rgb(223,129,24)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1759.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1733" width="0.8121%" height="15" fill="rgb(231,168,25)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1743.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1717" width="0.8121%" height="15" fill="rgb(224,39,20)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1727.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1701" width="0.8121%" height="15" fill="rgb(225,152,53)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1711.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1685" width="0.8121%" height="15" fill="rgb(252,17,24)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1695.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1669" width="0.8121%" height="15" fill="rgb(250,114,30)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1679.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1653" width="0.8121%" height="15" fill="rgb(229,5,4)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1663.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1637" width="0.8121%" height="15" fill="rgb(225,176,49)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1647.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1621" width="0.8121%" height="15" fill="rgb(224,221,49)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1631.50"></text></g><g><title>[unknown] (7 samples, 0.81%)</title><rect x="95.3596%" y="1605" width="0.8121%" height="15" fill="rgb(253,169,27)" fg:x="822" fg:w="7"/><text x="95.6096%" y="1615.50"></text></g><g><title>X509_NAME_cmp (1 samples, 0.12%)</title><rect x="96.1717%" y="1797" width="0.1160%" height="15" fill="rgb(211,206,16)" fg:x="829" fg:w="1"/><text x="96.4217%" y="1807.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnecting&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="96.2877%" y="1749" width="0.1160%" height="15" fill="rgb(244,87,35)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1759.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="96.2877%" y="1733" width="0.1160%" height="15" fill="rgb(246,28,10)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1743.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.12%)</title><rect x="96.2877%" y="1717" width="0.1160%" height="15" fill="rgb(229,12,44)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1727.50"></text></g><g><title>&lt;hyper::client::connect::http::HttpConnecting&lt;R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="96.2877%" y="1701" width="0.1160%" height="15" fill="rgb(210,145,37)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1711.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="96.2877%" y="1685" width="0.1160%" height="15" fill="rgb(227,112,52)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1695.50"></text></g><g><title>&lt;hyper::client::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.12%)</title><rect x="96.2877%" y="1669" width="0.1160%" height="15" fill="rgb(238,155,34)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1679.50"></text></g><g><title>hyper::client::connect::http::HttpConnector&lt;R&gt;::call_async::{{closure}} (1 samples, 0.12%)</title><rect x="96.2877%" y="1653" width="0.1160%" height="15" fill="rgb(239,226,36)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1663.50"></text></g><g><title>hyper::client::connect::http::ConnectingTcp::connect::{{closure}} (1 samples, 0.12%)</title><rect x="96.2877%" y="1637" width="0.1160%" height="15" fill="rgb(230,16,23)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1647.50"></text></g><g><title>hyper::client::connect::http::ConnectingTcpRemote::connect::{{closure}} (1 samples, 0.12%)</title><rect x="96.2877%" y="1621" width="0.1160%" height="15" fill="rgb(236,171,36)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1631.50"></text></g><g><title>hyper::client::connect::http::connect::{{closure}} (1 samples, 0.12%)</title><rect x="96.2877%" y="1605" width="0.1160%" height="15" fill="rgb(221,22,14)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1615.50"></text></g><g><title>tokio::net::tcp::socket::TcpSocket::connect::{{closure}} (1 samples, 0.12%)</title><rect x="96.2877%" y="1589" width="0.1160%" height="15" fill="rgb(242,43,11)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1599.50"></text></g><g><title>socket2::socket::Socket::connect (1 samples, 0.12%)</title><rect x="96.2877%" y="1573" width="0.1160%" height="15" fill="rgb(232,69,23)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1583.50"></text></g><g><title>socket2::sys::connect (1 samples, 0.12%)</title><rect x="96.2877%" y="1557" width="0.1160%" height="15" fill="rgb(216,180,54)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1567.50"></text></g><g><title>__libc_connect (1 samples, 0.12%)</title><rect x="96.2877%" y="1541" width="0.1160%" height="15" fill="rgb(216,5,24)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1525" width="0.1160%" height="15" fill="rgb(225,89,9)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1509" width="0.1160%" height="15" fill="rgb(243,75,33)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1493" width="0.1160%" height="15" fill="rgb(247,141,45)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1503.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1477" width="0.1160%" height="15" fill="rgb(232,177,36)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1487.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1461" width="0.1160%" height="15" fill="rgb(219,125,36)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1471.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1445" width="0.1160%" height="15" fill="rgb(227,94,9)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1429" width="0.1160%" height="15" fill="rgb(240,34,52)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1413" width="0.1160%" height="15" fill="rgb(216,45,12)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1397" width="0.1160%" height="15" fill="rgb(246,21,19)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1381" width="0.1160%" height="15" fill="rgb(213,98,42)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1365" width="0.1160%" height="15" fill="rgb(250,136,47)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1349" width="0.1160%" height="15" fill="rgb(251,124,27)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1333" width="0.1160%" height="15" fill="rgb(229,180,14)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1317" width="0.1160%" height="15" fill="rgb(245,216,25)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1301" width="0.1160%" height="15" fill="rgb(251,43,5)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1285" width="0.1160%" height="15" fill="rgb(250,128,24)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1295.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1269" width="0.1160%" height="15" fill="rgb(217,117,27)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1279.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1253" width="0.1160%" height="15" fill="rgb(245,147,4)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1263.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1237" width="0.1160%" height="15" fill="rgb(242,201,35)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1247.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1221" width="0.1160%" height="15" fill="rgb(218,181,1)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1231.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1205" width="0.1160%" height="15" fill="rgb(222,6,29)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1215.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1189" width="0.1160%" height="15" fill="rgb(208,186,3)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1199.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1173" width="0.1160%" height="15" fill="rgb(216,36,26)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1183.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1157" width="0.1160%" height="15" fill="rgb(248,201,23)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1167.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1141" width="0.1160%" height="15" fill="rgb(251,170,31)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1151.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1125" width="0.1160%" height="15" fill="rgb(207,110,25)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1135.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1109" width="0.1160%" height="15" fill="rgb(250,54,15)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1119.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1093" width="0.1160%" height="15" fill="rgb(227,68,33)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1077" width="0.1160%" height="15" fill="rgb(238,34,41)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1061" width="0.1160%" height="15" fill="rgb(220,11,15)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1045" width="0.1160%" height="15" fill="rgb(246,111,35)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1029" width="0.1160%" height="15" fill="rgb(209,88,53)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1039.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="1013" width="0.1160%" height="15" fill="rgb(231,185,47)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="997" width="0.1160%" height="15" fill="rgb(233,154,1)" fg:x="830" fg:w="1"/><text x="96.5377%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="96.2877%" y="981" width="0.1160%" height="15" fill="rgb(225,15,46)" fg:x="830" fg:w="1"/><text x="96.5377%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="96.2877%" y="1797" width="0.2320%" height="15" fill="rgb(211,135,41)" fg:x="830" fg:w="2"/><text x="96.5377%" y="1807.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (2 samples, 0.23%)</title><rect x="96.2877%" y="1781" width="0.2320%" height="15" fill="rgb(208,54,0)" fg:x="830" fg:w="2"/><text x="96.5377%" y="1791.50"></text></g><g><title>reqwest::connect::Connector::connect_via_proxy::{{closure}} (2 samples, 0.23%)</title><rect x="96.2877%" y="1765" width="0.2320%" height="15" fill="rgb(244,136,14)" fg:x="830" fg:w="2"/><text x="96.5377%" y="1775.50"></text></g><g><title>tokio_native_tls::TlsConnector::connect::{{closure}} (1 samples, 0.12%)</title><rect x="96.4037%" y="1749" width="0.1160%" height="15" fill="rgb(241,56,14)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1759.50"></text></g><g><title>tokio_native_tls::handshake::{{closure}} (1 samples, 0.12%)</title><rect x="96.4037%" y="1733" width="0.1160%" height="15" fill="rgb(205,80,24)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1743.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="96.4037%" y="1717" width="0.1160%" height="15" fill="rgb(220,57,4)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1727.50"></text></g><g><title>native_tls::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.12%)</title><rect x="96.4037%" y="1701" width="0.1160%" height="15" fill="rgb(226,193,50)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1711.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.12%)</title><rect x="96.4037%" y="1685" width="0.1160%" height="15" fill="rgb(231,168,22)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1695.50"></text></g><g><title>openssl::ssl::MidHandshakeSslStream&lt;S&gt;::handshake (1 samples, 0.12%)</title><rect x="96.4037%" y="1669" width="0.1160%" height="15" fill="rgb(254,215,14)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1679.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::do_handshake (1 samples, 0.12%)</title><rect x="96.4037%" y="1653" width="0.1160%" height="15" fill="rgb(211,115,16)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1663.50"></text></g><g><title>SSL_do_handshake (1 samples, 0.12%)</title><rect x="96.4037%" y="1637" width="0.1160%" height="15" fill="rgb(236,210,16)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1647.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1621" width="0.1160%" height="15" fill="rgb(221,94,12)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1631.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1605" width="0.1160%" height="15" fill="rgb(235,218,49)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1615.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1589" width="0.1160%" height="15" fill="rgb(217,114,14)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1599.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1573" width="0.1160%" height="15" fill="rgb(216,145,22)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1583.50"></text></g><g><title>X509_verify_cert (1 samples, 0.12%)</title><rect x="96.4037%" y="1557" width="0.1160%" height="15" fill="rgb(217,112,39)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1567.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1541" width="0.1160%" height="15" fill="rgb(225,85,32)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1551.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1525" width="0.1160%" height="15" fill="rgb(245,209,47)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1535.50"></text></g><g><title>ASN1_item_verify (1 samples, 0.12%)</title><rect x="96.4037%" y="1509" width="0.1160%" height="15" fill="rgb(218,220,15)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1519.50"></text></g><g><title>EVP_DigestVerifyFinal (1 samples, 0.12%)</title><rect x="96.4037%" y="1493" width="0.1160%" height="15" fill="rgb(222,202,31)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1503.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1477" width="0.1160%" height="15" fill="rgb(243,203,4)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1487.50"></text></g><g><title>RSA_verify (1 samples, 0.12%)</title><rect x="96.4037%" y="1461" width="0.1160%" height="15" fill="rgb(237,92,17)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1471.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1445" width="0.1160%" height="15" fill="rgb(231,119,7)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1455.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1429" width="0.1160%" height="15" fill="rgb(237,82,41)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1439.50"></text></g><g><title>BN_MONT_CTX_set_locked (1 samples, 0.12%)</title><rect x="96.4037%" y="1413" width="0.1160%" height="15" fill="rgb(226,81,48)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1423.50"></text></g><g><title>BN_MONT_CTX_set (1 samples, 0.12%)</title><rect x="96.4037%" y="1397" width="0.1160%" height="15" fill="rgb(234,70,51)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1407.50"></text></g><g><title>BN_div (1 samples, 0.12%)</title><rect x="96.4037%" y="1381" width="0.1160%" height="15" fill="rgb(251,86,4)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1391.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="96.4037%" y="1365" width="0.1160%" height="15" fill="rgb(244,144,28)" fg:x="831" fg:w="1"/><text x="96.6537%" y="1375.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1781" width="0.6961%" height="15" fill="rgb(232,161,39)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1791.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1765" width="0.6961%" height="15" fill="rgb(247,34,51)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1775.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1749" width="0.6961%" height="15" fill="rgb(225,132,2)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1759.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1733" width="0.6961%" height="15" fill="rgb(209,159,44)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1743.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1717" width="0.6961%" height="15" fill="rgb(251,214,1)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1727.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1701" width="0.6961%" height="15" fill="rgb(247,84,47)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1711.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1685" width="0.6961%" height="15" fill="rgb(240,111,43)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1695.50"></text></g><g><title>[unknown] (6 samples, 0.70%)</title><rect x="96.5197%" y="1669" width="0.6961%" height="15" fill="rgb(215,214,35)" fg:x="832" fg:w="6"/><text x="96.7697%" y="1679.50"></text></g><g><title>tokio::runtime::builder::Builder::build (1 samples, 0.12%)</title><rect x="97.2158%" y="1573" width="0.1160%" height="15" fill="rgb(248,207,23)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1583.50"></text></g><g><title>tokio::runtime::builder::Builder::build_current_thread_runtime (1 samples, 0.12%)</title><rect x="97.2158%" y="1557" width="0.1160%" height="15" fill="rgb(214,186,4)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1567.50"></text></g><g><title>tokio::runtime::driver::Driver::new (1 samples, 0.12%)</title><rect x="97.2158%" y="1541" width="0.1160%" height="15" fill="rgb(220,133,22)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1551.50"></text></g><g><title>tokio::runtime::driver::create_io_stack (1 samples, 0.12%)</title><rect x="97.2158%" y="1525" width="0.1160%" height="15" fill="rgb(239,134,19)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1535.50"></text></g><g><title>tokio::runtime::io::driver::Driver::new (1 samples, 0.12%)</title><rect x="97.2158%" y="1509" width="0.1160%" height="15" fill="rgb(250,140,9)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1519.50"></text></g><g><title>mio::waker::Waker::new (1 samples, 0.12%)</title><rect x="97.2158%" y="1493" width="0.1160%" height="15" fill="rgb(225,59,14)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1503.50"></text></g><g><title>mio::sys::unix::waker::fdbased::Waker::new (1 samples, 0.12%)</title><rect x="97.2158%" y="1477" width="0.1160%" height="15" fill="rgb(214,152,51)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1487.50"></text></g><g><title>mio::sys::unix::waker::eventfd::WakerInternal::new (1 samples, 0.12%)</title><rect x="97.2158%" y="1461" width="0.1160%" height="15" fill="rgb(251,227,43)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1471.50"></text></g><g><title>__GI_eventfd (1 samples, 0.12%)</title><rect x="97.2158%" y="1445" width="0.1160%" height="15" fill="rgb(241,96,17)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1455.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1429" width="0.1160%" height="15" fill="rgb(234,198,43)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1439.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1413" width="0.1160%" height="15" fill="rgb(220,108,29)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1423.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1397" width="0.1160%" height="15" fill="rgb(226,163,33)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1407.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1381" width="0.1160%" height="15" fill="rgb(205,194,45)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1391.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1365" width="0.1160%" height="15" fill="rgb(206,143,44)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1375.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1349" width="0.1160%" height="15" fill="rgb(236,136,36)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1359.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1333" width="0.1160%" height="15" fill="rgb(249,172,42)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1343.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1317" width="0.1160%" height="15" fill="rgb(216,139,23)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1327.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1301" width="0.1160%" height="15" fill="rgb(207,166,20)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1311.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.2158%" y="1285" width="0.1160%" height="15" fill="rgb(210,209,22)" fg:x="838" fg:w="1"/><text x="97.4658%" y="1295.50"></text></g><g><title>BUF_MEM_new (1 samples, 0.12%)</title><rect x="97.5638%" y="949" width="0.1160%" height="15" fill="rgb(232,118,20)" fg:x="841" fg:w="1"/><text x="97.8138%" y="959.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.12%)</title><rect x="97.5638%" y="933" width="0.1160%" height="15" fill="rgb(238,113,42)" fg:x="841" fg:w="1"/><text x="97.8138%" y="943.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="97.5638%" y="917" width="0.1160%" height="15" fill="rgb(231,42,5)" fg:x="841" fg:w="1"/><text x="97.8138%" y="927.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.12%)</title><rect x="97.6798%" y="789" width="0.1160%" height="15" fill="rgb(243,166,24)" fg:x="842" fg:w="1"/><text x="97.9298%" y="799.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.12%)</title><rect x="97.6798%" y="773" width="0.1160%" height="15" fill="rgb(237,226,12)" fg:x="842" fg:w="1"/><text x="97.9298%" y="783.50"></text></g><g><title>ASN1_item_ex_d2i (2 samples, 0.23%)</title><rect x="97.6798%" y="933" width="0.2320%" height="15" fill="rgb(229,133,24)" fg:x="842" fg:w="2"/><text x="97.9298%" y="943.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="917" width="0.2320%" height="15" fill="rgb(238,33,43)" fg:x="842" fg:w="2"/><text x="97.9298%" y="927.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="901" width="0.2320%" height="15" fill="rgb(227,59,38)" fg:x="842" fg:w="2"/><text x="97.9298%" y="911.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="885" width="0.2320%" height="15" fill="rgb(230,97,0)" fg:x="842" fg:w="2"/><text x="97.9298%" y="895.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="869" width="0.2320%" height="15" fill="rgb(250,173,50)" fg:x="842" fg:w="2"/><text x="97.9298%" y="879.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="853" width="0.2320%" height="15" fill="rgb(240,15,50)" fg:x="842" fg:w="2"/><text x="97.9298%" y="863.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="837" width="0.2320%" height="15" fill="rgb(221,93,22)" fg:x="842" fg:w="2"/><text x="97.9298%" y="847.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="821" width="0.2320%" height="15" fill="rgb(245,180,53)" fg:x="842" fg:w="2"/><text x="97.9298%" y="831.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="97.6798%" y="805" width="0.2320%" height="15" fill="rgb(231,88,51)" fg:x="842" fg:w="2"/><text x="97.9298%" y="815.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.7958%" y="789" width="0.1160%" height="15" fill="rgb(240,58,21)" fg:x="843" fg:w="1"/><text x="98.0458%" y="799.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.7958%" y="773" width="0.1160%" height="15" fill="rgb(237,21,10)" fg:x="843" fg:w="1"/><text x="98.0458%" y="783.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.7958%" y="757" width="0.1160%" height="15" fill="rgb(218,43,11)" fg:x="843" fg:w="1"/><text x="98.0458%" y="767.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.7958%" y="741" width="0.1160%" height="15" fill="rgb(218,221,29)" fg:x="843" fg:w="1"/><text x="98.0458%" y="751.50"></text></g><g><title>OBJ_obj2nid (1 samples, 0.12%)</title><rect x="97.7958%" y="725" width="0.1160%" height="15" fill="rgb(214,118,42)" fg:x="843" fg:w="1"/><text x="98.0458%" y="735.50"></text></g><g><title>OBJ_bsearch_ex_ (1 samples, 0.12%)</title><rect x="97.7958%" y="709" width="0.1160%" height="15" fill="rgb(251,200,26)" fg:x="843" fg:w="1"/><text x="98.0458%" y="719.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.12%)</title><rect x="97.7958%" y="693" width="0.1160%" height="15" fill="rgb(237,101,39)" fg:x="843" fg:w="1"/><text x="98.0458%" y="703.50"></text></g><g><title>ASN1_item_d2i (1 samples, 0.12%)</title><rect x="97.9118%" y="901" width="0.1160%" height="15" fill="rgb(251,117,11)" fg:x="844" fg:w="1"/><text x="98.1618%" y="911.50"></text></g><g><title>ASN1_item_ex_d2i (1 samples, 0.12%)</title><rect x="97.9118%" y="885" width="0.1160%" height="15" fill="rgb(216,223,23)" fg:x="844" fg:w="1"/><text x="98.1618%" y="895.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.9118%" y="869" width="0.1160%" height="15" fill="rgb(251,54,12)" fg:x="844" fg:w="1"/><text x="98.1618%" y="879.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.9118%" y="853" width="0.1160%" height="15" fill="rgb(254,176,54)" fg:x="844" fg:w="1"/><text x="98.1618%" y="863.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.9118%" y="837" width="0.1160%" height="15" fill="rgb(210,32,8)" fg:x="844" fg:w="1"/><text x="98.1618%" y="847.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.9118%" y="821" width="0.1160%" height="15" fill="rgb(235,52,38)" fg:x="844" fg:w="1"/><text x="98.1618%" y="831.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.9118%" y="805" width="0.1160%" height="15" fill="rgb(231,4,44)" fg:x="844" fg:w="1"/><text x="98.1618%" y="815.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="97.9118%" y="789" width="0.1160%" height="15" fill="rgb(249,2,32)" fg:x="844" fg:w="1"/><text x="98.1618%" y="799.50"></text></g><g><title>BN_bin2bn (1 samples, 0.12%)</title><rect x="97.9118%" y="773" width="0.1160%" height="15" fill="rgb(224,65,26)" fg:x="844" fg:w="1"/><text x="98.1618%" y="783.50"></text></g><g><title>ASN1_STRING_set (1 samples, 0.12%)</title><rect x="98.1439%" y="885" width="0.1160%" height="15" fill="rgb(250,73,40)" fg:x="846" fg:w="1"/><text x="98.3939%" y="895.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="98.1439%" y="869" width="0.1160%" height="15" fill="rgb(253,177,16)" fg:x="846" fg:w="1"/><text x="98.3939%" y="879.50"></text></g><g><title>BN_bin2bn (1 samples, 0.12%)</title><rect x="98.2599%" y="869" width="0.1160%" height="15" fill="rgb(217,32,34)" fg:x="847" fg:w="1"/><text x="98.5099%" y="879.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.2599%" y="853" width="0.1160%" height="15" fill="rgb(212,7,10)" fg:x="847" fg:w="1"/><text x="98.5099%" y="863.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.12%)</title><rect x="98.2599%" y="837" width="0.1160%" height="15" fill="rgb(245,89,8)" fg:x="847" fg:w="1"/><text x="98.5099%" y="847.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="98.2599%" y="821" width="0.1160%" height="15" fill="rgb(237,16,53)" fg:x="847" fg:w="1"/><text x="98.5099%" y="831.50"></text></g><g><title>BN_div (1 samples, 0.12%)</title><rect x="98.3759%" y="837" width="0.1160%" height="15" fill="rgb(250,204,30)" fg:x="848" fg:w="1"/><text x="98.6259%" y="847.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.3759%" y="821" width="0.1160%" height="15" fill="rgb(208,77,27)" fg:x="848" fg:w="1"/><text x="98.6259%" y="831.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.3759%" y="805" width="0.1160%" height="15" fill="rgb(250,204,28)" fg:x="848" fg:w="1"/><text x="98.6259%" y="815.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.3759%" y="789" width="0.1160%" height="15" fill="rgb(244,63,21)" fg:x="848" fg:w="1"/><text x="98.6259%" y="799.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.12%)</title><rect x="98.3759%" y="773" width="0.1160%" height="15" fill="rgb(236,85,44)" fg:x="848" fg:w="1"/><text x="98.6259%" y="783.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.12%)</title><rect x="98.3759%" y="757" width="0.1160%" height="15" fill="rgb(215,98,4)" fg:x="848" fg:w="1"/><text x="98.6259%" y="767.50"></text></g><g><title>[libcrypto.so.1.1] (5 samples, 0.58%)</title><rect x="98.0278%" y="901" width="0.5800%" height="15" fill="rgb(235,38,11)" fg:x="845" fg:w="5"/><text x="98.2778%" y="911.50"></text></g><g><title>EC_GROUP_new_by_curve_name (3 samples, 0.35%)</title><rect x="98.2599%" y="885" width="0.3480%" height="15" fill="rgb(254,186,25)" fg:x="847" fg:w="3"/><text x="98.5099%" y="895.50"></text></g><g><title>EC_GROUP_set_generator (2 samples, 0.23%)</title><rect x="98.3759%" y="869" width="0.2320%" height="15" fill="rgb(225,55,31)" fg:x="848" fg:w="2"/><text x="98.6259%" y="879.50"></text></g><g><title>BN_MONT_CTX_set (2 samples, 0.23%)</title><rect x="98.3759%" y="853" width="0.2320%" height="15" fill="rgb(211,15,21)" fg:x="848" fg:w="2"/><text x="98.6259%" y="863.50"></text></g><g><title>BN_set_bit (1 samples, 0.12%)</title><rect x="98.4919%" y="837" width="0.1160%" height="15" fill="rgb(215,187,41)" fg:x="849" fg:w="1"/><text x="98.7419%" y="847.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.4919%" y="821" width="0.1160%" height="15" fill="rgb(248,69,32)" fg:x="849" fg:w="1"/><text x="98.7419%" y="831.50"></text></g><g><title>CRYPTO_zalloc (1 samples, 0.12%)</title><rect x="98.4919%" y="805" width="0.1160%" height="15" fill="rgb(252,102,52)" fg:x="849" fg:w="1"/><text x="98.7419%" y="815.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="98.4919%" y="789" width="0.1160%" height="15" fill="rgb(253,140,32)" fg:x="849" fg:w="1"/><text x="98.7419%" y="799.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="98.4919%" y="773" width="0.1160%" height="15" fill="rgb(216,56,42)" fg:x="849" fg:w="1"/><text x="98.7419%" y="783.50"></text></g><g><title>sysmalloc (1 samples, 0.12%)</title><rect x="98.4919%" y="757" width="0.1160%" height="15" fill="rgb(216,184,14)" fg:x="849" fg:w="1"/><text x="98.7419%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="741" width="0.1160%" height="15" fill="rgb(237,187,27)" fg:x="849" fg:w="1"/><text x="98.7419%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="725" width="0.1160%" height="15" fill="rgb(219,65,3)" fg:x="849" fg:w="1"/><text x="98.7419%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="709" width="0.1160%" height="15" fill="rgb(245,83,25)" fg:x="849" fg:w="1"/><text x="98.7419%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="693" width="0.1160%" height="15" fill="rgb(214,205,45)" fg:x="849" fg:w="1"/><text x="98.7419%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="677" width="0.1160%" height="15" fill="rgb(241,20,18)" fg:x="849" fg:w="1"/><text x="98.7419%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="661" width="0.1160%" height="15" fill="rgb(232,163,23)" fg:x="849" fg:w="1"/><text x="98.7419%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="645" width="0.1160%" height="15" fill="rgb(214,5,46)" fg:x="849" fg:w="1"/><text x="98.7419%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="629" width="0.1160%" height="15" fill="rgb(229,78,17)" fg:x="849" fg:w="1"/><text x="98.7419%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="613" width="0.1160%" height="15" fill="rgb(248,89,10)" fg:x="849" fg:w="1"/><text x="98.7419%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="597" width="0.1160%" height="15" fill="rgb(248,54,15)" fg:x="849" fg:w="1"/><text x="98.7419%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.4919%" y="581" width="0.1160%" height="15" fill="rgb(223,116,6)" fg:x="849" fg:w="1"/><text x="98.7419%" y="591.50"></text></g><g><title>[libcrypto.so.1.1] (7 samples, 0.81%)</title><rect x="97.9118%" y="917" width="0.8121%" height="15" fill="rgb(205,125,38)" fg:x="844" fg:w="7"/><text x="98.1618%" y="927.50"></text></g><g><title>o2i_ECPublicKey (1 samples, 0.12%)</title><rect x="98.6079%" y="901" width="0.1160%" height="15" fill="rgb(251,78,38)" fg:x="850" fg:w="1"/><text x="98.8579%" y="911.50"></text></g><g><title>EC_KEY_oct2key (1 samples, 0.12%)</title><rect x="98.6079%" y="885" width="0.1160%" height="15" fill="rgb(253,78,28)" fg:x="850" fg:w="1"/><text x="98.8579%" y="895.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.6079%" y="869" width="0.1160%" height="15" fill="rgb(209,120,3)" fg:x="850" fg:w="1"/><text x="98.8579%" y="879.50"></text></g><g><title>EC_POINT_set_affine_coordinates (1 samples, 0.12%)</title><rect x="98.6079%" y="853" width="0.1160%" height="15" fill="rgb(238,229,9)" fg:x="850" fg:w="1"/><text x="98.8579%" y="863.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.6079%" y="837" width="0.1160%" height="15" fill="rgb(253,159,18)" fg:x="850" fg:w="1"/><text x="98.8579%" y="847.50"></text></g><g><title>BN_nnmod (1 samples, 0.12%)</title><rect x="98.6079%" y="821" width="0.1160%" height="15" fill="rgb(244,42,34)" fg:x="850" fg:w="1"/><text x="98.8579%" y="831.50"></text></g><g><title>BN_div (1 samples, 0.12%)</title><rect x="98.6079%" y="805" width="0.1160%" height="15" fill="rgb(224,8,7)" fg:x="850" fg:w="1"/><text x="98.8579%" y="815.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="98.6079%" y="789" width="0.1160%" height="15" fill="rgb(210,201,45)" fg:x="850" fg:w="1"/><text x="98.8579%" y="799.50"></text></g><g><title>ASN1_item_d2i (13 samples, 1.51%)</title><rect x="97.3318%" y="1093" width="1.5081%" height="15" fill="rgb(252,185,21)" fg:x="839" fg:w="13"/><text x="97.5818%" y="1103.50"></text></g><g><title>ASN1_item_ex_d2i (13 samples, 1.51%)</title><rect x="97.3318%" y="1077" width="1.5081%" height="15" fill="rgb(223,131,1)" fg:x="839" fg:w="13"/><text x="97.5818%" y="1087.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.51%)</title><rect x="97.3318%" y="1061" width="1.5081%" height="15" fill="rgb(245,141,16)" fg:x="839" fg:w="13"/><text x="97.5818%" y="1071.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.51%)</title><rect x="97.3318%" y="1045" width="1.5081%" height="15" fill="rgb(229,55,45)" fg:x="839" fg:w="13"/><text x="97.5818%" y="1055.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.51%)</title><rect x="97.3318%" y="1029" width="1.5081%" height="15" fill="rgb(208,92,15)" fg:x="839" fg:w="13"/><text x="97.5818%" y="1039.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.51%)</title><rect x="97.3318%" y="1013" width="1.5081%" height="15" fill="rgb(234,185,47)" fg:x="839" fg:w="13"/><text x="97.5818%" y="1023.50"></text></g><g><title>[libcrypto.so.1.1] (13 samples, 1.51%)</title><rect x="97.3318%" y="997" width="1.5081%" height="15" fill="rgb(253,104,50)" fg:x="839" fg:w="13"/><text x="97.5818%" y="1007.50"></text></g><g><title>[libcrypto.so.1.1] (12 samples, 1.39%)</title><rect x="97.4478%" y="981" width="1.3921%" height="15" fill="rgb(205,70,7)" fg:x="840" fg:w="12"/><text x="97.6978%" y="991.50"></text></g><g><title>[libcrypto.so.1.1] (11 samples, 1.28%)</title><rect x="97.5638%" y="965" width="1.2761%" height="15" fill="rgb(240,178,43)" fg:x="841" fg:w="11"/><text x="97.8138%" y="975.50"></text></g><g><title>[libcrypto.so.1.1] (10 samples, 1.16%)</title><rect x="97.6798%" y="949" width="1.1601%" height="15" fill="rgb(214,112,2)" fg:x="842" fg:w="10"/><text x="97.9298%" y="959.50"></text></g><g><title>[libcrypto.so.1.1] (8 samples, 0.93%)</title><rect x="97.9118%" y="933" width="0.9281%" height="15" fill="rgb(206,46,17)" fg:x="844" fg:w="8"/><text x="98.1618%" y="943.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="98.7239%" y="917" width="0.1160%" height="15" fill="rgb(225,220,16)" fg:x="851" fg:w="1"/><text x="98.9739%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.8399%" y="965" width="0.1160%" height="15" fill="rgb(238,65,40)" fg:x="852" fg:w="1"/><text x="99.0899%" y="975.50"></text></g><g><title>BIO_puts (2 samples, 0.23%)</title><rect x="98.8399%" y="1077" width="0.2320%" height="15" fill="rgb(230,151,21)" fg:x="852" fg:w="2"/><text x="99.0899%" y="1087.50"></text></g><g><title>[libcrypto.so.1.1] (2 samples, 0.23%)</title><rect x="98.8399%" y="1061" width="0.2320%" height="15" fill="rgb(218,58,49)" fg:x="852" fg:w="2"/><text x="99.0899%" y="1071.50"></text></g><g><title>BUF_MEM_grow_clean (2 samples, 0.23%)</title><rect x="98.8399%" y="1045" width="0.2320%" height="15" fill="rgb(219,179,14)" fg:x="852" fg:w="2"/><text x="99.0899%" y="1055.50"></text></g><g><title>CRYPTO_clear_realloc (2 samples, 0.23%)</title><rect x="98.8399%" y="1029" width="0.2320%" height="15" fill="rgb(223,72,1)" fg:x="852" fg:w="2"/><text x="99.0899%" y="1039.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.23%)</title><rect x="98.8399%" y="1013" width="0.2320%" height="15" fill="rgb(238,126,10)" fg:x="852" fg:w="2"/><text x="99.0899%" y="1023.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="98.8399%" y="997" width="0.2320%" height="15" fill="rgb(224,206,38)" fg:x="852" fg:w="2"/><text x="99.0899%" y="1007.50"></text></g><g><title>sysmalloc (2 samples, 0.23%)</title><rect x="98.8399%" y="981" width="0.2320%" height="15" fill="rgb(212,201,54)" fg:x="852" fg:w="2"/><text x="99.0899%" y="991.50"></text></g><g><title>__GI___mprotect (1 samples, 0.12%)</title><rect x="98.9559%" y="965" width="0.1160%" height="15" fill="rgb(218,154,48)" fg:x="853" fg:w="1"/><text x="99.2059%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="98.9559%" y="949" width="0.1160%" height="15" fill="rgb(232,93,24)" fg:x="853" fg:w="1"/><text x="99.2059%" y="959.50"></text></g><g><title>openssl::ssl::SslContextBuilder::set_default_verify_paths (16 samples, 1.86%)</title><rect x="97.3318%" y="1173" width="1.8561%" height="15" fill="rgb(245,30,21)" fg:x="839" fg:w="16"/><text x="97.5818%" y="1183.50">o..</text></g><g><title>X509_STORE_set_default_paths (16 samples, 1.86%)</title><rect x="97.3318%" y="1157" width="1.8561%" height="15" fill="rgb(242,148,29)" fg:x="839" fg:w="16"/><text x="97.5818%" y="1167.50">X..</text></g><g><title>[libcrypto.so.1.1] (16 samples, 1.86%)</title><rect x="97.3318%" y="1141" width="1.8561%" height="15" fill="rgb(244,153,54)" fg:x="839" fg:w="16"/><text x="97.5818%" y="1151.50">[..</text></g><g><title>X509_load_cert_crl_file (16 samples, 1.86%)</title><rect x="97.3318%" y="1125" width="1.8561%" height="15" fill="rgb(252,87,22)" fg:x="839" fg:w="16"/><text x="97.5818%" y="1135.50">X..</text></g><g><title>PEM_X509_INFO_read_bio (16 samples, 1.86%)</title><rect x="97.3318%" y="1109" width="1.8561%" height="15" fill="rgb(210,51,29)" fg:x="839" fg:w="16"/><text x="97.5818%" y="1119.50">P..</text></g><g><title>PEM_read_bio_ex (3 samples, 0.35%)</title><rect x="98.8399%" y="1093" width="0.3480%" height="15" fill="rgb(242,136,47)" fg:x="852" fg:w="3"/><text x="99.0899%" y="1103.50"></text></g><g><title>EVP_DecodeUpdate (1 samples, 0.12%)</title><rect x="99.0719%" y="1077" width="0.1160%" height="15" fill="rgb(238,68,4)" fg:x="854" fg:w="1"/><text x="99.3219%" y="1087.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.12%)</title><rect x="99.1879%" y="1045" width="0.1160%" height="15" fill="rgb(242,161,30)" fg:x="855" fg:w="1"/><text x="99.4379%" y="1055.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.12%)</title><rect x="99.1879%" y="1029" width="0.1160%" height="15" fill="rgb(218,58,44)" fg:x="855" fg:w="1"/><text x="99.4379%" y="1039.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="99.1879%" y="1013" width="0.1160%" height="15" fill="rgb(252,125,32)" fg:x="855" fg:w="1"/><text x="99.4379%" y="1023.50"></text></g><g><title>ERR_load_SSL_strings (1 samples, 0.12%)</title><rect x="99.1879%" y="997" width="0.1160%" height="15" fill="rgb(219,178,0)" fg:x="855" fg:w="1"/><text x="99.4379%" y="1007.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.12%)</title><rect x="99.1879%" y="981" width="0.1160%" height="15" fill="rgb(213,152,7)" fg:x="855" fg:w="1"/><text x="99.4379%" y="991.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.1879%" y="965" width="0.1160%" height="15" fill="rgb(249,109,34)" fg:x="855" fg:w="1"/><text x="99.4379%" y="975.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.12%)</title><rect x="99.1879%" y="949" width="0.1160%" height="15" fill="rgb(232,96,21)" fg:x="855" fg:w="1"/><text x="99.4379%" y="959.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.1879%" y="933" width="0.1160%" height="15" fill="rgb(228,27,39)" fg:x="855" fg:w="1"/><text x="99.4379%" y="943.50"></text></g><g><title>EVP_add_cipher (1 samples, 0.12%)</title><rect x="99.3039%" y="965" width="0.1160%" height="15" fill="rgb(211,182,52)" fg:x="856" fg:w="1"/><text x="99.5539%" y="975.50"></text></g><g><title>OBJ_NAME_add (1 samples, 0.12%)</title><rect x="99.3039%" y="949" width="0.1160%" height="15" fill="rgb(234,178,38)" fg:x="856" fg:w="1"/><text x="99.5539%" y="959.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.12%)</title><rect x="99.3039%" y="933" width="0.1160%" height="15" fill="rgb(221,111,3)" fg:x="856" fg:w="1"/><text x="99.5539%" y="943.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.3039%" y="917" width="0.1160%" height="15" fill="rgb(228,175,21)" fg:x="856" fg:w="1"/><text x="99.5539%" y="927.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.3039%" y="901" width="0.1160%" height="15" fill="rgb(228,174,43)" fg:x="856" fg:w="1"/><text x="99.5539%" y="911.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.3039%" y="885" width="0.1160%" height="15" fill="rgb(211,191,0)" fg:x="856" fg:w="1"/><text x="99.5539%" y="895.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.3039%" y="869" width="0.1160%" height="15" fill="rgb(253,117,3)" fg:x="856" fg:w="1"/><text x="99.5539%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="853" width="0.1160%" height="15" fill="rgb(241,127,19)" fg:x="856" fg:w="1"/><text x="99.5539%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="837" width="0.1160%" height="15" fill="rgb(218,103,12)" fg:x="856" fg:w="1"/><text x="99.5539%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="821" width="0.1160%" height="15" fill="rgb(236,214,43)" fg:x="856" fg:w="1"/><text x="99.5539%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="805" width="0.1160%" height="15" fill="rgb(244,144,19)" fg:x="856" fg:w="1"/><text x="99.5539%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="789" width="0.1160%" height="15" fill="rgb(246,188,10)" fg:x="856" fg:w="1"/><text x="99.5539%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="773" width="0.1160%" height="15" fill="rgb(212,193,33)" fg:x="856" fg:w="1"/><text x="99.5539%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="757" width="0.1160%" height="15" fill="rgb(241,51,29)" fg:x="856" fg:w="1"/><text x="99.5539%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="741" width="0.1160%" height="15" fill="rgb(211,58,19)" fg:x="856" fg:w="1"/><text x="99.5539%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="725" width="0.1160%" height="15" fill="rgb(229,111,26)" fg:x="856" fg:w="1"/><text x="99.5539%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="709" width="0.1160%" height="15" fill="rgb(213,115,40)" fg:x="856" fg:w="1"/><text x="99.5539%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.3039%" y="693" width="0.1160%" height="15" fill="rgb(209,56,44)" fg:x="856" fg:w="1"/><text x="99.5539%" y="703.50"></text></g><g><title>ERR_load_BIO_strings (1 samples, 0.12%)</title><rect x="99.4200%" y="789" width="0.1160%" height="15" fill="rgb(230,108,32)" fg:x="857" fg:w="1"/><text x="99.6700%" y="799.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.12%)</title><rect x="99.4200%" y="773" width="0.1160%" height="15" fill="rgb(216,165,31)" fg:x="857" fg:w="1"/><text x="99.6700%" y="783.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.4200%" y="757" width="0.1160%" height="15" fill="rgb(218,122,21)" fg:x="857" fg:w="1"/><text x="99.6700%" y="767.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.12%)</title><rect x="99.4200%" y="741" width="0.1160%" height="15" fill="rgb(223,224,47)" fg:x="857" fg:w="1"/><text x="99.6700%" y="751.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="99.4200%" y="725" width="0.1160%" height="15" fill="rgb(238,102,44)" fg:x="857" fg:w="1"/><text x="99.6700%" y="735.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="99.4200%" y="709" width="0.1160%" height="15" fill="rgb(236,46,40)" fg:x="857" fg:w="1"/><text x="99.6700%" y="719.50"></text></g><g><title>ERR_load_DH_strings (1 samples, 0.12%)</title><rect x="99.5360%" y="789" width="0.1160%" height="15" fill="rgb(247,202,50)" fg:x="858" fg:w="1"/><text x="99.7860%" y="799.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.12%)</title><rect x="99.5360%" y="773" width="0.1160%" height="15" fill="rgb(209,99,20)" fg:x="858" fg:w="1"/><text x="99.7860%" y="783.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.5360%" y="757" width="0.1160%" height="15" fill="rgb(252,27,34)" fg:x="858" fg:w="1"/><text x="99.7860%" y="767.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.12%)</title><rect x="99.5360%" y="741" width="0.1160%" height="15" fill="rgb(215,206,23)" fg:x="858" fg:w="1"/><text x="99.7860%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (21 samples, 2.44%)</title><rect x="97.3318%" y="1365" width="2.4362%" height="15" fill="rgb(212,135,36)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1375.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}} (21 samples, 2.44%)</title><rect x="97.3318%" y="1349" width="2.4362%" height="15" fill="rgb(240,189,1)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1359.50">to..</text></g><g><title>tokio::runtime::coop::budget (21 samples, 2.44%)</title><rect x="97.3318%" y="1333" width="2.4362%" height="15" fill="rgb(242,56,20)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1343.50">to..</text></g><g><title>tokio::runtime::coop::with_budget (21 samples, 2.44%)</title><rect x="97.3318%" y="1317" width="2.4362%" height="15" fill="rgb(247,132,33)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1327.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}} (21 samples, 2.44%)</title><rect x="97.3318%" y="1301" width="2.4362%" height="15" fill="rgb(208,149,11)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1311.50">to..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21 samples, 2.44%)</title><rect x="97.3318%" y="1285" width="2.4362%" height="15" fill="rgb(211,33,11)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1295.50">&lt;c..</text></g><g><title>reqwest::blocking::client::ClientHandle::new::{{closure}}::{{closure}} (21 samples, 2.44%)</title><rect x="97.3318%" y="1269" width="2.4362%" height="15" fill="rgb(221,29,38)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1279.50">re..</text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (21 samples, 2.44%)</title><rect x="97.3318%" y="1253" width="2.4362%" height="15" fill="rgb(206,182,49)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1263.50">re..</text></g><g><title>reqwest::connect::Connector::new_default_tls (21 samples, 2.44%)</title><rect x="97.3318%" y="1237" width="2.4362%" height="15" fill="rgb(216,140,1)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1247.50">re..</text></g><g><title>native_tls::TlsConnectorBuilder::build (21 samples, 2.44%)</title><rect x="97.3318%" y="1221" width="2.4362%" height="15" fill="rgb(232,57,40)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1231.50">na..</text></g><g><title>native_tls::imp::TlsConnector::new (21 samples, 2.44%)</title><rect x="97.3318%" y="1205" width="2.4362%" height="15" fill="rgb(224,186,18)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1215.50">na..</text></g><g><title>openssl::ssl::connector::SslConnector::builder (21 samples, 2.44%)</title><rect x="97.3318%" y="1189" width="2.4362%" height="15" fill="rgb(215,121,11)" fg:x="839" fg:w="21"/><text x="97.5818%" y="1199.50">op..</text></g><g><title>openssl::ssl::connector::ctx (5 samples, 0.58%)</title><rect x="99.1879%" y="1173" width="0.5800%" height="15" fill="rgb(245,147,10)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1183.50"></text></g><g><title>openssl::ssl::SslContextBuilder::new (5 samples, 0.58%)</title><rect x="99.1879%" y="1157" width="0.5800%" height="15" fill="rgb(238,153,13)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1167.50"></text></g><g><title>openssl_sys::openssl::init (5 samples, 0.58%)</title><rect x="99.1879%" y="1141" width="0.5800%" height="15" fill="rgb(233,108,0)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1151.50"></text></g><g><title>std::sync::once::Once::call_once (5 samples, 0.58%)</title><rect x="99.1879%" y="1125" width="0.5800%" height="15" fill="rgb(212,157,17)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1135.50"></text></g><g><title>std::sys_common::once::futex::Once::call (5 samples, 0.58%)</title><rect x="99.1879%" y="1109" width="0.5800%" height="15" fill="rgb(225,213,38)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1119.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (5 samples, 0.58%)</title><rect x="99.1879%" y="1093" width="0.5800%" height="15" fill="rgb(248,16,11)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1103.50"></text></g><g><title>openssl_sys::openssl::init::{{closure}} (5 samples, 0.58%)</title><rect x="99.1879%" y="1077" width="0.5800%" height="15" fill="rgb(241,33,4)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1087.50"></text></g><g><title>OPENSSL_init_ssl (5 samples, 0.58%)</title><rect x="99.1879%" y="1061" width="0.5800%" height="15" fill="rgb(222,26,43)" fg:x="855" fg:w="5"/><text x="99.4379%" y="1071.50"></text></g><g><title>OPENSSL_init_crypto (4 samples, 0.46%)</title><rect x="99.3039%" y="1045" width="0.4640%" height="15" fill="rgb(243,29,36)" fg:x="856" fg:w="4"/><text x="99.5539%" y="1055.50"></text></g><g><title>CRYPTO_THREAD_run_once (4 samples, 0.46%)</title><rect x="99.3039%" y="1029" width="0.4640%" height="15" fill="rgb(241,9,27)" fg:x="856" fg:w="4"/><text x="99.5539%" y="1039.50"></text></g><g><title>__pthread_once_slow (4 samples, 0.46%)</title><rect x="99.3039%" y="1013" width="0.4640%" height="15" fill="rgb(205,117,26)" fg:x="856" fg:w="4"/><text x="99.5539%" y="1023.50"></text></g><g><title>[libcrypto.so.1.1] (4 samples, 0.46%)</title><rect x="99.3039%" y="997" width="0.4640%" height="15" fill="rgb(209,80,39)" fg:x="856" fg:w="4"/><text x="99.5539%" y="1007.50"></text></g><g><title>[libcrypto.so.1.1] (4 samples, 0.46%)</title><rect x="99.3039%" y="981" width="0.4640%" height="15" fill="rgb(239,155,6)" fg:x="856" fg:w="4"/><text x="99.5539%" y="991.50"></text></g><g><title>OPENSSL_init_crypto (3 samples, 0.35%)</title><rect x="99.4200%" y="965" width="0.3480%" height="15" fill="rgb(212,104,12)" fg:x="857" fg:w="3"/><text x="99.6700%" y="975.50"></text></g><g><title>CRYPTO_THREAD_run_once (3 samples, 0.35%)</title><rect x="99.4200%" y="949" width="0.3480%" height="15" fill="rgb(234,204,3)" fg:x="857" fg:w="3"/><text x="99.6700%" y="959.50"></text></g><g><title>__pthread_once_slow (3 samples, 0.35%)</title><rect x="99.4200%" y="933" width="0.3480%" height="15" fill="rgb(251,218,7)" fg:x="857" fg:w="3"/><text x="99.6700%" y="943.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.35%)</title><rect x="99.4200%" y="917" width="0.3480%" height="15" fill="rgb(221,81,32)" fg:x="857" fg:w="3"/><text x="99.6700%" y="927.50"></text></g><g><title>ERR_clear_error (3 samples, 0.35%)</title><rect x="99.4200%" y="901" width="0.3480%" height="15" fill="rgb(214,152,26)" fg:x="857" fg:w="3"/><text x="99.6700%" y="911.50"></text></g><g><title>ERR_get_state (3 samples, 0.35%)</title><rect x="99.4200%" y="885" width="0.3480%" height="15" fill="rgb(223,22,3)" fg:x="857" fg:w="3"/><text x="99.6700%" y="895.50"></text></g><g><title>OPENSSL_init_crypto (3 samples, 0.35%)</title><rect x="99.4200%" y="869" width="0.3480%" height="15" fill="rgb(207,174,7)" fg:x="857" fg:w="3"/><text x="99.6700%" y="879.50"></text></g><g><title>CRYPTO_THREAD_run_once (3 samples, 0.35%)</title><rect x="99.4200%" y="853" width="0.3480%" height="15" fill="rgb(224,19,52)" fg:x="857" fg:w="3"/><text x="99.6700%" y="863.50"></text></g><g><title>__pthread_once_slow (3 samples, 0.35%)</title><rect x="99.4200%" y="837" width="0.3480%" height="15" fill="rgb(228,24,14)" fg:x="857" fg:w="3"/><text x="99.6700%" y="847.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.35%)</title><rect x="99.4200%" y="821" width="0.3480%" height="15" fill="rgb(230,153,43)" fg:x="857" fg:w="3"/><text x="99.6700%" y="831.50"></text></g><g><title>[libcrypto.so.1.1] (3 samples, 0.35%)</title><rect x="99.4200%" y="805" width="0.3480%" height="15" fill="rgb(231,106,12)" fg:x="857" fg:w="3"/><text x="99.6700%" y="815.50"></text></g><g><title>ERR_load_KDF_strings (1 samples, 0.12%)</title><rect x="99.6520%" y="789" width="0.1160%" height="15" fill="rgb(215,92,2)" fg:x="859" fg:w="1"/><text x="99.9020%" y="799.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.12%)</title><rect x="99.6520%" y="773" width="0.1160%" height="15" fill="rgb(249,143,25)" fg:x="859" fg:w="1"/><text x="99.9020%" y="783.50"></text></g><g><title>ERR_load_ERR_strings (1 samples, 0.12%)</title><rect x="99.6520%" y="757" width="0.1160%" height="15" fill="rgb(252,7,35)" fg:x="859" fg:w="1"/><text x="99.9020%" y="767.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.6520%" y="741" width="0.1160%" height="15" fill="rgb(216,69,40)" fg:x="859" fg:w="1"/><text x="99.9020%" y="751.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.12%)</title><rect x="99.6520%" y="725" width="0.1160%" height="15" fill="rgb(240,36,33)" fg:x="859" fg:w="1"/><text x="99.9020%" y="735.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.6520%" y="709" width="0.1160%" height="15" fill="rgb(231,128,14)" fg:x="859" fg:w="1"/><text x="99.9020%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (23 samples, 2.67%)</title><rect x="97.2158%" y="1749" width="2.6682%" height="15" fill="rgb(245,143,14)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1759.50">&lt;a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (23 samples, 2.67%)</title><rect x="97.2158%" y="1733" width="2.6682%" height="15" fill="rgb(222,130,28)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1743.50">&lt;a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (23 samples, 2.67%)</title><rect x="97.2158%" y="1717" width="2.6682%" height="15" fill="rgb(212,10,48)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1727.50">co..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (23 samples, 2.67%)</title><rect x="97.2158%" y="1701" width="2.6682%" height="15" fill="rgb(254,118,45)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1711.50">st..</text></g><g><title>std::panic::catch_unwind (23 samples, 2.67%)</title><rect x="97.2158%" y="1685" width="2.6682%" height="15" fill="rgb(228,6,45)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1695.50">st..</text></g><g><title>std::panicking::try (23 samples, 2.67%)</title><rect x="97.2158%" y="1669" width="2.6682%" height="15" fill="rgb(241,18,35)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1679.50">st..</text></g><g><title>std::panicking::try::do_call (23 samples, 2.67%)</title><rect x="97.2158%" y="1653" width="2.6682%" height="15" fill="rgb(227,214,53)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1663.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (23 samples, 2.67%)</title><rect x="97.2158%" y="1637" width="2.6682%" height="15" fill="rgb(224,107,51)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1647.50">&lt;c..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (23 samples, 2.67%)</title><rect x="97.2158%" y="1621" width="2.6682%" height="15" fill="rgb(248,60,28)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1631.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 2.67%)</title><rect x="97.2158%" y="1605" width="2.6682%" height="15" fill="rgb(249,101,23)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1615.50">st..</text></g><g><title>reqwest::blocking::client::ClientHandle::new::{{closure}} (23 samples, 2.67%)</title><rect x="97.2158%" y="1589" width="2.6682%" height="15" fill="rgb(228,51,19)" fg:x="838" fg:w="23"/><text x="97.4658%" y="1599.50">re..</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (22 samples, 2.55%)</title><rect x="97.3318%" y="1573" width="2.5522%" height="15" fill="rgb(213,20,6)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1583.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (22 samples, 2.55%)</title><rect x="97.3318%" y="1557" width="2.5522%" height="15" fill="rgb(212,124,10)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1567.50">to..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (22 samples, 2.55%)</title><rect x="97.3318%" y="1541" width="2.5522%" height="15" fill="rgb(248,3,40)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1551.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}} (22 samples, 2.55%)</title><rect x="97.3318%" y="1525" width="2.5522%" height="15" fill="rgb(223,178,23)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1535.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on (22 samples, 2.55%)</title><rect x="97.3318%" y="1509" width="2.5522%" height="15" fill="rgb(240,132,45)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1519.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter (22 samples, 2.55%)</title><rect x="97.3318%" y="1493" width="2.5522%" height="15" fill="rgb(245,164,36)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1503.50">to..</text></g><g><title>tokio::runtime::context::set_scheduler (22 samples, 2.55%)</title><rect x="97.3318%" y="1477" width="2.5522%" height="15" fill="rgb(231,188,53)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1487.50">to..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 2.55%)</title><rect x="97.3318%" y="1461" width="2.5522%" height="15" fill="rgb(237,198,39)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1471.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 2.55%)</title><rect x="97.3318%" y="1445" width="2.5522%" height="15" fill="rgb(223,120,35)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1455.50">st..</text></g><g><title>tokio::runtime::context::set_scheduler::{{closure}} (22 samples, 2.55%)</title><rect x="97.3318%" y="1429" width="2.5522%" height="15" fill="rgb(253,107,49)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1439.50">to..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (22 samples, 2.55%)</title><rect x="97.3318%" y="1413" width="2.5522%" height="15" fill="rgb(216,44,31)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1423.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}} (22 samples, 2.55%)</title><rect x="97.3318%" y="1397" width="2.5522%" height="15" fill="rgb(253,87,21)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1407.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}} (22 samples, 2.55%)</title><rect x="97.3318%" y="1381" width="2.5522%" height="15" fill="rgb(226,18,2)" fg:x="839" fg:w="22"/><text x="97.5818%" y="1391.50">to..</text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task (1 samples, 0.12%)</title><rect x="99.7680%" y="1365" width="0.1160%" height="15" fill="rgb(216,8,46)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1375.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (1 samples, 0.12%)</title><rect x="99.7680%" y="1349" width="0.1160%" height="15" fill="rgb(226,140,39)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1359.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::run_task::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="1333" width="0.1160%" height="15" fill="rgb(221,194,54)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1343.50"></text></g><g><title>tokio::runtime::coop::budget (1 samples, 0.12%)</title><rect x="99.7680%" y="1317" width="0.1160%" height="15" fill="rgb(213,92,11)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1327.50"></text></g><g><title>tokio::runtime::coop::with_budget (1 samples, 0.12%)</title><rect x="99.7680%" y="1301" width="0.1160%" height="15" fill="rgb(229,162,46)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1311.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="1285" width="0.1160%" height="15" fill="rgb(214,111,36)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1295.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1 samples, 0.12%)</title><rect x="99.7680%" y="1269" width="0.1160%" height="15" fill="rgb(207,6,21)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1279.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="1253" width="0.1160%" height="15" fill="rgb(213,127,38)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1263.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1 samples, 0.12%)</title><rect x="99.7680%" y="1237" width="0.1160%" height="15" fill="rgb(238,118,32)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1247.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1 samples, 0.12%)</title><rect x="99.7680%" y="1221" width="0.1160%" height="15" fill="rgb(240,139,39)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1231.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.12%)</title><rect x="99.7680%" y="1205" width="0.1160%" height="15" fill="rgb(235,10,37)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1215.50"></text></g><g><title>std::panicking::try (1 samples, 0.12%)</title><rect x="99.7680%" y="1189" width="0.1160%" height="15" fill="rgb(249,171,38)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1199.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.12%)</title><rect x="99.7680%" y="1173" width="0.1160%" height="15" fill="rgb(242,144,32)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1183.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.12%)</title><rect x="99.7680%" y="1157" width="0.1160%" height="15" fill="rgb(217,117,21)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1167.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="1141" width="0.1160%" height="15" fill="rgb(249,87,1)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1151.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="1125" width="0.1160%" height="15" fill="rgb(248,196,48)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1135.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1 samples, 0.12%)</title><rect x="99.7680%" y="1109" width="0.1160%" height="15" fill="rgb(251,206,33)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1119.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="1093" width="0.1160%" height="15" fill="rgb(232,141,28)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1103.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="1077" width="0.1160%" height="15" fill="rgb(209,167,14)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1087.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="1061" width="0.1160%" height="15" fill="rgb(225,11,50)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1071.50"></text></g><g><title>&lt;futures_util::future::try_future::MapErr&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="1045" width="0.1160%" height="15" fill="rgb(209,50,20)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1055.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="1029" width="0.1160%" height="15" fill="rgb(212,17,46)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1039.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="1013" width="0.1160%" height="15" fill="rgb(216,101,39)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1023.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="997" width="0.1160%" height="15" fill="rgb(212,228,48)" fg:x="860" fg:w="1"/><text x="100.0180%" y="1007.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (1 samples, 0.12%)</title><rect x="99.7680%" y="981" width="0.1160%" height="15" fill="rgb(250,6,50)" fg:x="860" fg:w="1"/><text x="100.0180%" y="991.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="965" width="0.1160%" height="15" fill="rgb(250,160,48)" fg:x="860" fg:w="1"/><text x="100.0180%" y="975.50"></text></g><g><title>&lt;hyper::client::conn::ProtoClient&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="949" width="0.1160%" height="15" fill="rgb(244,216,33)" fg:x="860" fg:w="1"/><text x="100.0180%" y="959.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.12%)</title><rect x="99.7680%" y="933" width="0.1160%" height="15" fill="rgb(207,157,5)" fg:x="860" fg:w="1"/><text x="100.0180%" y="943.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (1 samples, 0.12%)</title><rect x="99.7680%" y="917" width="0.1160%" height="15" fill="rgb(228,199,8)" fg:x="860" fg:w="1"/><text x="100.0180%" y="927.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (1 samples, 0.12%)</title><rect x="99.7680%" y="901" width="0.1160%" height="15" fill="rgb(227,80,20)" fg:x="860" fg:w="1"/><text x="100.0180%" y="911.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (1 samples, 0.12%)</title><rect x="99.7680%" y="885" width="0.1160%" height="15" fill="rgb(222,9,33)" fg:x="860" fg:w="1"/><text x="100.0180%" y="895.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (1 samples, 0.12%)</title><rect x="99.7680%" y="869" width="0.1160%" height="15" fill="rgb(239,44,28)" fg:x="860" fg:w="1"/><text x="100.0180%" y="879.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (1 samples, 0.12%)</title><rect x="99.7680%" y="853" width="0.1160%" height="15" fill="rgb(249,187,43)" fg:x="860" fg:w="1"/><text x="100.0180%" y="863.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (1 samples, 0.12%)</title><rect x="99.7680%" y="837" width="0.1160%" height="15" fill="rgb(216,141,28)" fg:x="860" fg:w="1"/><text x="100.0180%" y="847.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (1 samples, 0.12%)</title><rect x="99.7680%" y="821" width="0.1160%" height="15" fill="rgb(230,154,53)" fg:x="860" fg:w="1"/><text x="100.0180%" y="831.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.12%)</title><rect x="99.7680%" y="805" width="0.1160%" height="15" fill="rgb(227,82,4)" fg:x="860" fg:w="1"/><text x="100.0180%" y="815.50"></text></g><g><title>&lt;reqwest::connect::Conn as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="99.7680%" y="789" width="0.1160%" height="15" fill="rgb(220,107,16)" fg:x="860" fg:w="1"/><text x="100.0180%" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="99.7680%" y="773" width="0.1160%" height="15" fill="rgb(207,187,2)" fg:x="860" fg:w="1"/><text x="100.0180%" y="783.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="99.7680%" y="757" width="0.1160%" height="15" fill="rgb(210,162,52)" fg:x="860" fg:w="1"/><text x="100.0180%" y="767.50"></text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (1 samples, 0.12%)</title><rect x="99.7680%" y="741" width="0.1160%" height="15" fill="rgb(217,216,49)" fg:x="860" fg:w="1"/><text x="100.0180%" y="751.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="725" width="0.1160%" height="15" fill="rgb(218,146,49)" fg:x="860" fg:w="1"/><text x="100.0180%" y="735.50"></text></g><g><title>&lt;native_tls::TlsStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="99.7680%" y="709" width="0.1160%" height="15" fill="rgb(216,55,40)" fg:x="860" fg:w="1"/><text x="100.0180%" y="719.50"></text></g><g><title>&lt;native_tls::imp::TlsStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="99.7680%" y="693" width="0.1160%" height="15" fill="rgb(208,196,21)" fg:x="860" fg:w="1"/><text x="100.0180%" y="703.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="99.7680%" y="677" width="0.1160%" height="15" fill="rgb(242,117,42)" fg:x="860" fg:w="1"/><text x="100.0180%" y="687.50"></text></g><g><title>openssl::ssl::SslStream&lt;S&gt;::ssl_read (1 samples, 0.12%)</title><rect x="99.7680%" y="661" width="0.1160%" height="15" fill="rgb(210,11,23)" fg:x="860" fg:w="1"/><text x="100.0180%" y="671.50"></text></g><g><title>SSL_read (1 samples, 0.12%)</title><rect x="99.7680%" y="645" width="0.1160%" height="15" fill="rgb(217,110,2)" fg:x="860" fg:w="1"/><text x="100.0180%" y="655.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="99.7680%" y="629" width="0.1160%" height="15" fill="rgb(229,77,54)" fg:x="860" fg:w="1"/><text x="100.0180%" y="639.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="99.7680%" y="613" width="0.1160%" height="15" fill="rgb(218,53,16)" fg:x="860" fg:w="1"/><text x="100.0180%" y="623.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="99.7680%" y="597" width="0.1160%" height="15" fill="rgb(215,38,13)" fg:x="860" fg:w="1"/><text x="100.0180%" y="607.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="99.7680%" y="581" width="0.1160%" height="15" fill="rgb(235,42,18)" fg:x="860" fg:w="1"/><text x="100.0180%" y="591.50"></text></g><g><title>[libssl.so.1.1] (1 samples, 0.12%)</title><rect x="99.7680%" y="565" width="0.1160%" height="15" fill="rgb(219,66,54)" fg:x="860" fg:w="1"/><text x="100.0180%" y="575.50"></text></g><g><title>BIO_read (1 samples, 0.12%)</title><rect x="99.7680%" y="549" width="0.1160%" height="15" fill="rgb(222,205,4)" fg:x="860" fg:w="1"/><text x="100.0180%" y="559.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.7680%" y="533" width="0.1160%" height="15" fill="rgb(227,213,46)" fg:x="860" fg:w="1"/><text x="100.0180%" y="543.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.12%)</title><rect x="99.7680%" y="517" width="0.1160%" height="15" fill="rgb(250,145,42)" fg:x="860" fg:w="1"/><text x="100.0180%" y="527.50"></text></g><g><title>openssl::ssl::bio::bread (1 samples, 0.12%)</title><rect x="99.7680%" y="501" width="0.1160%" height="15" fill="rgb(219,15,2)" fg:x="860" fg:w="1"/><text x="100.0180%" y="511.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.12%)</title><rect x="99.7680%" y="485" width="0.1160%" height="15" fill="rgb(231,181,52)" fg:x="860" fg:w="1"/><text x="100.0180%" y="495.50"></text></g><g><title>std::panicking::try (1 samples, 0.12%)</title><rect x="99.7680%" y="469" width="0.1160%" height="15" fill="rgb(235,1,42)" fg:x="860" fg:w="1"/><text x="100.0180%" y="479.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.12%)</title><rect x="99.7680%" y="453" width="0.1160%" height="15" fill="rgb(249,88,27)" fg:x="860" fg:w="1"/><text x="100.0180%" y="463.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 0.12%)</title><rect x="99.7680%" y="437" width="0.1160%" height="15" fill="rgb(235,145,16)" fg:x="860" fg:w="1"/><text x="100.0180%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.12%)</title><rect x="99.7680%" y="421" width="0.1160%" height="15" fill="rgb(237,114,19)" fg:x="860" fg:w="1"/><text x="100.0180%" y="431.50"></text></g><g><title>openssl::ssl::bio::bread::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="405" width="0.1160%" height="15" fill="rgb(238,51,50)" fg:x="860" fg:w="1"/><text x="100.0180%" y="415.50"></text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="99.7680%" y="389" width="0.1160%" height="15" fill="rgb(205,194,25)" fg:x="860" fg:w="1"/><text x="100.0180%" y="399.50"></text></g><g><title>tokio_native_tls::AllowStd&lt;S&gt;::with_context (1 samples, 0.12%)</title><rect x="99.7680%" y="373" width="0.1160%" height="15" fill="rgb(215,203,17)" fg:x="860" fg:w="1"/><text x="100.0180%" y="383.50"></text></g><g><title>&lt;tokio_native_tls::AllowStd&lt;S&gt; as std::io::Read&gt;::read::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="357" width="0.1160%" height="15" fill="rgb(233,112,49)" fg:x="860" fg:w="1"/><text x="100.0180%" y="367.50"></text></g><g><title>&lt;hyper_tls::stream::MaybeHttpsStream&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.12%)</title><rect x="99.7680%" y="341" width="0.1160%" height="15" fill="rgb(241,130,26)" fg:x="860" fg:w="1"/><text x="100.0180%" y="351.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.12%)</title><rect x="99.7680%" y="325" width="0.1160%" height="15" fill="rgb(252,223,19)" fg:x="860" fg:w="1"/><text x="100.0180%" y="335.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="99.7680%" y="309" width="0.1160%" height="15" fill="rgb(211,95,25)" fg:x="860" fg:w="1"/><text x="100.0180%" y="319.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (1 samples, 0.12%)</title><rect x="99.7680%" y="293" width="0.1160%" height="15" fill="rgb(251,182,27)" fg:x="860" fg:w="1"/><text x="100.0180%" y="303.50"></text></g><g><title>mio::sys::unix::stateless_io_source::IoSourceState::do_io (1 samples, 0.12%)</title><rect x="99.7680%" y="277" width="0.1160%" height="15" fill="rgb(238,24,4)" fg:x="860" fg:w="1"/><text x="100.0180%" y="287.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (1 samples, 0.12%)</title><rect x="99.7680%" y="261" width="0.1160%" height="15" fill="rgb(224,220,25)" fg:x="860" fg:w="1"/><text x="100.0180%" y="271.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.12%)</title><rect x="99.7680%" y="245" width="0.1160%" height="15" fill="rgb(239,133,26)" fg:x="860" fg:w="1"/><text x="100.0180%" y="255.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.12%)</title><rect x="99.7680%" y="229" width="0.1160%" height="15" fill="rgb(211,94,48)" fg:x="860" fg:w="1"/><text x="100.0180%" y="239.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.12%)</title><rect x="99.7680%" y="213" width="0.1160%" height="15" fill="rgb(239,87,6)" fg:x="860" fg:w="1"/><text x="100.0180%" y="223.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.12%)</title><rect x="99.7680%" y="197" width="0.1160%" height="15" fill="rgb(227,62,0)" fg:x="860" fg:w="1"/><text x="100.0180%" y="207.50"></text></g><g><title>__libc_recv (1 samples, 0.12%)</title><rect x="99.7680%" y="181" width="0.1160%" height="15" fill="rgb(211,226,4)" fg:x="860" fg:w="1"/><text x="100.0180%" y="191.50"></text></g><g><title>__libc_recv (1 samples, 0.12%)</title><rect x="99.7680%" y="165" width="0.1160%" height="15" fill="rgb(253,38,52)" fg:x="860" fg:w="1"/><text x="100.0180%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="149" width="0.1160%" height="15" fill="rgb(229,126,40)" fg:x="860" fg:w="1"/><text x="100.0180%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="133" width="0.1160%" height="15" fill="rgb(229,165,44)" fg:x="860" fg:w="1"/><text x="100.0180%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="117" width="0.1160%" height="15" fill="rgb(247,95,47)" fg:x="860" fg:w="1"/><text x="100.0180%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="101" width="0.1160%" height="15" fill="rgb(216,140,30)" fg:x="860" fg:w="1"/><text x="100.0180%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="85" width="0.1160%" height="15" fill="rgb(246,214,8)" fg:x="860" fg:w="1"/><text x="100.0180%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="69" width="0.1160%" height="15" fill="rgb(227,224,15)" fg:x="860" fg:w="1"/><text x="100.0180%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="53" width="0.1160%" height="15" fill="rgb(233,175,4)" fg:x="860" fg:w="1"/><text x="100.0180%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.7680%" y="37" width="0.1160%" height="15" fill="rgb(221,66,45)" fg:x="860" fg:w="1"/><text x="100.0180%" y="47.50"></text></g><g><title>all (862 samples, 100%)</title><rect x="0.0000%" y="1829" width="100.0000%" height="15" fill="rgb(221,178,18)" fg:x="0" fg:w="862"/><text x="0.2500%" y="1839.50"></text></g><g><title>reqwest-interna (33 samples, 3.83%)</title><rect x="96.1717%" y="1813" width="3.8283%" height="15" fill="rgb(213,81,29)" fg:x="829" fg:w="33"/><text x="96.4217%" y="1823.50">reqw..</text></g><g><title>__GI___clone (30 samples, 3.48%)</title><rect x="96.5197%" y="1797" width="3.4803%" height="15" fill="rgb(220,89,49)" fg:x="832" fg:w="30"/><text x="96.7697%" y="1807.50">__G..</text></g><g><title>start_thread (24 samples, 2.78%)</title><rect x="97.2158%" y="1781" width="2.7842%" height="15" fill="rgb(227,60,33)" fg:x="838" fg:w="24"/><text x="97.4658%" y="1791.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (24 samples, 2.78%)</title><rect x="97.2158%" y="1765" width="2.7842%" height="15" fill="rgb(205,113,12)" fg:x="838" fg:w="24"/><text x="97.4658%" y="1775.50">st..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.12%)</title><rect x="99.8840%" y="1749" width="0.1160%" height="15" fill="rgb(211,32,1)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1759.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.12%)</title><rect x="99.8840%" y="1733" width="0.1160%" height="15" fill="rgb(246,2,12)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1743.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.12%)</title><rect x="99.8840%" y="1717" width="0.1160%" height="15" fill="rgb(243,37,27)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1727.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.12%)</title><rect x="99.8840%" y="1701" width="0.1160%" height="15" fill="rgb(248,211,31)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1711.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.12%)</title><rect x="99.8840%" y="1685" width="0.1160%" height="15" fill="rgb(242,146,47)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1695.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1669" width="0.1160%" height="15" fill="rgb(206,70,20)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1679.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1653" width="0.1160%" height="15" fill="rgb(215,10,51)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1663.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1637" width="0.1160%" height="15" fill="rgb(243,178,53)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1647.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1621" width="0.1160%" height="15" fill="rgb(233,221,20)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1631.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1605" width="0.1160%" height="15" fill="rgb(218,95,35)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1615.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1589" width="0.1160%" height="15" fill="rgb(229,13,5)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1599.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1573" width="0.1160%" height="15" fill="rgb(252,164,30)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1583.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1557" width="0.1160%" height="15" fill="rgb(232,68,36)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1567.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1541" width="0.1160%" height="15" fill="rgb(219,59,54)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1551.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1525" width="0.1160%" height="15" fill="rgb(250,92,33)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1535.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1509" width="0.1160%" height="15" fill="rgb(229,162,54)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1519.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="99.8840%" y="1493" width="0.1160%" height="15" fill="rgb(244,114,52)" fg:x="861" fg:w="1"/><text x="100.1340%" y="1503.50"></text></g></svg></svg>