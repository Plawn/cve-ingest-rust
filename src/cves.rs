use std::{fs::File, io::Write};

use crate::{prepare_date, CveDb, Date, NVDCve, Root, Vulnerability, CVE};
use chrono::{DateTime, Days, Duration, Utc};
use jsonit::{make_prefix, JsonSeqIterator};
use serde_json::json;

#[derive(Debug)]
struct Window {
    start: Date,
    end: Date,
}

fn get_url(window: &Window, start_index: u32) -> String {
    // let url = "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=2023-10-29T13:32:53.000%2B01:00&lastModEndDate=2023-10-29T21:32:53.000%2B01:00&startIndex=0";
    let url = format!(
        "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate={}&lastModEndDate={}&startIndex={}", prepare_date(&window.start), prepare_date(&window.end), start_index);
    url
}

// split date interval
fn get_windows_until_now(s: DateTime<Utc>) -> Vec<Window> {
    let mut start = Utc::now();
    let mut res = vec![];
    while s > start {
        let end = start.checked_sub_signed(Duration::days(30)).unwrap(); // today minus 30 days
        let w = Window { start, end };
        res.push(w);
        start = end;
    }
    res
}

impl CveDb {
    fn do_window(&self, w: &Window) -> Result<(), Box<dyn std::error::Error>> {
        let url = get_url(w, 0);
        println!("{}", &url);
        let resp = reqwest::blocking::get(url)?;
        // iter on response
        let prefix = make_prefix("vulnerabilities");
        let it = JsonSeqIterator::new(resp, &prefix).map(|e| e.unwrap());
        for cve in it.map(|e: Vulnerability| e.cve) {
            let prepared = CVE::from(&self.db, cve);
            // write cve
            let path = self.folder.to_string()
                + "/cves/"
                + &prepared.id.split("-").nth(1).unwrap()
                + "/"
                + &prepared.id
                + ".json";
            let writer = File::options()
                .write(true)
                .open(path)
                .expect("failed to open file");
            serde_json::to_writer_pretty(writer, &prepared).expect("failed to serialyze");
        }
        Ok(())
    }

    pub fn set_last_update(&self, date: Date) {
        let j = json!({
            "date": date.timestamp_micros()
        });
        let mut f = File::open(self.folder.to_string() + "/" + "cves.json").unwrap();
        f.write(j.to_string().as_bytes()).unwrap();
    }

    pub fn update_cves(&self) {
        let last_update = Option::None::<Date>;
        let d = last_update.unwrap_or_else(|| Date::MIN_UTC.checked_add_days(Days::new(50)).unwrap());
        let windows = get_windows_until_now(d);
        for w in windows {
            self.do_window(&w).expect("failed to do window");
            self.set_last_update(w.start);
            println!("did {:?}", w);
        }
        // get last date
        // for each windows
        // do window
        // update last update
        todo!();
    }
}
