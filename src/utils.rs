use std::{fs::File, io::Write};

use crate::Date;
use chrono::{Datelike, Timelike};
use serde::Serialize;

pub fn prepare_date(date: &Date) -> String {
    iso_string(date)
}
fn pad(n: u32) -> String {
    if n < 10 {
        return format!("0{}", n);
    }
    format!("{}", n)
}
fn iso_string(d: &Date) -> String {
    format!(
        "{}-{}-{}T{}:{}:{}.000%2B01:00",
        d.year(),
        pad(d.month()),
        pad(d.day()),
        pad(d.hour()),
        pad(d.minute()),
        pad(d.second())
    )
}

pub fn make_github_address(repo: &str, branch: &str) -> String {
    format!("https://raw.githubusercontent.com/{repo}/{branch}/db")
}

pub fn write_pretty_json_to_file<T: Serialize>(path: &str, value: &T, flush: Option<bool>) {
    let mut writer: File = File::options()
        .create(true)
        .write(true)
        .open(path)
        .expect("failed to open file");
    serde_json::to_writer_pretty(&writer, &value).expect("failed to serialyze");
    if flush.unwrap_or(false) {
        writer.flush().expect("failed to flush file");
    }
}
