use rocksdb::DB;

use crate::{NVDCve, CVE};

fn get_summary(nvd_cve: &NVDCve) -> String {
    let mut res = String::new();
    nvd_cve.descriptions.iter().for_each(|d| {
        if d.lang.as_str() == "en" {
            // only keep english
            if res.is_empty() {
                res = d.value.clone().into();
            } else {
                res.push_str(&d.value);
            }
        }
    });
    res
}

fn handle_cwe(cve_nvd: &NVDCve) -> String {
    let mut local_cwe = String::from("Unknown");
    for i in cve_nvd.weaknesses.iter().filter(|e| e.type_field == "Primary") {
        for values in i.description.iter() {
            if values.lang.as_str()  == "en" {
                local_cwe = values.lang.clone().into();
            }
        }
    }
    return local_cwe;
  }

impl CVE {
    pub fn from(db: &DB, nvd_cve: NVDCve) -> Self {
        let summary = get_summary(&nvd_cve);
        let cwe = handle_cwe(&nvd_cve);
        return Self {
            id: nvd_cve.id,
            assigner: nvd_cve.source_identifier,
            references: nvd_cve
                .references
                .iter()
                .map(|e| e.url.to_owned())
                .collect(),
            // todo, fetch from cpes
            vulnerable_configuration: vec![].into_boxed_slice(),
            last_modified: nvd_cve.last_modified,
            summary, // to fill late
            cwe,
        };
    }
}
