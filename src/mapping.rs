use rocksdb::DB;

use crate::{cpe::get_cpes_for_index, NVDCve, CVE};

fn get_summary(nvd_cve: &NVDCve) -> String {
    let mut res = String::new();
    nvd_cve.descriptions.iter().for_each(|d| {
        if d.lang.as_str() == "en" {
            // only keep english
            if res.is_empty() {
                res = d.value.clone();
            } else {
                res.push_str(&d.value);
            }
        }
    });
    res
}

fn handle_cwe(cve_nvd: &NVDCve) -> String {
    let mut local_cwe = String::from("Unknown");
    for i in cve_nvd
        .weaknesses
        .iter()
        .filter(|e| e.type_field == "Primary")
    {
        for values in i.description.iter() {
            if values.lang.as_str() == "en" {
                local_cwe = values.lang.clone();
            }
        }
    }
    local_cwe
}

fn get_cpes(db: &DB, nvd_cve: &NVDCve) -> Box<[String]> {
    // todo, fetch from cpes
    let cpe_match = nvd_cve
        .configurations
        .iter()
        .flat_map(|e| e.nodes.iter().flat_map(|e| &e.cpe_match));
    cpe_match
        .flat_map(|m| {
            if m.vulnerable {
                let id = &m.match_criteria_id;
                
                get_cpes_for_index(db, id).expect("failed to find criteria")
            } else {
                vec![]
            }
        })
        .collect::<Box<_>>()
}

impl CVE {
    pub fn from(db: &DB, nvd_cve: NVDCve) -> Self {
        let summary = get_summary(&nvd_cve);
        let cwe = handle_cwe(&nvd_cve);
        let vulnerable_configuration = get_cpes(db, &nvd_cve);
        let references = nvd_cve
            .references
            .iter()
            .map(|e| e.url.to_owned())
            .collect();
        Self {
            id: nvd_cve.id.to_string().into(),
            assigner: nvd_cve.source_identifier.to_string().into(),
            references,
            vulnerable_configuration,
            last_modified: nvd_cve.last_modified.to_string().into(),
            summary, // to fill late
            cwe,
        }
    }
}
