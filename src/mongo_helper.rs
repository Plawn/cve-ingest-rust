use std::borrow::Borrow;

use mongodb::{
    bson::{doc, from_document, oid::ObjectId, to_bson, Document},
    options::{SelectionCriteria, UpdateOptions},
    Database,
};
use serde::Deserialize;

#[derive(Debug, Deserialize)]
pub struct BulkUpdate {
    pub query: Document,
    pub update: Document,
    pub options: Option<UpdateOptions>,
}
#[derive(Debug, Deserialize)]
pub struct BulkUpdateUpsertResult {
    pub index: u64,
    pub id: ObjectId,
}
#[derive(Debug, Deserialize)]
pub struct BulkUpdateResult {
    // pub nb_affected: u64,
    // pub nb_modified: u64,
    // pub upserted: Vec<BulkUpdateUpsertResult>,
}

pub type MongoResult<T> = Result<T, mongodb::error::Error>;

pub async fn bulk_update<V, U>(
    db: &Database,
    collection_name: &str,
    updates: V,
) -> MongoResult<BulkUpdateResult>
where
    V: Borrow<Vec<U>>,
    U: Borrow<BulkUpdate>,
{
    let updates = updates.borrow();
    let mut update_docs = Vec::with_capacity(updates.len());
    for u in updates {
        let u = u.borrow();
        let mut doc = doc! {
            "q": &u.query,
            "u": &u.update,
            "multi": false,
        };
        if let Some(options) = &u.options {
            if let Some(ref upsert) = options.upsert {
                doc.insert("upsert", upsert);
            }
            if let Some(ref collation) = options.collation {
                doc.insert("collation", to_bson(collation)?);
            }
            if let Some(ref array_filters) = options.array_filters {
                doc.insert("arrayFilters", array_filters);
            }
            if let Some(ref hint) = options.hint {
                doc.insert("hint", to_bson(hint)?);
            }
        }
        update_docs.push(doc);
    }
    let mut command = doc! {
        "update": collection_name,
        "updates": update_docs,
    };
    if let Some(ref write_concern) = db.write_concern() {
        command.insert("writeConcern", to_bson(write_concern)?);
    }
    let selection_criteria: Option<SelectionCriteria> = db.selection_criteria().cloned();
    let res = db.run_command(command, selection_criteria).await?;
    Ok(from_document(res)?)
}
