use serde::Deserialize;
use serde::Serialize;

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Root {
    pub results_per_page: i64,
    pub start_index: i64,
    pub total_results: i64,
    pub format: String,
    pub version: String,
    pub timestamp: String,
    pub match_strings: Vec<MatchString>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchString {
    pub match_string: MatchString2,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MatchString2 {
    /// Index to use
    pub match_criteria_id: String,
    pub criteria: String,
    pub version_end_including: Option<String>,
    pub last_modified: String,
    pub cpe_last_modified: String,
    pub created: String,
    pub status: String,
    #[serde(default)]
    pub matches: Vec<Match>,
    pub version_end_excluding: Option<String>,
    pub version_start_including: Option<String>,
    pub version_start_excluding: Option<String>,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Match {
    pub cpe_name: String,
    pub cpe_name_id: String,
}
