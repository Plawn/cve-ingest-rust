use std::fs::File;

use std::error::Error;
use std::io::BufRead;
use std::io::BufReader;
use std::iter::Map;
use std::collections::HashMap;

use chrono::{Duration, Utc};

use cve_ingest_rust::{prepare_date, Date, Root};
use serde::Deserialize;
use serde_json::Value;

struct Window {
    start: Date,
    end: Date,
}

fn get_url(window: &Window, start_index: u32) -> String {
    // let url = "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=2023-10-29T13:32:53.000%2B01:00&lastModEndDate=2023-10-29T21:32:53.000%2B01:00&startIndex=0";
    let url = format!(
        "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate={}&lastModEndDate={}&startIndex={}", prepare_date(&window.start), prepare_date(&window.end), start_index);
    return url;
}

struct Cpe {}

async fn get_cpes() -> HashMap<String, Cpe> {
    // fetch cpes into map or maybe rocksdb
    let map = HashMap::new();

    return map;
}

async fn do_window(w: &Window) -> Result<(), Box<dyn std::error::Error>> {
    let url = get_url(&w, 0);
    println!("{}", &url);
    let resp = reqwest::get(url).await?.json::<Root>().await?;
    println!("{:#?}", resp);
    Ok(())
}

// split date interval
fn get_windows() -> Vec<Window> {
    let mut res = vec![];
    let mut start = Utc::now();
    let end = Utc::now();
    start = start.checked_sub_signed(Duration::hours(8)).unwrap();
    let w = Window { start, end };
    res.push(w);
    return res;
}

// #[tokio::main]
// async fn main() -> Result<(), Box<dyn std::error::Error>> {
//     let cpes = get_cpes().await;
//     let windows = get_windows();
//     for w in windows {
//         do_window(&w).await?;
//     }
//     Ok(())
// }

#[derive(Deserialize, Debug)]
struct V {
    name: String,
}

fn main() -> Result<(), Box<dyn Error>> {
    let prefix = "root.items";
    let f = File::open("t.json")?;
    let reader = BufReader::new(f);
    // let reader = buffered(f, 10);
    let i = reader
        .lines()
        .into_iter()
        .map(|l| {
            l.unwrap()
                .chars()
                .map(|e| e.to_string())
                .collect::<Vec<_>>()
        })
        .flatten();
    let r = jsonit::stream_read_items_at::<V>(i, String::from(prefix));
    for i in r {
        println!("value {:?}", &i.unwrap());
    }
    // println!("{:?}", r.collect::<Vec<_>>());
    Ok(())
}
