use chrono::{TimeZone, Utc};
use cve_ingest_rust::{get_cpes_for_index, query_github, query_local, CveDb, Window};

use itertools::Itertools;
use std::error::Error;
extern crate clap;
use clap::{Parser, Subcommand};

#[derive(Parser, Debug)]
#[clap(rename_all = "snake_case")]
pub enum MyCli {
    Read {
        #[command(subcommand)]
        mode: Mode,
    },
    Update,
}

#[derive(Subcommand, Debug)]
#[clap(rename_all = "snake_case")]
pub enum Mode {
    Github {
        repo: String,
        branch: String,
        name: String,
        versions: Vec<String>,
    },
    Local {
        /// <string>, "uatom"
        path: String,
        name: String,
        versions: Vec<String>,
    },
    MatchQuery {
        path: String,
        id: String,
    },
}

/// Cli interface here
fn main() -> Result<(), Box<dyn Error>> {
    let parsed = MyCli::parse();
    match &parsed {
        MyCli::Read { mode } => {
            let result = match mode {
                Mode::Github {
                    repo,
                    branch,
                    name,
                    versions,
                } => {
                    let v = versions.iter().map(|e| e.as_str()).collect_vec();
                    println!("Will read {} with versions {:?} from github", &name, &v);
                    query_github(name, v, repo, branch)
                }
                Mode::Local {
                    path,
                    name,
                    versions,
                } => {
                    let v = versions.iter().map(|e| e.as_str()).collect_vec();
                    println!("Will read {} with versions {:?} from local", &name, &v);
                    query_local(name, v, path)
                }
                Mode::MatchQuery { path, id } => {
                    let d = CveDb::from("", &path);
                    let res = get_cpes_for_index(&d.db, &id);
                    res
                }
            };
            println!("\n{:?}", result.unwrap_or(vec![]));
        }
        MyCli::Update => {
            let _chunk_size = 1000;
            let d = CveDb::from("db", "_db");
            d.compact();
            let start = Utc.with_ymd_and_hms(2023, 11, 29, 0, 0, 0).unwrap();
            let end = Utc.with_ymd_and_hms(2023, 12, 24, 0, 0, 0).unwrap();
            println!("size: {:?}", d.get_approximate_size());
            let _test_window = Some(vec![Window { start, end }]);
            let cpes_updated = &d.update_cpes(None); // working
            println!("did update {} cpes", &cpes_updated);
            let _ = &d.update_cves(); // TODO
                                      // should only bind new cves
            d.bind(); // working
        }
    }
    // println!("{:?}", &parsed);

    Ok(())
}
