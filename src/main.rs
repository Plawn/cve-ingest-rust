use chrono::{DateTime, Datelike, Timelike, Utc, FixedOffset, Duration};

use cve_ingest_rust::Root;

type Date = DateTime<Utc>;

fn prepareDate(date: &Date) -> String {
    return ISODateString(date);
}
fn pad(n: u32) -> String {
    if n < 10 {
        return format!("0{}", n);
    }
    return format!("{}", n);
}
fn ISODateString(d: &Date) -> String {
    return format!(
        "{}-{}-{}T{}:{}:{}.000%2B01:00",
        d.year(),
        pad(d.month()),
        pad(d.day()),
        pad(d.hour()),
        pad(d.minute()),
        pad(d.second())
    );
}

fn get_url() -> String {
    // let url = "https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=2023-10-29T13:32:53.000%2B01:00&lastModEndDate=2023-10-29T21:32:53.000%2B01:00&startIndex=0";
    let startIndex = 0;
    let mut start = Utc::now();
    let end = Utc::now();
    start = start.checked_sub_signed(Duration::hours(8)).unwrap();
    let url = format!("https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate={}&lastModEndDate={}&startIndex={}", prepareDate(&start), prepareDate(&end), startIndex);

    return url;
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let url = get_url();
    println!("{}", &url);
    let resp = reqwest::get(url).await?.json::<Root>().await?;
    println!("{:#?}", resp);
    Ok(())
}
