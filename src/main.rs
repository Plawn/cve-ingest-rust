use chrono::TimeZone;
use chrono::Utc;
use cve_ingest_rust::{CveDb, Window};
use std::error::Error;

fn main() -> Result<(), Box<dyn Error>> {
    let _chunk_size = 1000;
    let d = CveDb::from("db", "_db");
    d.compact();
    let start = Utc.with_ymd_and_hms(2023, 11, 29, 0, 0, 0).unwrap();
    let end = Utc.with_ymd_and_hms(2023, 12, 24, 0, 0, 0).unwrap();
    println!("size: {:?}", d.get_approximate_size());
    let _test_window: Option<Vec<Window>> = Some(vec![Window { start, end }]);
    // let cpes_updated = &d.update_cpes(None); // working
    // println!("did update {} cpes", &cpes_updated);
    // let _ = &d.update_cves(); // TODO
    // should only bind new cves
    d.bind(); // working
    Ok(())
}
