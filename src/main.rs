use chrono::TimeZone;
use chrono::Utc;
use cve_ingest_rust::CveReader;
use cve_ingest_rust::{CveDb, Window};
use std::error::Error;

// /// Simple program to greet a person
// #[derive(Parser, Debug)]
// #[command(version, about, long_about = None)]
// struct Args {
//     /// Name of the person to greet
//     #[arg(short, long)]
//     name: String,

//     /// Number of times to greet
//     #[arg(short, long, default_value_t = 1)]
//     count: u8,
// }

fn main() -> Result<(), Box<dyn Error>> {
    let _chunk_size = 1000;
    let d = CveDb::from("db", "_db");
    d.compact();
    let start = Utc.with_ymd_and_hms(2023, 11, 29, 0, 0, 0).unwrap();
    let end = Utc.with_ymd_and_hms(2023, 12, 24, 0, 0, 0).unwrap();
    println!("size: {:?}", d.get_approximate_size());
    let _test_window = Some(vec![Window { start, end }]);
    // let cpes_updated = &d.update_cpes(None); // working
    // println!("did update {} cpes", &cpes_updated);
    // let _ = &d.update_cves(); // TODO
    // should only bind new cves
    // d.bind(); // working

    // let reader = CveReader::at("file://db").expect("failed to open cve reader");
    let reader =
        CveReader::at("https://raw.githubusercontent.com/Plawn/cve-ingest-rust/to-local/db")
            .expect("failed to open cve reader");
    let name = "74cms";
    let version = "4.2.111";
    println!(
        "{:?}",
        reader.get_cves_by_cots(
            name,
            vec![version, "-", "*"]
        )
    );

    Ok(())
}
