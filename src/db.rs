use std::sync::Arc;

use rocksdb::DB;

#[derive(Clone)]
pub struct CveDb {
    pub folder: Arc<str>,
    pub local_db: Arc<str>,
    pub db: Arc<DB>,
}

impl CveDb {
    /// Applies compaction to the current db
    pub fn compact(&self) {
        self.db.compact_range(None::<&[u8]>, None::<&[u8]>);
    }

    /// Use GetIntProperty(cf_handle, â€œrocksdb.estimate-num-keys")
    pub fn get_approximate_size(&self) -> u64 {
        
        self
            .db
            .property_int_value("rocksdb.estimate-num-keys")
            .unwrap()
            .unwrap()
    }

    pub fn from(folder: &str, local_db: &str) -> Self {
        use rocksdb::{DBCompressionType, Options};

        let mut opts = Options::default();
        opts.create_if_missing(true);
        // opts.set_max_open_files(10000);
        // opts.set_use_fsync(false);
        // opts.set_bytes_per_sync(8388608);
        // opts.optimize_for_point_lookup(1024);
        // opts.set_table_cache_num_shard_bits(6);
        // opts.set_max_write_buffer_number(32);
        // opts.set_write_buffer_size(536870912);
        // opts.set_target_file_size_base(1073741824);
        // opts.set_min_write_buffer_number_to_merge(4);
        // opts.set_level_zero_stop_writes_trigger(2000);
        // opts.set_level_zero_slowdown_writes_trigger(0);
        // opts.set_compaction_style(DBCompactionStyle::Universal);
        opts.set_compression_type(DBCompressionType::Zstd);

        Self {
            folder: folder.into(),
            local_db: local_db.into(),
            db: Arc::from(DB::open(&opts, local_db).unwrap()),
        }
    }
}
