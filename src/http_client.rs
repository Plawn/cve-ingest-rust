use std::{io::BufReader, thread::sleep};

use std::time::Duration;

use reqwest::StatusCode;

/// The RetryClient is a helper used to automaticcally retry call on errors or invalid statusCode
pub struct RetryClient {
    client: Client,
    sleep_time: Duration,
    allowed_status: Vec<StatusCode>,
}

use reqwest::blocking::Client;

impl RetryClient {
    pub fn default() -> Self {
        Self::create(
            Self::get_default_client(),
            Duration::from_secs(5),
            vec![StatusCode::OK],
        )
    }

    pub fn get_default_client() -> Client {
        reqwest::blocking::Client::builder()
            .gzip(true)
            .build()
            .expect("#should never fail, we failed to build the client")
    }

    pub fn create(client: Client, sleep_time: Duration, allowed_status: Vec<StatusCode>) -> Self {
        Self {
            client,
            sleep_time,
            allowed_status,
        }
    }

    pub fn get_response(&self, url: &str) -> (StatusCode, BufReader<reqwest::blocking::Response>) {
        println!("{}", &url);
        let res = loop {
            match self.client.get(url).send() {
                Ok(r) => {
                    if self.allowed_status.contains(&r.status()) {
                        break r;
                    }
                    eprintln!(
                        "sleeping for {:?}, got error : {}",
                        self.sleep_time,
                        r.status()
                    );
                }
                Err(err) => {
                    eprintln!("sleeping for {:?}, got error : {}", self.sleep_time, err);
                }
            }
            sleep(self.sleep_time);
        };
        (res.status(), BufReader::new(res))
    }
}
